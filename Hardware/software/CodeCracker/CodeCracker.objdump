
CodeCracker.elf:     file format elf32-littlenios2
CodeCracker.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00002314 memsz 0x00002314 flags r-x
    LOAD off    0x00003334 vaddr 0x00012334 paddr 0x000124d4 align 2**12
         filesz 0x000001a0 memsz 0x000001a0 flags rw-
    LOAD off    0x00003674 vaddr 0x00012674 paddr 0x00012674 align 2**12
         filesz 0x00000000 memsz 0x000001a4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000200c  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001a8  0001218c  0001218c  0000318c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000001a0  00012334  000124d4  00003334  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001a4  00012674  00012674  00003674  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00012818  00012818  000034d4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000034d4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000550  00000000  00000000  000034f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000675c  00000000  00000000  00003a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002760  00000000  00000000  0000a1a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002b3e  00000000  00000000  0000c904  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000007b0  00000000  00000000  0000f444  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001e40  00000000  00000000  0000fbf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002eca  00000000  00000000  00011a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00014900  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000005e0  00000000  00000000  00014940  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001691a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0001691d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00016920  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00016921  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00016922  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00016926  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001692a  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0001692e  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00016937  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00016940  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00016949  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000005a  00000000  00000000  00016954  2**0
                  CONTENTS, READONLY
 29 .jdi          00004920  00000000  00000000  000169ae  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00078340  00000000  00000000  0001b2ce  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
0001218c l    d  .rodata	00000000 .rodata
00012334 l    d  .rwdata	00000000 .rwdata
00012674 l    d  .bss	00000000 .bss
00012818 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../CodeCracker_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
000126a0 l     O .bss	00000078 xv.3573
000121b0 l     O .rodata	00000078 h.3571
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
000111c0 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00012334 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_times.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00012414 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00011f08 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
0001269c g     O .bss	00000004 alt_instruction_exception_handler
00011bc8 g     F .text	0000002c alt_main
0001023c g     F .text	00000014 led_write
00012718 g     O .bss	00000100 alt_irq
000124d4 g       *ABS*	00000000 __flash_rwdata_start
00011174 g     F .text	0000004c printf
00010f18 g     F .text	00000070 .hidden __fixsfsi
000101bc g     F .text	00000080 sys_timer_isr
00012498 g     O .rwdata	00000004 FLATHIGH
000124b0 g     O .rwdata	00000004 jtag_uart
000120e0 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00011bf4 g     F .text	00000060 times
000102b4 g     F .text	0000000c is_flat
00011d74 g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
00012680 g     O .bss	00000004 errno
0001268c g     O .bss	00000004 alt_argv
0001a498 g       *ABS*	00000000 _gp
00011c54 g     F .text	00000004 usleep
00012440 g     O .rwdata	00000030 alt_fd_list
00011f7c g     F .text	00000074 alt_find_dev
000120e8 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00011138 g     F .text	0000003c _printf_r
00011998 g     F .text	00000064 .hidden __udivsi3
0001249c g     O .rwdata	00000004 FLATLOW
000124b4 g     O .rwdata	00000004 alt_max_fd
00011a54 g     F .text	00000094 alt_irq_register
000124a0 g     O .rwdata	00000004 _global_impure_ptr
00012818 g       *ABS*	00000000 __bss_end
00012028 g     F .text	000000b8 alt_tick
00011ff4 g     F .text	00000034 alt_alarm_stop
00012684 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
00012470 g     O .rwdata	00000028 alt_dev_null
00011f04 g     F .text	00000004 alt_dcache_flush_all
000124d4 g       *ABS*	00000000 __ram_rwdata_end
000102c0 g     F .text	00000070 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
000124b8 g     O .rwdata	00000008 alt_dev_list
00011c58 g     F .text	00000060 write
00012334 g       *ABS*	00000000 __ram_rodata_end
00012678 g     O .bss	00000001 led
000119fc g     F .text	00000058 .hidden __umodsi3
00012818 g       *ABS*	00000000 end
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
000110ac g     F .text	00000064 .hidden __clzsi2
00011ce8 g     F .text	00000034 altera_avalon_jtag_uart_write
0001122c g     F .text	0000052c ___vfprintf_internal_r
00010180 g     F .text	0000003c _start
0001267c g     O .bss	00000004 level
00012698 g     O .bss	00000004 _alt_tick_rate
00012694 g     O .bss	00000004 _alt_nticks
00011cd8 g     F .text	00000010 alt_sys_init
00011d24 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
00010f88 g     F .text	00000124 .hidden __floatsisf
00011110 g     F .text	00000028 .hidden __mulsi3
00012334 g       *ABS*	00000000 __ram_rwdata_start
0001218c g       *ABS*	00000000 __ram_rodata_start
00011e7c g     F .text	00000088 alt_busy_sleep
00011dcc g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
0001215c g     F .text	00000030 memcmp
00012818 g       *ABS*	00000000 __alt_stack_base
00011f10 g     F .text	0000006c alt_dev_llist_insert
00011774 g     F .text	000000b8 __sfvwrite_small_dev
00012674 g       *ABS*	00000000 __bss_start
000104c8 g     F .text	00000158 main
00012688 g     O .bss	00000004 alt_envp
000124ac g     O .rwdata	00000004 uart_0
000124c8 g     O .rwdata	00000004 alt_errno
000118a0 g     F .text	00000084 .hidden __divsi3
00010ae8 g     F .text	00000430 .hidden __mulsf3
0001218c g       *ABS*	00000000 __flash_rodata_start
00011cb8 g     F .text	00000020 alt_irq_init
00012228 g     O .rodata	00000100 .hidden __clz_tab
00011848 g     F .text	00000058 _write_r
00010250 g     F .text	00000030 led_response
000124a4 g     O .rwdata	00000004 _impure_ptr
00012690 g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
00012674 g     O .bss	00000001 pwm
000124c0 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00011d1c g     F .text	00000008 alt_up_accelerometer_spi_open_dev
000124d4 g       *ABS*	00000000 _edata
00012818 g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
00011924 g     F .text	00000074 .hidden __modsi3
00011e24 g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010280 g     F .text	00000034 convert_read
0001000c g       .entry	00000000 _exit
00011d38 g     F .text	00000020 alt_up_accelerometer_spi_read
00011d58 g     F .text	0000001c alt_up_accelerometer_spi_write
0001182c g     F .text	0000001c strlen
00011ff0 g     F .text	00000004 alt_icache_flush_all
000124a8 g     O .rwdata	00000004 alt_priority_mask
00010330 g     F .text	00000198 FIR
00011758 g     F .text	0000001c __vfprintf_internal
000124cc g     O .rwdata	00000008 alt_alarm_list
00010620 g     F .text	000004c8 .hidden __addsf3
00011ae8 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1010c:	04000074 	movhi	r16,1
   10110:	8409c604 	addi	r16,r16,10008

  active = alt_irq_pending ();

  do
  {
    i = 0;
   10114:	000b883a 	mov	r5,zero
    mask = 1;
   10118:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	1888703a 	and	r4,r3,r2
   10120:	20000b26 	beq	r4,zero,10150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   10124:	280490fa 	slli	r2,r5,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	183ff51e 	bne	r3,zero,10114 <__alt_data_end+0xffff0114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10150:	1085883a 	add	r2,r2,r2
      i++;
   10154:	29400044 	addi	r5,r5,1

    } while (1);
   10158:	003ff006 	br	1011c <__alt_data_end+0xffff011c>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a08117 	ldw	r2,-32252(gp)
   10160:	10000426 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10164:	200b883a 	mov	r5,r4
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1018c:	d6a92614 	ori	gp,gp,42136
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	10899d14 	ori	r2,r2,9844

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18ca0614 	ori	r3,r3,10264

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <__alt_data_end+0xffff01a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	0011ae80 	call	11ae8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	0011bc80 	call	11bc8 <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <__alt_data_end+0xffff01b8>

000101bc <sys_timer_isr>:
}



void sys_timer_isr() {
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   101bc:	008000b4 	movhi	r2,2
   101c0:	10840804 	addi	r2,r2,4128
   101c4:	10000035 	stwio	zero,0(r2)

    if (pwm < abs(level)) {
   101c8:	d0a07917 	ldw	r2,-32284(gp)
   101cc:	d1607707 	ldb	r5,-32292(gp)
   101d0:	1009883a 	mov	r4,r2
   101d4:	1000010e 	bge	r2,zero,101dc <sys_timer_isr+0x20>
   101d8:	0089c83a 	sub	r4,zero,r2
   101dc:	00c000b4 	movhi	r3,2
   101e0:	18c43004 	addi	r3,r3,4288
   101e4:	2900080e 	bge	r5,r4,10208 <sys_timer_isr+0x4c>

        if (level < 0) {
   101e8:	1000040e 	bge	r2,zero,101fc <sys_timer_isr+0x40>
alt_8 pwm = 0;
alt_u8 led;
int level;

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   101ec:	d0a07803 	ldbu	r2,-32288(gp)
   101f0:	1085883a 	add	r2,r2,r2
   101f4:	10803fcc 	andi	r2,r2,255
   101f8:	00000406 	br	1020c <sys_timer_isr+0x50>
   101fc:	d0a07803 	ldbu	r2,-32288(gp)
   10200:	1004d07a 	srli	r2,r2,1
   10204:	00000106 	br	1020c <sys_timer_isr+0x50>
   10208:	d0a07803 	ldbu	r2,-32288(gp)
   1020c:	18800035 	stwio	r2,0(r3)

    } else {
        led_write(led);
    }

    if (pwm > PWM_PERIOD) {
   10210:	d0a07703 	ldbu	r2,-32292(gp)
   10214:	01000404 	movi	r4,16
   10218:	10c03fcc 	andi	r3,r2,255
   1021c:	18c0201c 	xori	r3,r3,128
   10220:	18ffe004 	addi	r3,r3,-128
   10224:	20c0020e 	bge	r4,r3,10230 <sys_timer_isr+0x74>
        pwm = 0;
   10228:	d0207705 	stb	zero,-32292(gp)
   1022c:	f800283a 	ret
    } else {
        pwm++;
   10230:	10800044 	addi	r2,r2,1
   10234:	d0a07705 	stb	r2,-32292(gp)
   10238:	f800283a 	ret

0001023c <led_write>:
alt_8 pwm = 0;
alt_u8 led;
int level;

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   1023c:	008000b4 	movhi	r2,2
   10240:	21003fcc 	andi	r4,r4,255
   10244:	10843004 	addi	r2,r2,4288
   10248:	11000035 	stwio	r4,0(r2)
   1024c:	f800283a 	ret

00010250 <led_response>:
}

void led_response(char check){
    if(check == 'y'){
   10250:	21003fcc 	andi	r4,r4,255
   10254:	2100201c 	xori	r4,r4,128
   10258:	008000b4 	movhi	r2,2
   1025c:	213fe004 	addi	r4,r4,-128
   10260:	00c01e44 	movi	r3,121
   10264:	10843004 	addi	r2,r2,4288
   10268:	20c0021e 	bne	r4,r3,10274 <led_response+0x24>
        IOWR(LED_BASE, 0, 256);
   1026c:	00c04004 	movi	r3,256
   10270:	00000106 	br	10278 <led_response+0x28>
    }else{
        IOWR(LED_BASE, 0, 16);
   10274:	00c00404 	movi	r3,16
   10278:	10c00035 	stwio	r3,0(r2)
   1027c:	f800283a 	ret

00010280 <convert_read>:
}



void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
   10280:	213ff804 	addi	r4,r4,-32
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   10284:	2005d1ba 	srai	r2,r4,6
    * level = (acc_read >> 1) & 0x1f;
   10288:	2009d07a 	srai	r4,r4,1


void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   1028c:	10c001cc 	andi	r3,r2,7
   10290:	00800204 	movi	r2,8
   10294:	10cfc83a 	sub	r7,r2,r3
   10298:	11ce983a 	sll	r7,r2,r7
   1029c:	10c5d83a 	sra	r2,r2,r3
    * level = (acc_read >> 1) & 0x1f;
   102a0:	210007cc 	andi	r4,r4,31


void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   102a4:	3884b03a 	or	r2,r7,r2
   102a8:	30800005 	stb	r2,0(r6)
    * level = (acc_read >> 1) & 0x1f;
   102ac:	29000015 	stw	r4,0(r5)
   102b0:	f800283a 	ret

000102b4 <is_flat>:
}

int is_flat(alt_32 reading){
   102b4:	21000f04 	addi	r4,r4,60
   102b8:	20801e70 	cmpltui	r2,r4,121
    if((reading < -60) || (reading > 60)){
        return 0;
    }else{
        return 1;
    }
}
   102bc:	f800283a 	ret

000102c0 <timer_init>:
        pwm++;
    }

}

void timer_init(void * isr) {
   102c0:	defffe04 	addi	sp,sp,-8
   102c4:	dc000015 	stw	r16,0(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   102c8:	040000b4 	movhi	r16,2
        pwm++;
    }

}

void timer_init(void * isr) {
   102cc:	dfc00115 	stw	ra,4(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   102d0:	84040904 	addi	r16,r16,4132
   102d4:	008000c4 	movi	r2,3
   102d8:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   102dc:	00c000b4 	movhi	r3,2
   102e0:	0005883a 	mov	r2,zero
   102e4:	18c40804 	addi	r3,r3,4128
   102e8:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
   102ec:	00c000b4 	movhi	r3,2
   102f0:	18c40a04 	addi	r3,r3,4136
   102f4:	01424004 	movi	r5,2304
   102f8:	19400035 	stwio	r5,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
   102fc:	00c000b4 	movhi	r3,2
   10300:	18c40b04 	addi	r3,r3,4140
   10304:	18800035 	stwio	r2,0(r3)
    alt_irq_register(TIMER_IRQ, 0, isr);
   10308:	200d883a 	mov	r6,r4
   1030c:	000b883a 	mov	r5,zero
   10310:	01000044 	movi	r4,1
   10314:	0011a540 	call	11a54 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   10318:	008001c4 	movi	r2,7
   1031c:	80800035 	stwio	r2,0(r16)

}
   10320:	dfc00117 	ldw	ra,4(sp)
   10324:	dc000017 	ldw	r16,0(sp)
   10328:	dec00204 	addi	sp,sp,8
   1032c:	f800283a 	ret

00010330 <FIR>:

  // filter output
  alt_32 yn = 0;

  // implementation of delay line
  xv[29] = xv[28];
   10330:	00800074 	movhi	r2,1
   10334:	1089a804 	addi	r2,r2,9888
   10338:	10c01c17 	ldw	r3,112(r2)
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);

}

alt_32 FIR(alt_32 xn)
{
   1033c:	defff904 	addi	sp,sp,-28
   10340:	dd400515 	stw	r21,20(sp)
   10344:	dcc00315 	stw	r19,12(sp)
   10348:	dc800215 	stw	r18,8(sp)
   1034c:	dc400115 	stw	r17,4(sp)
   10350:	dc000015 	stw	r16,0(sp)
   10354:	dfc00615 	stw	ra,24(sp)
   10358:	dd000415 	stw	r20,16(sp)

  // filter output
  alt_32 yn = 0;

  // implementation of delay line
  xv[29] = xv[28];
   1035c:	10c01d15 	stw	r3,116(r2)
  xv[28] = xv[27];
   10360:	10c01b17 	ldw	r3,108(r2)

  // convolve delay line by
  // filter coefficients
  for(int i=0;i<30;i++)
  {
    yn += h[i]*xv[i];
   10364:	05400074 	movhi	r21,1
  xv[5] = xv[4];
  xv[4] = xv[3];
  xv[3] = xv[2];
  xv[2] = xv[1];
  xv[1] = xv[0];
  xv[0] = xn;
   10368:	0023883a 	mov	r17,zero
  // filter output
  alt_32 yn = 0;

  // implementation of delay line
  xv[29] = xv[28];
  xv[28] = xv[27];
   1036c:	10c01c15 	stw	r3,112(r2)
  xv[27] = xv[26];
   10370:	10c01a17 	ldw	r3,104(r2)

  // delay line of time samples
  static alt_32 xv[30] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

  // filter output
  alt_32 yn = 0;
   10374:	0025883a 	mov	r18,zero
   10378:	1021883a 	mov	r16,r2

  // implementation of delay line
  xv[29] = xv[28];
  xv[28] = xv[27];
  xv[27] = xv[26];
   1037c:	10c01b15 	stw	r3,108(r2)
  xv[26] = xv[25];
   10380:	10c01917 	ldw	r3,100(r2)

  // convolve delay line by
  // filter coefficients
  for(int i=0;i<30;i++)
  {
    yn += h[i]*xv[i];
   10384:	ad486c04 	addi	r21,r21,8624
  xv[1] = xv[0];
  xv[0] = xn;

  // convolve delay line by
  // filter coefficients
  for(int i=0;i<30;i++)
   10388:	04c01e04 	movi	r19,120

  // implementation of delay line
  xv[29] = xv[28];
  xv[28] = xv[27];
  xv[27] = xv[26];
  xv[26] = xv[25];
   1038c:	10c01a15 	stw	r3,104(r2)
  xv[25] = xv[24];
   10390:	10c01817 	ldw	r3,96(r2)
   10394:	10c01915 	stw	r3,100(r2)
  xv[24] = xv[23];
   10398:	10c01717 	ldw	r3,92(r2)
   1039c:	10c01815 	stw	r3,96(r2)
  xv[23] = xv[22];
   103a0:	10c01617 	ldw	r3,88(r2)
   103a4:	10c01715 	stw	r3,92(r2)
  xv[22] = xv[21];
   103a8:	10c01517 	ldw	r3,84(r2)
   103ac:	10c01615 	stw	r3,88(r2)
  xv[21] = xv[20];
   103b0:	10c01417 	ldw	r3,80(r2)
   103b4:	10c01515 	stw	r3,84(r2)
  xv[20] = xv[19];
   103b8:	10c01317 	ldw	r3,76(r2)
   103bc:	10c01415 	stw	r3,80(r2)
  xv[19] = xv[18];
   103c0:	10c01217 	ldw	r3,72(r2)
   103c4:	10c01315 	stw	r3,76(r2)
  xv[18] = xv[17];
   103c8:	10c01117 	ldw	r3,68(r2)
   103cc:	10c01215 	stw	r3,72(r2)
  xv[17] = xv[16];
   103d0:	10c01017 	ldw	r3,64(r2)
   103d4:	10c01115 	stw	r3,68(r2)
  xv[16] = xv[15];
   103d8:	10c00f17 	ldw	r3,60(r2)
   103dc:	10c01015 	stw	r3,64(r2)
  xv[15] = xv[14];
   103e0:	10c00e17 	ldw	r3,56(r2)
   103e4:	10c00f15 	stw	r3,60(r2)
  xv[14] = xv[13];
   103e8:	10c00d17 	ldw	r3,52(r2)
   103ec:	10c00e15 	stw	r3,56(r2)
  xv[13] = xv[12];
   103f0:	10c00c17 	ldw	r3,48(r2)
   103f4:	10c00d15 	stw	r3,52(r2)
  xv[12] = xv[11];
   103f8:	10c00b17 	ldw	r3,44(r2)
   103fc:	10c00c15 	stw	r3,48(r2)
  xv[11] = xv[10];
   10400:	10c00a17 	ldw	r3,40(r2)
   10404:	10c00b15 	stw	r3,44(r2)
  xv[10] = xv[9];
   10408:	10c00917 	ldw	r3,36(r2)
   1040c:	10c00a15 	stw	r3,40(r2)
  xv[9] = xv[8];
   10410:	10c00817 	ldw	r3,32(r2)
   10414:	10c00915 	stw	r3,36(r2)
  xv[8] = xv[7];
   10418:	10c00717 	ldw	r3,28(r2)
   1041c:	10c00815 	stw	r3,32(r2)
  xv[7] = xv[6];
   10420:	10c00617 	ldw	r3,24(r2)
   10424:	10c00715 	stw	r3,28(r2)
  xv[6] = xv[5];
   10428:	10c00517 	ldw	r3,20(r2)
   1042c:	10c00615 	stw	r3,24(r2)
  xv[5] = xv[4];
   10430:	10c00417 	ldw	r3,16(r2)
   10434:	10c00515 	stw	r3,20(r2)
  xv[4] = xv[3];
   10438:	10c00317 	ldw	r3,12(r2)
   1043c:	10c00415 	stw	r3,16(r2)
  xv[3] = xv[2];
   10440:	10c00217 	ldw	r3,8(r2)
   10444:	10c00315 	stw	r3,12(r2)
  xv[2] = xv[1];
   10448:	10c00117 	ldw	r3,4(r2)
   1044c:	10c00215 	stw	r3,8(r2)
  xv[1] = xv[0];
   10450:	10c00017 	ldw	r3,0(r2)
   10454:	10c00115 	stw	r3,4(r2)
  xv[0] = xn;
   10458:	11000015 	stw	r4,0(r2)

  // convolve delay line by
  // filter coefficients
  for(int i=0;i<30;i++)
  {
    yn += h[i]*xv[i];
   1045c:	8c05883a 	add	r2,r17,r16
   10460:	11000017 	ldw	r4,0(r2)
   10464:	0010f880 	call	10f88 <__floatsisf>
   10468:	8d47883a 	add	r3,r17,r21
   1046c:	19400017 	ldw	r5,0(r3)
   10470:	1009883a 	mov	r4,r2
   10474:	8c400104 	addi	r17,r17,4
   10478:	0010ae80 	call	10ae8 <__mulsf3>
   1047c:	9009883a 	mov	r4,r18
   10480:	1029883a 	mov	r20,r2
   10484:	0010f880 	call	10f88 <__floatsisf>
   10488:	100b883a 	mov	r5,r2
   1048c:	a009883a 	mov	r4,r20
   10490:	00106200 	call	10620 <__addsf3>
   10494:	1009883a 	mov	r4,r2
   10498:	0010f180 	call	10f18 <__fixsfsi>
   1049c:	1025883a 	mov	r18,r2
  xv[1] = xv[0];
  xv[0] = xn;

  // convolve delay line by
  // filter coefficients
  for(int i=0;i<30;i++)
   104a0:	8cffee1e 	bne	r17,r19,1045c <__alt_data_end+0xffff045c>
    yn += h[i]*xv[i];
  }
  // apply gain
  yn = hg*yn;
  return yn;
}
   104a4:	dfc00617 	ldw	ra,24(sp)
   104a8:	dd400517 	ldw	r21,20(sp)
   104ac:	dd000417 	ldw	r20,16(sp)
   104b0:	dcc00317 	ldw	r19,12(sp)
   104b4:	dc800217 	ldw	r18,8(sp)
   104b8:	dc400117 	ldw	r17,4(sp)
   104bc:	dc000017 	ldw	r16,0(sp)
   104c0:	dec00704 	addi	sp,sp,28
   104c4:	f800283a 	ret

000104c8 <main>:
    //alt_32 cmd;
    //cmd = alt_getchar();

    alt_32 x_read;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   104c8:	01000074 	movhi	r4,1
  // apply gain
  yn = hg*yn;
  return yn;
}

int main() {
   104cc:	defff804 	addi	sp,sp,-32
    //alt_32 cmd;
    //cmd = alt_getchar();

    alt_32 x_read;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   104d0:	21086304 	addi	r4,r4,8588
  // apply gain
  yn = hg*yn;
  return yn;
}

int main() {
   104d4:	dfc00715 	stw	ra,28(sp)
   104d8:	dd400615 	stw	r21,24(sp)
   104dc:	dd000515 	stw	r20,20(sp)
   104e0:	dcc00415 	stw	r19,16(sp)
   104e4:	dc800315 	stw	r18,12(sp)
   104e8:	dc400215 	stw	r17,8(sp)
   104ec:	dc000115 	stw	r16,4(sp)
    //alt_32 cmd;
    //cmd = alt_getchar();

    alt_32 x_read;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   104f0:	0011d1c0 	call	11d1c <alt_up_accelerometer_spi_open_dev>
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   104f4:	10004026 	beq	r2,zero,105f8 <main+0x130>
        return 1;
    }

    timer_init(sys_timer_isr);
   104f8:	01000074 	movhi	r4,1
   104fc:	21006f04 	addi	r4,r4,444
            	FIR_out = FIR(x_read);
            }
            response[100] = 'l';
            //send response
        }
        switch_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   10500:	048000b4 	movhi	r18,2
			if(switch_datain &= 0b0000000001){
				int i = 0;
				while (response[i] != '\0') {
					IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, response[i]);
   10504:	04c000b4 	movhi	r19,2
   10508:	1021883a 	mov	r16,r2
            	FIR_out = FIR(x_read);
            }
            response[100] = 'l';
            //send response
        }
        switch_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   1050c:	94842c04 	addi	r18,r18,4272
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
        return 1;
    }

    timer_init(sys_timer_isr);
   10510:	00102c00 	call	102c0 <timer_init>
            //send response
        }
        switch_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
			if(switch_datain &= 0b0000000001){
				int i = 0;
				while (response[i] != '\0') {
   10514:	0023883a 	mov	r17,zero
					IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, response[i]);
   10518:	9cc40104 	addi	r19,r19,4100
    timer_init(sys_timer_isr);
    char response[100]; // make array for longer sequence
    int switch_datain;
    while (1) {
    	clock_t exec_t1, exec_t2;
    	exec_t1 = times(NULL);
   1051c:	0009883a 	mov	r4,zero
   10520:	0011bf40 	call	11bf4 <times>
        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   10524:	d80b883a 	mov	r5,sp
   10528:	8009883a 	mov	r4,r16
   1052c:	0011d740 	call	11d74 <alt_up_accelerometer_spi_read_x_axis>
        //printf("RAW: %d\t", x_read);
        alt_32 FIR_out;
        FIR_out = FIR(x_read);
   10530:	d9000017 	ldw	r4,0(sp)
   10534:	00103300 	call	10330 <FIR>
        if(FIR_out < RIGHTLIM){
   10538:	00ffda84 	movi	r3,-150
   1053c:	10c0050e 	bge	r2,r3,10554 <main+0x8c>
    * led = (8 >> val) | (8 << (8 - val));
    * level = (acc_read >> 1) & 0x1f;
}

int is_flat(alt_32 reading){
    if((reading < -60) || (reading > 60)){
   10540:	05001e04 	movi	r20,120
   10544:	10800f04 	addi	r2,r2,60
   10548:	a0801f36 	bltu	r20,r2,105c8 <main+0x100>
        if(FIR_out < RIGHTLIM){
            while(is_flat(FIR_out) == 0){
            	alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
            	FIR_out = FIR(x_read);
            }
            response[100] = 'r';
   1054c:	05001c84 	movi	r20,114
   10550:	00000606 	br	1056c <main+0xa4>
            //send response
        }else if(FIR_out > LEFTLIM){
   10554:	00c02584 	movi	r3,150
   10558:	1880040e 	bge	r3,r2,1056c <main+0xa4>
    * led = (8 >> val) | (8 << (8 - val));
    * level = (acc_read >> 1) & 0x1f;
}

int is_flat(alt_32 reading){
    if((reading < -60) || (reading > 60)){
   1055c:	05001e04 	movi	r20,120
   10560:	10800f04 	addi	r2,r2,60
   10564:	a0801e36 	bltu	r20,r2,105e0 <main+0x118>
        }else if(FIR_out > LEFTLIM){
            while(is_flat(FIR_out) == 0){
            	alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
            	FIR_out = FIR(x_read);
            }
            response[100] = 'l';
   10568:	05001b04 	movi	r20,108
            //send response
        }
        switch_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   1056c:	90800037 	ldwio	r2,0(r18)
   10570:	0084303a 	nor	r2,zero,r2
			if(switch_datain &= 0b0000000001){
   10574:	1080004c 	andi	r2,r2,1
   10578:	10000c26 	beq	r2,zero,105ac <main+0xe4>
				int i = 0;
				while (response[i] != '\0') {
					IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, response[i]);
					printf("<-> %c <->", response[100]);
   1057c:	a5403fcc 	andi	r21,r20,255
   10580:	ad40201c 	xori	r21,r21,128
   10584:	ad7fe004 	addi	r21,r21,-128
            //send response
        }
        switch_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
			if(switch_datain &= 0b0000000001){
				int i = 0;
				while (response[i] != '\0') {
   10588:	88000a26 	beq	r17,zero,105b4 <main+0xec>
					IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, response[i]);
   1058c:	9c400035 	stwio	r17,0(r19)
					printf("<-> %c <->", response[100]);
   10590:	01000074 	movhi	r4,1
   10594:	a80b883a 	mov	r5,r21
   10598:	21086904 	addi	r4,r4,8612
   1059c:	00111740 	call	11174 <printf>
					i++;
					usleep(10000) ;
   105a0:	0109c404 	movi	r4,10000
   105a4:	0011c540 	call	11c54 <usleep>
   105a8:	003ff706 	br	10588 <__alt_data_end+0xffff0588>
				}
			}
			else {
			    usleep(50000);
   105ac:	0130d414 	movui	r4,50000
   105b0:	0011c540 	call	11c54 <usleep>
			}

        //printf("<-> %c <->", response[100]);
        //exec_t2 = times(NULL); // get system time after finishing the process
        //printf("\tTime = %d ticks \n", (int)(exec_t2-exec_t1));
        convert_read(x_read, & level, & led);
   105b4:	d9000017 	ldw	r4,0(sp)
   105b8:	d1a07804 	addi	r6,gp,-32288
   105bc:	d1607904 	addi	r5,gp,-32284
   105c0:	00102800 	call	10280 <convert_read>



    }
   105c4:	003fd506 	br	1051c <__alt_data_end+0xffff051c>
        //printf("RAW: %d\t", x_read);
        alt_32 FIR_out;
        FIR_out = FIR(x_read);
        if(FIR_out < RIGHTLIM){
            while(is_flat(FIR_out) == 0){
            	alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   105c8:	8009883a 	mov	r4,r16
   105cc:	d80b883a 	mov	r5,sp
   105d0:	0011d740 	call	11d74 <alt_up_accelerometer_spi_read_x_axis>
            	FIR_out = FIR(x_read);
   105d4:	d9000017 	ldw	r4,0(sp)
   105d8:	00103300 	call	10330 <FIR>
   105dc:	003fd906 	br	10544 <__alt_data_end+0xffff0544>
            }
            response[100] = 'r';
            //send response
        }else if(FIR_out > LEFTLIM){
            while(is_flat(FIR_out) == 0){
            	alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   105e0:	8009883a 	mov	r4,r16
   105e4:	d80b883a 	mov	r5,sp
   105e8:	0011d740 	call	11d74 <alt_up_accelerometer_spi_read_x_axis>
            	FIR_out = FIR(x_read);
   105ec:	d9000017 	ldw	r4,0(sp)
   105f0:	00103300 	call	10330 <FIR>
   105f4:	003fda06 	br	10560 <__alt_data_end+0xffff0560>


    }

    return 0;
}
   105f8:	00800044 	movi	r2,1
   105fc:	dfc00717 	ldw	ra,28(sp)
   10600:	dd400617 	ldw	r21,24(sp)
   10604:	dd000517 	ldw	r20,20(sp)
   10608:	dcc00417 	ldw	r19,16(sp)
   1060c:	dc800317 	ldw	r18,12(sp)
   10610:	dc400217 	ldw	r17,8(sp)
   10614:	dc000117 	ldw	r16,4(sp)
   10618:	dec00804 	addi	sp,sp,32
   1061c:	f800283a 	ret

00010620 <__addsf3>:
   10620:	defffc04 	addi	sp,sp,-16
   10624:	2004d7fa 	srli	r2,r4,31
   10628:	280cd5fa 	srli	r6,r5,23
   1062c:	dc000015 	stw	r16,0(sp)
   10630:	00c02034 	movhi	r3,128
   10634:	2020d5fa 	srli	r16,r4,23
   10638:	280ed7fa 	srli	r7,r5,31
   1063c:	18ffffc4 	addi	r3,r3,-1
   10640:	dc400115 	stw	r17,4(sp)
   10644:	1908703a 	and	r4,r3,r4
   10648:	194a703a 	and	r5,r3,r5
   1064c:	dfc00315 	stw	ra,12(sp)
   10650:	dc800215 	stw	r18,8(sp)
   10654:	14403fcc 	andi	r17,r2,255
   10658:	84003fcc 	andi	r16,r16,255
   1065c:	200890fa 	slli	r4,r4,3
   10660:	31803fcc 	andi	r6,r6,255
   10664:	280a90fa 	slli	r5,r5,3
   10668:	89c05026 	beq	r17,r7,107ac <__addsf3+0x18c>
   1066c:	8185c83a 	sub	r2,r16,r6
   10670:	00807a0e 	bge	zero,r2,1085c <__addsf3+0x23c>
   10674:	30001e1e 	bne	r6,zero,106f0 <__addsf3+0xd0>
   10678:	28006d1e 	bne	r5,zero,10830 <__addsf3+0x210>
   1067c:	208001cc 	andi	r2,r4,7
   10680:	10000426 	beq	r2,zero,10694 <__addsf3+0x74>
   10684:	208003cc 	andi	r2,r4,15
   10688:	00c00104 	movi	r3,4
   1068c:	10c00126 	beq	r2,r3,10694 <__addsf3+0x74>
   10690:	20c9883a 	add	r4,r4,r3
   10694:	2081002c 	andhi	r2,r4,1024
   10698:	10003926 	beq	r2,zero,10780 <__addsf3+0x160>
   1069c:	84000044 	addi	r16,r16,1
   106a0:	00803fc4 	movi	r2,255
   106a4:	80807826 	beq	r16,r2,10888 <__addsf3+0x268>
   106a8:	200891ba 	slli	r4,r4,6
   106ac:	8805883a 	mov	r2,r17
   106b0:	2008d27a 	srli	r4,r4,9
   106b4:	84003fcc 	andi	r16,r16,255
   106b8:	800695fa 	slli	r3,r16,23
   106bc:	10803fcc 	andi	r2,r2,255
   106c0:	04002034 	movhi	r16,128
   106c4:	843fffc4 	addi	r16,r16,-1
   106c8:	100497fa 	slli	r2,r2,31
   106cc:	2408703a 	and	r4,r4,r16
   106d0:	20e0b03a 	or	r16,r4,r3
   106d4:	8084b03a 	or	r2,r16,r2
   106d8:	dfc00317 	ldw	ra,12(sp)
   106dc:	dc800217 	ldw	r18,8(sp)
   106e0:	dc400117 	ldw	r17,4(sp)
   106e4:	dc000017 	ldw	r16,0(sp)
   106e8:	dec00404 	addi	sp,sp,16
   106ec:	f800283a 	ret
   106f0:	00c03fc4 	movi	r3,255
   106f4:	80ffe126 	beq	r16,r3,1067c <__alt_data_end+0xffff067c>
   106f8:	29410034 	orhi	r5,r5,1024
   106fc:	00c006c4 	movi	r3,27
   10700:	18807516 	blt	r3,r2,108d8 <__addsf3+0x2b8>
   10704:	00c00804 	movi	r3,32
   10708:	1887c83a 	sub	r3,r3,r2
   1070c:	28c6983a 	sll	r3,r5,r3
   10710:	288ad83a 	srl	r5,r5,r2
   10714:	1804c03a 	cmpne	r2,r3,zero
   10718:	288ab03a 	or	r5,r5,r2
   1071c:	2149c83a 	sub	r4,r4,r5
   10720:	2081002c 	andhi	r2,r4,1024
   10724:	10001426 	beq	r2,zero,10778 <__addsf3+0x158>
   10728:	04810034 	movhi	r18,1024
   1072c:	94bfffc4 	addi	r18,r18,-1
   10730:	24a4703a 	and	r18,r4,r18
   10734:	9009883a 	mov	r4,r18
   10738:	00110ac0 	call	110ac <__clzsi2>
   1073c:	10bffec4 	addi	r2,r2,-5
   10740:	90a4983a 	sll	r18,r18,r2
   10744:	14005416 	blt	r2,r16,10898 <__addsf3+0x278>
   10748:	1405c83a 	sub	r2,r2,r16
   1074c:	11000044 	addi	r4,r2,1
   10750:	00800804 	movi	r2,32
   10754:	1105c83a 	sub	r2,r2,r4
   10758:	9084983a 	sll	r2,r18,r2
   1075c:	9124d83a 	srl	r18,r18,r4
   10760:	0021883a 	mov	r16,zero
   10764:	1008c03a 	cmpne	r4,r2,zero
   10768:	9108b03a 	or	r4,r18,r4
   1076c:	003fc306 	br	1067c <__alt_data_end+0xffff067c>
   10770:	1000db26 	beq	r2,zero,10ae0 <__addsf3+0x4c0>
   10774:	1009883a 	mov	r4,r2
   10778:	208001cc 	andi	r2,r4,7
   1077c:	103fc11e 	bne	r2,zero,10684 <__alt_data_end+0xffff0684>
   10780:	2006d0fa 	srli	r3,r4,3
   10784:	01003fc4 	movi	r4,255
   10788:	8805883a 	mov	r2,r17
   1078c:	8100241e 	bne	r16,r4,10820 <__addsf3+0x200>
   10790:	18006e26 	beq	r3,zero,1094c <__addsf3+0x32c>
   10794:	19001034 	orhi	r4,r3,64
   10798:	00c02034 	movhi	r3,128
   1079c:	18ffffc4 	addi	r3,r3,-1
   107a0:	043fffc4 	movi	r16,-1
   107a4:	20c8703a 	and	r4,r4,r3
   107a8:	003fc206 	br	106b4 <__alt_data_end+0xffff06b4>
   107ac:	8187c83a 	sub	r3,r16,r6
   107b0:	00c03e0e 	bge	zero,r3,108ac <__addsf3+0x28c>
   107b4:	30002326 	beq	r6,zero,10844 <__addsf3+0x224>
   107b8:	01803fc4 	movi	r6,255
   107bc:	81bfaf26 	beq	r16,r6,1067c <__alt_data_end+0xffff067c>
   107c0:	29410034 	orhi	r5,r5,1024
   107c4:	018006c4 	movi	r6,27
   107c8:	30c07416 	blt	r6,r3,1099c <__addsf3+0x37c>
   107cc:	01800804 	movi	r6,32
   107d0:	30cdc83a 	sub	r6,r6,r3
   107d4:	298c983a 	sll	r6,r5,r6
   107d8:	28cad83a 	srl	r5,r5,r3
   107dc:	3006c03a 	cmpne	r3,r6,zero
   107e0:	28cab03a 	or	r5,r5,r3
   107e4:	2149883a 	add	r4,r4,r5
   107e8:	20c1002c 	andhi	r3,r4,1024
   107ec:	183fe226 	beq	r3,zero,10778 <__alt_data_end+0xffff0778>
   107f0:	84000044 	addi	r16,r16,1
   107f4:	00c03fc4 	movi	r3,255
   107f8:	80c05426 	beq	r16,r3,1094c <__addsf3+0x32c>
   107fc:	00bf0034 	movhi	r2,64512
   10800:	10bfffc4 	addi	r2,r2,-1
   10804:	20c0004c 	andi	r3,r4,1
   10808:	2088703a 	and	r4,r4,r2
   1080c:	2008d07a 	srli	r4,r4,1
   10810:	20c8b03a 	or	r4,r4,r3
   10814:	003f9906 	br	1067c <__alt_data_end+0xffff067c>
   10818:	0007883a 	mov	r3,zero
   1081c:	0005883a 	mov	r2,zero
   10820:	01002034 	movhi	r4,128
   10824:	213fffc4 	addi	r4,r4,-1
   10828:	1908703a 	and	r4,r3,r4
   1082c:	003fa106 	br	106b4 <__alt_data_end+0xffff06b4>
   10830:	10bfffc4 	addi	r2,r2,-1
   10834:	103fb926 	beq	r2,zero,1071c <__alt_data_end+0xffff071c>
   10838:	00c03fc4 	movi	r3,255
   1083c:	80ffaf1e 	bne	r16,r3,106fc <__alt_data_end+0xffff06fc>
   10840:	003f8e06 	br	1067c <__alt_data_end+0xffff067c>
   10844:	283f8d26 	beq	r5,zero,1067c <__alt_data_end+0xffff067c>
   10848:	18ffffc4 	addi	r3,r3,-1
   1084c:	183fe526 	beq	r3,zero,107e4 <__alt_data_end+0xffff07e4>
   10850:	01803fc4 	movi	r6,255
   10854:	81bfdb1e 	bne	r16,r6,107c4 <__alt_data_end+0xffff07c4>
   10858:	003f8806 	br	1067c <__alt_data_end+0xffff067c>
   1085c:	1000201e 	bne	r2,zero,108e0 <__addsf3+0x2c0>
   10860:	80800044 	addi	r2,r16,1
   10864:	10803fcc 	andi	r2,r2,255
   10868:	01800044 	movi	r6,1
   1086c:	3080450e 	bge	r6,r2,10984 <__addsf3+0x364>
   10870:	2165c83a 	sub	r18,r4,r5
   10874:	90c1002c 	andhi	r3,r18,1024
   10878:	18002b26 	beq	r3,zero,10928 <__addsf3+0x308>
   1087c:	2925c83a 	sub	r18,r5,r4
   10880:	3823883a 	mov	r17,r7
   10884:	003fab06 	br	10734 <__alt_data_end+0xffff0734>
   10888:	8805883a 	mov	r2,r17
   1088c:	043fffc4 	movi	r16,-1
   10890:	0009883a 	mov	r4,zero
   10894:	003f8706 	br	106b4 <__alt_data_end+0xffff06b4>
   10898:	013f0034 	movhi	r4,64512
   1089c:	213fffc4 	addi	r4,r4,-1
   108a0:	80a1c83a 	sub	r16,r16,r2
   108a4:	9108703a 	and	r4,r18,r4
   108a8:	003f7406 	br	1067c <__alt_data_end+0xffff067c>
   108ac:	1800411e 	bne	r3,zero,109b4 <__addsf3+0x394>
   108b0:	80c00044 	addi	r3,r16,1
   108b4:	19c03fcc 	andi	r7,r3,255
   108b8:	01800044 	movi	r6,1
   108bc:	31c0260e 	bge	r6,r7,10958 <__addsf3+0x338>
   108c0:	01803fc4 	movi	r6,255
   108c4:	19802126 	beq	r3,r6,1094c <__addsf3+0x32c>
   108c8:	2149883a 	add	r4,r4,r5
   108cc:	2008d07a 	srli	r4,r4,1
   108d0:	1821883a 	mov	r16,r3
   108d4:	003f6906 	br	1067c <__alt_data_end+0xffff067c>
   108d8:	01400044 	movi	r5,1
   108dc:	003f8f06 	br	1071c <__alt_data_end+0xffff071c>
   108e0:	8000151e 	bne	r16,zero,10938 <__addsf3+0x318>
   108e4:	20002f26 	beq	r4,zero,109a4 <__addsf3+0x384>
   108e8:	0084303a 	nor	r2,zero,r2
   108ec:	10000a26 	beq	r2,zero,10918 <__addsf3+0x2f8>
   108f0:	00c03fc4 	movi	r3,255
   108f4:	30c02b26 	beq	r6,r3,109a4 <__addsf3+0x384>
   108f8:	00c006c4 	movi	r3,27
   108fc:	18806d16 	blt	r3,r2,10ab4 <__addsf3+0x494>
   10900:	00c00804 	movi	r3,32
   10904:	1887c83a 	sub	r3,r3,r2
   10908:	20c6983a 	sll	r3,r4,r3
   1090c:	2084d83a 	srl	r2,r4,r2
   10910:	1808c03a 	cmpne	r4,r3,zero
   10914:	1108b03a 	or	r4,r2,r4
   10918:	2909c83a 	sub	r4,r5,r4
   1091c:	3021883a 	mov	r16,r6
   10920:	3823883a 	mov	r17,r7
   10924:	003f7e06 	br	10720 <__alt_data_end+0xffff0720>
   10928:	903f821e 	bne	r18,zero,10734 <__alt_data_end+0xffff0734>
   1092c:	0005883a 	mov	r2,zero
   10930:	0021883a 	mov	r16,zero
   10934:	003fba06 	br	10820 <__alt_data_end+0xffff0820>
   10938:	00c03fc4 	movi	r3,255
   1093c:	30c01926 	beq	r6,r3,109a4 <__addsf3+0x384>
   10940:	0085c83a 	sub	r2,zero,r2
   10944:	21010034 	orhi	r4,r4,1024
   10948:	003feb06 	br	108f8 <__alt_data_end+0xffff08f8>
   1094c:	043fffc4 	movi	r16,-1
   10950:	0009883a 	mov	r4,zero
   10954:	003f5706 	br	106b4 <__alt_data_end+0xffff06b4>
   10958:	80004a1e 	bne	r16,zero,10a84 <__addsf3+0x464>
   1095c:	20005926 	beq	r4,zero,10ac4 <__addsf3+0x4a4>
   10960:	283f4626 	beq	r5,zero,1067c <__alt_data_end+0xffff067c>
   10964:	2149883a 	add	r4,r4,r5
   10968:	2081002c 	andhi	r2,r4,1024
   1096c:	103f8226 	beq	r2,zero,10778 <__alt_data_end+0xffff0778>
   10970:	00bf0034 	movhi	r2,64512
   10974:	10bfffc4 	addi	r2,r2,-1
   10978:	3021883a 	mov	r16,r6
   1097c:	2088703a 	and	r4,r4,r2
   10980:	003f3e06 	br	1067c <__alt_data_end+0xffff067c>
   10984:	8000121e 	bne	r16,zero,109d0 <__addsf3+0x3b0>
   10988:	2000261e 	bne	r4,zero,10a24 <__addsf3+0x404>
   1098c:	283fa226 	beq	r5,zero,10818 <__alt_data_end+0xffff0818>
   10990:	2809883a 	mov	r4,r5
   10994:	3823883a 	mov	r17,r7
   10998:	003f3806 	br	1067c <__alt_data_end+0xffff067c>
   1099c:	01400044 	movi	r5,1
   109a0:	003f9006 	br	107e4 <__alt_data_end+0xffff07e4>
   109a4:	2809883a 	mov	r4,r5
   109a8:	3021883a 	mov	r16,r6
   109ac:	3823883a 	mov	r17,r7
   109b0:	003f3206 	br	1067c <__alt_data_end+0xffff067c>
   109b4:	80000c1e 	bne	r16,zero,109e8 <__addsf3+0x3c8>
   109b8:	20002f26 	beq	r4,zero,10a78 <__addsf3+0x458>
   109bc:	00c6303a 	nor	r3,zero,r3
   109c0:	18002b1e 	bne	r3,zero,10a70 <__addsf3+0x450>
   109c4:	2149883a 	add	r4,r4,r5
   109c8:	3021883a 	mov	r16,r6
   109cc:	003f8606 	br	107e8 <__alt_data_end+0xffff07e8>
   109d0:	20001b1e 	bne	r4,zero,10a40 <__addsf3+0x420>
   109d4:	28003926 	beq	r5,zero,10abc <__addsf3+0x49c>
   109d8:	2809883a 	mov	r4,r5
   109dc:	3823883a 	mov	r17,r7
   109e0:	04003fc4 	movi	r16,255
   109e4:	003f2506 	br	1067c <__alt_data_end+0xffff067c>
   109e8:	01c03fc4 	movi	r7,255
   109ec:	31c02226 	beq	r6,r7,10a78 <__addsf3+0x458>
   109f0:	00c7c83a 	sub	r3,zero,r3
   109f4:	21010034 	orhi	r4,r4,1024
   109f8:	01c006c4 	movi	r7,27
   109fc:	38c03616 	blt	r7,r3,10ad8 <__addsf3+0x4b8>
   10a00:	01c00804 	movi	r7,32
   10a04:	38cfc83a 	sub	r7,r7,r3
   10a08:	21ce983a 	sll	r7,r4,r7
   10a0c:	20c6d83a 	srl	r3,r4,r3
   10a10:	3808c03a 	cmpne	r4,r7,zero
   10a14:	1906b03a 	or	r3,r3,r4
   10a18:	1949883a 	add	r4,r3,r5
   10a1c:	3021883a 	mov	r16,r6
   10a20:	003f7106 	br	107e8 <__alt_data_end+0xffff07e8>
   10a24:	283f1526 	beq	r5,zero,1067c <__alt_data_end+0xffff067c>
   10a28:	2145c83a 	sub	r2,r4,r5
   10a2c:	10c1002c 	andhi	r3,r2,1024
   10a30:	183f4f26 	beq	r3,zero,10770 <__alt_data_end+0xffff0770>
   10a34:	2909c83a 	sub	r4,r5,r4
   10a38:	3823883a 	mov	r17,r7
   10a3c:	003f0f06 	br	1067c <__alt_data_end+0xffff067c>
   10a40:	28001a26 	beq	r5,zero,10aac <__addsf3+0x48c>
   10a44:	2008d0fa 	srli	r4,r4,3
   10a48:	2080102c 	andhi	r2,r4,64
   10a4c:	10000526 	beq	r2,zero,10a64 <__addsf3+0x444>
   10a50:	280ad0fa 	srli	r5,r5,3
   10a54:	2880102c 	andhi	r2,r5,64
   10a58:	1000021e 	bne	r2,zero,10a64 <__addsf3+0x444>
   10a5c:	2809883a 	mov	r4,r5
   10a60:	3823883a 	mov	r17,r7
   10a64:	200890fa 	slli	r4,r4,3
   10a68:	04003fc4 	movi	r16,255
   10a6c:	003f0306 	br	1067c <__alt_data_end+0xffff067c>
   10a70:	01c03fc4 	movi	r7,255
   10a74:	31ffe01e 	bne	r6,r7,109f8 <__alt_data_end+0xffff09f8>
   10a78:	2809883a 	mov	r4,r5
   10a7c:	3021883a 	mov	r16,r6
   10a80:	003efe06 	br	1067c <__alt_data_end+0xffff067c>
   10a84:	20001126 	beq	r4,zero,10acc <__addsf3+0x4ac>
   10a88:	28000826 	beq	r5,zero,10aac <__addsf3+0x48c>
   10a8c:	2008d0fa 	srli	r4,r4,3
   10a90:	2080102c 	andhi	r2,r4,64
   10a94:	103ff326 	beq	r2,zero,10a64 <__alt_data_end+0xffff0a64>
   10a98:	280ad0fa 	srli	r5,r5,3
   10a9c:	2880102c 	andhi	r2,r5,64
   10aa0:	103ff01e 	bne	r2,zero,10a64 <__alt_data_end+0xffff0a64>
   10aa4:	2809883a 	mov	r4,r5
   10aa8:	003fee06 	br	10a64 <__alt_data_end+0xffff0a64>
   10aac:	04003fc4 	movi	r16,255
   10ab0:	003ef206 	br	1067c <__alt_data_end+0xffff067c>
   10ab4:	01000044 	movi	r4,1
   10ab8:	003f9706 	br	10918 <__alt_data_end+0xffff0918>
   10abc:	0005883a 	mov	r2,zero
   10ac0:	003f3406 	br	10794 <__alt_data_end+0xffff0794>
   10ac4:	2809883a 	mov	r4,r5
   10ac8:	003eec06 	br	1067c <__alt_data_end+0xffff067c>
   10acc:	2809883a 	mov	r4,r5
   10ad0:	04003fc4 	movi	r16,255
   10ad4:	003ee906 	br	1067c <__alt_data_end+0xffff067c>
   10ad8:	00c00044 	movi	r3,1
   10adc:	003fce06 	br	10a18 <__alt_data_end+0xffff0a18>
   10ae0:	0005883a 	mov	r2,zero
   10ae4:	003f4e06 	br	10820 <__alt_data_end+0xffff0820>

00010ae8 <__mulsf3>:
   10ae8:	defff504 	addi	sp,sp,-44
   10aec:	dc000115 	stw	r16,4(sp)
   10af0:	2020d5fa 	srli	r16,r4,23
   10af4:	dd400615 	stw	r21,24(sp)
   10af8:	202ad7fa 	srli	r21,r4,31
   10afc:	dc800315 	stw	r18,12(sp)
   10b00:	04802034 	movhi	r18,128
   10b04:	df000915 	stw	fp,36(sp)
   10b08:	dd000515 	stw	r20,20(sp)
   10b0c:	94bfffc4 	addi	r18,r18,-1
   10b10:	dfc00a15 	stw	ra,40(sp)
   10b14:	ddc00815 	stw	r23,32(sp)
   10b18:	dd800715 	stw	r22,28(sp)
   10b1c:	dcc00415 	stw	r19,16(sp)
   10b20:	dc400215 	stw	r17,8(sp)
   10b24:	84003fcc 	andi	r16,r16,255
   10b28:	9124703a 	and	r18,r18,r4
   10b2c:	a829883a 	mov	r20,r21
   10b30:	af003fcc 	andi	fp,r21,255
   10b34:	80005426 	beq	r16,zero,10c88 <__mulsf3+0x1a0>
   10b38:	00803fc4 	movi	r2,255
   10b3c:	80802f26 	beq	r16,r2,10bfc <__mulsf3+0x114>
   10b40:	91002034 	orhi	r4,r18,128
   10b44:	202490fa 	slli	r18,r4,3
   10b48:	843fe044 	addi	r16,r16,-127
   10b4c:	0023883a 	mov	r17,zero
   10b50:	002f883a 	mov	r23,zero
   10b54:	2804d5fa 	srli	r2,r5,23
   10b58:	282cd7fa 	srli	r22,r5,31
   10b5c:	01002034 	movhi	r4,128
   10b60:	213fffc4 	addi	r4,r4,-1
   10b64:	10803fcc 	andi	r2,r2,255
   10b68:	2166703a 	and	r19,r4,r5
   10b6c:	b1803fcc 	andi	r6,r22,255
   10b70:	10004c26 	beq	r2,zero,10ca4 <__mulsf3+0x1bc>
   10b74:	00c03fc4 	movi	r3,255
   10b78:	10c04726 	beq	r2,r3,10c98 <__mulsf3+0x1b0>
   10b7c:	99002034 	orhi	r4,r19,128
   10b80:	202690fa 	slli	r19,r4,3
   10b84:	10bfe044 	addi	r2,r2,-127
   10b88:	0007883a 	mov	r3,zero
   10b8c:	80a1883a 	add	r16,r16,r2
   10b90:	010003c4 	movi	r4,15
   10b94:	1c44b03a 	or	r2,r3,r17
   10b98:	b56af03a 	xor	r21,r22,r21
   10b9c:	81c00044 	addi	r7,r16,1
   10ba0:	20806b36 	bltu	r4,r2,10d50 <__mulsf3+0x268>
   10ba4:	100490ba 	slli	r2,r2,2
   10ba8:	01000074 	movhi	r4,1
   10bac:	2102ef04 	addi	r4,r4,3004
   10bb0:	1105883a 	add	r2,r2,r4
   10bb4:	10800017 	ldw	r2,0(r2)
   10bb8:	1000683a 	jmp	r2
   10bbc:	00010d50 	cmplti	zero,zero,1077
   10bc0:	00010c10 	cmplti	zero,zero,1072
   10bc4:	00010c10 	cmplti	zero,zero,1072
   10bc8:	00010c0c 	andi	zero,zero,1072
   10bcc:	00010d34 	movhi	zero,1076
   10bd0:	00010d34 	movhi	zero,1076
   10bd4:	00010d20 	cmpeqi	zero,zero,1076
   10bd8:	00010c0c 	andi	zero,zero,1072
   10bdc:	00010d34 	movhi	zero,1076
   10be0:	00010d20 	cmpeqi	zero,zero,1076
   10be4:	00010d34 	movhi	zero,1076
   10be8:	00010c0c 	andi	zero,zero,1072
   10bec:	00010d40 	call	10d4 <__reset-0xef2c>
   10bf0:	00010d40 	call	10d4 <__reset-0xef2c>
   10bf4:	00010d40 	call	10d4 <__reset-0xef2c>
   10bf8:	00010e50 	cmplti	zero,zero,1081
   10bfc:	90003b1e 	bne	r18,zero,10cec <__mulsf3+0x204>
   10c00:	04400204 	movi	r17,8
   10c04:	05c00084 	movi	r23,2
   10c08:	003fd206 	br	10b54 <__alt_data_end+0xffff0b54>
   10c0c:	302b883a 	mov	r21,r6
   10c10:	00800084 	movi	r2,2
   10c14:	18802626 	beq	r3,r2,10cb0 <__mulsf3+0x1c8>
   10c18:	008000c4 	movi	r2,3
   10c1c:	1880b826 	beq	r3,r2,10f00 <__mulsf3+0x418>
   10c20:	00800044 	movi	r2,1
   10c24:	1880af1e 	bne	r3,r2,10ee4 <__mulsf3+0x3fc>
   10c28:	a829883a 	mov	r20,r21
   10c2c:	0007883a 	mov	r3,zero
   10c30:	0009883a 	mov	r4,zero
   10c34:	18803fcc 	andi	r2,r3,255
   10c38:	100695fa 	slli	r3,r2,23
   10c3c:	a0803fcc 	andi	r2,r20,255
   10c40:	100a97fa 	slli	r5,r2,31
   10c44:	00802034 	movhi	r2,128
   10c48:	10bfffc4 	addi	r2,r2,-1
   10c4c:	2084703a 	and	r2,r4,r2
   10c50:	10c4b03a 	or	r2,r2,r3
   10c54:	1144b03a 	or	r2,r2,r5
   10c58:	dfc00a17 	ldw	ra,40(sp)
   10c5c:	df000917 	ldw	fp,36(sp)
   10c60:	ddc00817 	ldw	r23,32(sp)
   10c64:	dd800717 	ldw	r22,28(sp)
   10c68:	dd400617 	ldw	r21,24(sp)
   10c6c:	dd000517 	ldw	r20,20(sp)
   10c70:	dcc00417 	ldw	r19,16(sp)
   10c74:	dc800317 	ldw	r18,12(sp)
   10c78:	dc400217 	ldw	r17,8(sp)
   10c7c:	dc000117 	ldw	r16,4(sp)
   10c80:	dec00b04 	addi	sp,sp,44
   10c84:	f800283a 	ret
   10c88:	90000d1e 	bne	r18,zero,10cc0 <__mulsf3+0x1d8>
   10c8c:	04400104 	movi	r17,4
   10c90:	05c00044 	movi	r23,1
   10c94:	003faf06 	br	10b54 <__alt_data_end+0xffff0b54>
   10c98:	9806c03a 	cmpne	r3,r19,zero
   10c9c:	18c00084 	addi	r3,r3,2
   10ca0:	003fba06 	br	10b8c <__alt_data_end+0xffff0b8c>
   10ca4:	9800141e 	bne	r19,zero,10cf8 <__mulsf3+0x210>
   10ca8:	00c00044 	movi	r3,1
   10cac:	003fb706 	br	10b8c <__alt_data_end+0xffff0b8c>
   10cb0:	a829883a 	mov	r20,r21
   10cb4:	00ffffc4 	movi	r3,-1
   10cb8:	0009883a 	mov	r4,zero
   10cbc:	003fdd06 	br	10c34 <__alt_data_end+0xffff0c34>
   10cc0:	9009883a 	mov	r4,r18
   10cc4:	d9400015 	stw	r5,0(sp)
   10cc8:	00110ac0 	call	110ac <__clzsi2>
   10ccc:	10fffec4 	addi	r3,r2,-5
   10cd0:	10801d84 	addi	r2,r2,118
   10cd4:	90e4983a 	sll	r18,r18,r3
   10cd8:	00a1c83a 	sub	r16,zero,r2
   10cdc:	0023883a 	mov	r17,zero
   10ce0:	002f883a 	mov	r23,zero
   10ce4:	d9400017 	ldw	r5,0(sp)
   10ce8:	003f9a06 	br	10b54 <__alt_data_end+0xffff0b54>
   10cec:	04400304 	movi	r17,12
   10cf0:	05c000c4 	movi	r23,3
   10cf4:	003f9706 	br	10b54 <__alt_data_end+0xffff0b54>
   10cf8:	9809883a 	mov	r4,r19
   10cfc:	d9800015 	stw	r6,0(sp)
   10d00:	00110ac0 	call	110ac <__clzsi2>
   10d04:	10fffec4 	addi	r3,r2,-5
   10d08:	10801d84 	addi	r2,r2,118
   10d0c:	98e6983a 	sll	r19,r19,r3
   10d10:	0085c83a 	sub	r2,zero,r2
   10d14:	0007883a 	mov	r3,zero
   10d18:	d9800017 	ldw	r6,0(sp)
   10d1c:	003f9b06 	br	10b8c <__alt_data_end+0xffff0b8c>
   10d20:	01002034 	movhi	r4,128
   10d24:	0029883a 	mov	r20,zero
   10d28:	213fffc4 	addi	r4,r4,-1
   10d2c:	00ffffc4 	movi	r3,-1
   10d30:	003fc006 	br	10c34 <__alt_data_end+0xffff0c34>
   10d34:	9027883a 	mov	r19,r18
   10d38:	b807883a 	mov	r3,r23
   10d3c:	003fb406 	br	10c10 <__alt_data_end+0xffff0c10>
   10d40:	9027883a 	mov	r19,r18
   10d44:	e02b883a 	mov	r21,fp
   10d48:	b807883a 	mov	r3,r23
   10d4c:	003fb006 	br	10c10 <__alt_data_end+0xffff0c10>
   10d50:	9028d43a 	srli	r20,r18,16
   10d54:	982cd43a 	srli	r22,r19,16
   10d58:	94bfffcc 	andi	r18,r18,65535
   10d5c:	9cffffcc 	andi	r19,r19,65535
   10d60:	980b883a 	mov	r5,r19
   10d64:	9009883a 	mov	r4,r18
   10d68:	d9c00015 	stw	r7,0(sp)
   10d6c:	00111100 	call	11110 <__mulsi3>
   10d70:	a00b883a 	mov	r5,r20
   10d74:	9809883a 	mov	r4,r19
   10d78:	1023883a 	mov	r17,r2
   10d7c:	00111100 	call	11110 <__mulsi3>
   10d80:	a009883a 	mov	r4,r20
   10d84:	b00b883a 	mov	r5,r22
   10d88:	1027883a 	mov	r19,r2
   10d8c:	00111100 	call	11110 <__mulsi3>
   10d90:	b00b883a 	mov	r5,r22
   10d94:	9009883a 	mov	r4,r18
   10d98:	1029883a 	mov	r20,r2
   10d9c:	00111100 	call	11110 <__mulsi3>
   10da0:	8806d43a 	srli	r3,r17,16
   10da4:	14c5883a 	add	r2,r2,r19
   10da8:	d9c00017 	ldw	r7,0(sp)
   10dac:	1885883a 	add	r2,r3,r2
   10db0:	14c0022e 	bgeu	r2,r19,10dbc <__mulsf3+0x2d4>
   10db4:	00c00074 	movhi	r3,1
   10db8:	a0e9883a 	add	r20,r20,r3
   10dbc:	1026943a 	slli	r19,r2,16
   10dc0:	8c7fffcc 	andi	r17,r17,65535
   10dc4:	1004d43a 	srli	r2,r2,16
   10dc8:	9c63883a 	add	r17,r19,r17
   10dcc:	882691ba 	slli	r19,r17,6
   10dd0:	1505883a 	add	r2,r2,r20
   10dd4:	8822d6ba 	srli	r17,r17,26
   10dd8:	100891ba 	slli	r4,r2,6
   10ddc:	9826c03a 	cmpne	r19,r19,zero
   10de0:	9c62b03a 	or	r17,r19,r17
   10de4:	8926b03a 	or	r19,r17,r4
   10de8:	9882002c 	andhi	r2,r19,2048
   10dec:	10000426 	beq	r2,zero,10e00 <__mulsf3+0x318>
   10df0:	9804d07a 	srli	r2,r19,1
   10df4:	9900004c 	andi	r4,r19,1
   10df8:	3821883a 	mov	r16,r7
   10dfc:	1126b03a 	or	r19,r2,r4
   10e00:	80c01fc4 	addi	r3,r16,127
   10e04:	00c0210e 	bge	zero,r3,10e8c <__mulsf3+0x3a4>
   10e08:	988001cc 	andi	r2,r19,7
   10e0c:	10000426 	beq	r2,zero,10e20 <__mulsf3+0x338>
   10e10:	988003cc 	andi	r2,r19,15
   10e14:	01000104 	movi	r4,4
   10e18:	11000126 	beq	r2,r4,10e20 <__mulsf3+0x338>
   10e1c:	9927883a 	add	r19,r19,r4
   10e20:	9882002c 	andhi	r2,r19,2048
   10e24:	10000426 	beq	r2,zero,10e38 <__mulsf3+0x350>
   10e28:	00be0034 	movhi	r2,63488
   10e2c:	10bfffc4 	addi	r2,r2,-1
   10e30:	80c02004 	addi	r3,r16,128
   10e34:	98a6703a 	and	r19,r19,r2
   10e38:	00803f84 	movi	r2,254
   10e3c:	10ff9c16 	blt	r2,r3,10cb0 <__alt_data_end+0xffff0cb0>
   10e40:	980891ba 	slli	r4,r19,6
   10e44:	a829883a 	mov	r20,r21
   10e48:	2008d27a 	srli	r4,r4,9
   10e4c:	003f7906 	br	10c34 <__alt_data_end+0xffff0c34>
   10e50:	9080102c 	andhi	r2,r18,64
   10e54:	10000826 	beq	r2,zero,10e78 <__mulsf3+0x390>
   10e58:	9880102c 	andhi	r2,r19,64
   10e5c:	1000061e 	bne	r2,zero,10e78 <__mulsf3+0x390>
   10e60:	00802034 	movhi	r2,128
   10e64:	99001034 	orhi	r4,r19,64
   10e68:	10bfffc4 	addi	r2,r2,-1
   10e6c:	b029883a 	mov	r20,r22
   10e70:	2088703a 	and	r4,r4,r2
   10e74:	003fad06 	br	10d2c <__alt_data_end+0xffff0d2c>
   10e78:	00802034 	movhi	r2,128
   10e7c:	91001034 	orhi	r4,r18,64
   10e80:	10bfffc4 	addi	r2,r2,-1
   10e84:	2088703a 	and	r4,r4,r2
   10e88:	003fa806 	br	10d2c <__alt_data_end+0xffff0d2c>
   10e8c:	00800044 	movi	r2,1
   10e90:	10c7c83a 	sub	r3,r2,r3
   10e94:	008006c4 	movi	r2,27
   10e98:	10ff6316 	blt	r2,r3,10c28 <__alt_data_end+0xffff0c28>
   10e9c:	00800804 	movi	r2,32
   10ea0:	10c5c83a 	sub	r2,r2,r3
   10ea4:	9884983a 	sll	r2,r19,r2
   10ea8:	98c6d83a 	srl	r3,r19,r3
   10eac:	1004c03a 	cmpne	r2,r2,zero
   10eb0:	1884b03a 	or	r2,r3,r2
   10eb4:	10c001cc 	andi	r3,r2,7
   10eb8:	18000426 	beq	r3,zero,10ecc <__mulsf3+0x3e4>
   10ebc:	10c003cc 	andi	r3,r2,15
   10ec0:	01000104 	movi	r4,4
   10ec4:	19000126 	beq	r3,r4,10ecc <__mulsf3+0x3e4>
   10ec8:	1105883a 	add	r2,r2,r4
   10ecc:	10c1002c 	andhi	r3,r2,1024
   10ed0:	18000626 	beq	r3,zero,10eec <__mulsf3+0x404>
   10ed4:	a829883a 	mov	r20,r21
   10ed8:	00c00044 	movi	r3,1
   10edc:	0009883a 	mov	r4,zero
   10ee0:	003f5406 	br	10c34 <__alt_data_end+0xffff0c34>
   10ee4:	3821883a 	mov	r16,r7
   10ee8:	003fc506 	br	10e00 <__alt_data_end+0xffff0e00>
   10eec:	100491ba 	slli	r2,r2,6
   10ef0:	a829883a 	mov	r20,r21
   10ef4:	0007883a 	mov	r3,zero
   10ef8:	1008d27a 	srli	r4,r2,9
   10efc:	003f4d06 	br	10c34 <__alt_data_end+0xffff0c34>
   10f00:	00802034 	movhi	r2,128
   10f04:	99001034 	orhi	r4,r19,64
   10f08:	10bfffc4 	addi	r2,r2,-1
   10f0c:	a829883a 	mov	r20,r21
   10f10:	2088703a 	and	r4,r4,r2
   10f14:	003f8506 	br	10d2c <__alt_data_end+0xffff0d2c>

00010f18 <__fixsfsi>:
   10f18:	200ad5fa 	srli	r5,r4,23
   10f1c:	00c02034 	movhi	r3,128
   10f20:	18ffffc4 	addi	r3,r3,-1
   10f24:	29403fcc 	andi	r5,r5,255
   10f28:	00801f84 	movi	r2,126
   10f2c:	1906703a 	and	r3,r3,r4
   10f30:	2008d7fa 	srli	r4,r4,31
   10f34:	11400e0e 	bge	r2,r5,10f70 <__fixsfsi+0x58>
   10f38:	00802744 	movi	r2,157
   10f3c:	11400816 	blt	r2,r5,10f60 <__fixsfsi+0x48>
   10f40:	00802544 	movi	r2,149
   10f44:	18c02034 	orhi	r3,r3,128
   10f48:	11400b0e 	bge	r2,r5,10f78 <__fixsfsi+0x60>
   10f4c:	28bfda84 	addi	r2,r5,-150
   10f50:	1884983a 	sll	r2,r3,r2
   10f54:	20000726 	beq	r4,zero,10f74 <__fixsfsi+0x5c>
   10f58:	0085c83a 	sub	r2,zero,r2
   10f5c:	f800283a 	ret
   10f60:	00a00034 	movhi	r2,32768
   10f64:	10bfffc4 	addi	r2,r2,-1
   10f68:	2085883a 	add	r2,r4,r2
   10f6c:	f800283a 	ret
   10f70:	0005883a 	mov	r2,zero
   10f74:	f800283a 	ret
   10f78:	00802584 	movi	r2,150
   10f7c:	1145c83a 	sub	r2,r2,r5
   10f80:	1884d83a 	srl	r2,r3,r2
   10f84:	003ff306 	br	10f54 <__alt_data_end+0xffff0f54>

00010f88 <__floatsisf>:
   10f88:	defffd04 	addi	sp,sp,-12
   10f8c:	dfc00215 	stw	ra,8(sp)
   10f90:	dc400115 	stw	r17,4(sp)
   10f94:	dc000015 	stw	r16,0(sp)
   10f98:	20003526 	beq	r4,zero,11070 <__floatsisf+0xe8>
   10f9c:	2021883a 	mov	r16,r4
   10fa0:	2022d7fa 	srli	r17,r4,31
   10fa4:	20003616 	blt	r4,zero,11080 <__floatsisf+0xf8>
   10fa8:	8009883a 	mov	r4,r16
   10fac:	00110ac0 	call	110ac <__clzsi2>
   10fb0:	00c02784 	movi	r3,158
   10fb4:	1887c83a 	sub	r3,r3,r2
   10fb8:	01002584 	movi	r4,150
   10fbc:	20c01416 	blt	r4,r3,11010 <__floatsisf+0x88>
   10fc0:	20c9c83a 	sub	r4,r4,r3
   10fc4:	8120983a 	sll	r16,r16,r4
   10fc8:	00802034 	movhi	r2,128
   10fcc:	10bfffc4 	addi	r2,r2,-1
   10fd0:	8809883a 	mov	r4,r17
   10fd4:	80a0703a 	and	r16,r16,r2
   10fd8:	18803fcc 	andi	r2,r3,255
   10fdc:	100695fa 	slli	r3,r2,23
   10fe0:	20803fcc 	andi	r2,r4,255
   10fe4:	100897fa 	slli	r4,r2,31
   10fe8:	00802034 	movhi	r2,128
   10fec:	10bfffc4 	addi	r2,r2,-1
   10ff0:	8084703a 	and	r2,r16,r2
   10ff4:	10c4b03a 	or	r2,r2,r3
   10ff8:	1104b03a 	or	r2,r2,r4
   10ffc:	dfc00217 	ldw	ra,8(sp)
   11000:	dc400117 	ldw	r17,4(sp)
   11004:	dc000017 	ldw	r16,0(sp)
   11008:	dec00304 	addi	sp,sp,12
   1100c:	f800283a 	ret
   11010:	01002644 	movi	r4,153
   11014:	20c01c16 	blt	r4,r3,11088 <__floatsisf+0x100>
   11018:	20c9c83a 	sub	r4,r4,r3
   1101c:	8120983a 	sll	r16,r16,r4
   11020:	013f0034 	movhi	r4,64512
   11024:	213fffc4 	addi	r4,r4,-1
   11028:	814001cc 	andi	r5,r16,7
   1102c:	8108703a 	and	r4,r16,r4
   11030:	28000426 	beq	r5,zero,11044 <__floatsisf+0xbc>
   11034:	840003cc 	andi	r16,r16,15
   11038:	01400104 	movi	r5,4
   1103c:	81400126 	beq	r16,r5,11044 <__floatsisf+0xbc>
   11040:	2149883a 	add	r4,r4,r5
   11044:	2141002c 	andhi	r5,r4,1024
   11048:	28000526 	beq	r5,zero,11060 <__floatsisf+0xd8>
   1104c:	00c027c4 	movi	r3,159
   11050:	1887c83a 	sub	r3,r3,r2
   11054:	00bf0034 	movhi	r2,64512
   11058:	10bfffc4 	addi	r2,r2,-1
   1105c:	2088703a 	and	r4,r4,r2
   11060:	202091ba 	slli	r16,r4,6
   11064:	8809883a 	mov	r4,r17
   11068:	8020d27a 	srli	r16,r16,9
   1106c:	003fda06 	br	10fd8 <__alt_data_end+0xffff0fd8>
   11070:	0009883a 	mov	r4,zero
   11074:	0007883a 	mov	r3,zero
   11078:	0021883a 	mov	r16,zero
   1107c:	003fd606 	br	10fd8 <__alt_data_end+0xffff0fd8>
   11080:	0121c83a 	sub	r16,zero,r4
   11084:	003fc806 	br	10fa8 <__alt_data_end+0xffff0fa8>
   11088:	01002e44 	movi	r4,185
   1108c:	20c9c83a 	sub	r4,r4,r3
   11090:	01400144 	movi	r5,5
   11094:	8108983a 	sll	r4,r16,r4
   11098:	288bc83a 	sub	r5,r5,r2
   1109c:	8160d83a 	srl	r16,r16,r5
   110a0:	2008c03a 	cmpne	r4,r4,zero
   110a4:	8120b03a 	or	r16,r16,r4
   110a8:	003fdd06 	br	11020 <__alt_data_end+0xffff1020>

000110ac <__clzsi2>:
   110ac:	00bfffd4 	movui	r2,65535
   110b0:	11000536 	bltu	r2,r4,110c8 <__clzsi2+0x1c>
   110b4:	00803fc4 	movi	r2,255
   110b8:	11000f36 	bltu	r2,r4,110f8 <__clzsi2+0x4c>
   110bc:	00800804 	movi	r2,32
   110c0:	0007883a 	mov	r3,zero
   110c4:	00000506 	br	110dc <__clzsi2+0x30>
   110c8:	00804034 	movhi	r2,256
   110cc:	10bfffc4 	addi	r2,r2,-1
   110d0:	11000c2e 	bgeu	r2,r4,11104 <__clzsi2+0x58>
   110d4:	00800204 	movi	r2,8
   110d8:	00c00604 	movi	r3,24
   110dc:	20c8d83a 	srl	r4,r4,r3
   110e0:	00c00074 	movhi	r3,1
   110e4:	18c88a04 	addi	r3,r3,8744
   110e8:	1909883a 	add	r4,r3,r4
   110ec:	20c00003 	ldbu	r3,0(r4)
   110f0:	10c5c83a 	sub	r2,r2,r3
   110f4:	f800283a 	ret
   110f8:	00800604 	movi	r2,24
   110fc:	00c00204 	movi	r3,8
   11100:	003ff606 	br	110dc <__alt_data_end+0xffff10dc>
   11104:	00800404 	movi	r2,16
   11108:	1007883a 	mov	r3,r2
   1110c:	003ff306 	br	110dc <__alt_data_end+0xffff10dc>

00011110 <__mulsi3>:
   11110:	0005883a 	mov	r2,zero
   11114:	20000726 	beq	r4,zero,11134 <__mulsi3+0x24>
   11118:	20c0004c 	andi	r3,r4,1
   1111c:	2008d07a 	srli	r4,r4,1
   11120:	18000126 	beq	r3,zero,11128 <__mulsi3+0x18>
   11124:	1145883a 	add	r2,r2,r5
   11128:	294b883a 	add	r5,r5,r5
   1112c:	203ffa1e 	bne	r4,zero,11118 <__alt_data_end+0xffff1118>
   11130:	f800283a 	ret
   11134:	f800283a 	ret

00011138 <_printf_r>:
   11138:	defffd04 	addi	sp,sp,-12
   1113c:	dfc00015 	stw	ra,0(sp)
   11140:	d9800115 	stw	r6,4(sp)
   11144:	d9c00215 	stw	r7,8(sp)
   11148:	20c00217 	ldw	r3,8(r4)
   1114c:	01800074 	movhi	r6,1
   11150:	3185dd04 	addi	r6,r6,6004
   11154:	19800115 	stw	r6,4(r3)
   11158:	280d883a 	mov	r6,r5
   1115c:	21400217 	ldw	r5,8(r4)
   11160:	d9c00104 	addi	r7,sp,4
   11164:	001122c0 	call	1122c <___vfprintf_internal_r>
   11168:	dfc00017 	ldw	ra,0(sp)
   1116c:	dec00304 	addi	sp,sp,12
   11170:	f800283a 	ret

00011174 <printf>:
   11174:	defffc04 	addi	sp,sp,-16
   11178:	dfc00015 	stw	ra,0(sp)
   1117c:	d9400115 	stw	r5,4(sp)
   11180:	d9800215 	stw	r6,8(sp)
   11184:	d9c00315 	stw	r7,12(sp)
   11188:	00800074 	movhi	r2,1
   1118c:	10892904 	addi	r2,r2,9380
   11190:	10800017 	ldw	r2,0(r2)
   11194:	01400074 	movhi	r5,1
   11198:	2945dd04 	addi	r5,r5,6004
   1119c:	10c00217 	ldw	r3,8(r2)
   111a0:	d9800104 	addi	r6,sp,4
   111a4:	19400115 	stw	r5,4(r3)
   111a8:	200b883a 	mov	r5,r4
   111ac:	11000217 	ldw	r4,8(r2)
   111b0:	00117580 	call	11758 <__vfprintf_internal>
   111b4:	dfc00017 	ldw	ra,0(sp)
   111b8:	dec00404 	addi	sp,sp,16
   111bc:	f800283a 	ret

000111c0 <print_repeat>:
   111c0:	defffb04 	addi	sp,sp,-20
   111c4:	dc800315 	stw	r18,12(sp)
   111c8:	dc400215 	stw	r17,8(sp)
   111cc:	dc000115 	stw	r16,4(sp)
   111d0:	dfc00415 	stw	ra,16(sp)
   111d4:	2025883a 	mov	r18,r4
   111d8:	2823883a 	mov	r17,r5
   111dc:	d9800005 	stb	r6,0(sp)
   111e0:	3821883a 	mov	r16,r7
   111e4:	04000a0e 	bge	zero,r16,11210 <print_repeat+0x50>
   111e8:	88800117 	ldw	r2,4(r17)
   111ec:	01c00044 	movi	r7,1
   111f0:	d80d883a 	mov	r6,sp
   111f4:	880b883a 	mov	r5,r17
   111f8:	9009883a 	mov	r4,r18
   111fc:	103ee83a 	callr	r2
   11200:	843fffc4 	addi	r16,r16,-1
   11204:	103ff726 	beq	r2,zero,111e4 <__alt_data_end+0xffff11e4>
   11208:	00bfffc4 	movi	r2,-1
   1120c:	00000106 	br	11214 <print_repeat+0x54>
   11210:	0005883a 	mov	r2,zero
   11214:	dfc00417 	ldw	ra,16(sp)
   11218:	dc800317 	ldw	r18,12(sp)
   1121c:	dc400217 	ldw	r17,8(sp)
   11220:	dc000117 	ldw	r16,4(sp)
   11224:	dec00504 	addi	sp,sp,20
   11228:	f800283a 	ret

0001122c <___vfprintf_internal_r>:
   1122c:	deffe504 	addi	sp,sp,-108
   11230:	d8c00804 	addi	r3,sp,32
   11234:	ddc01815 	stw	r23,96(sp)
   11238:	dd801715 	stw	r22,92(sp)
   1123c:	dd401615 	stw	r21,88(sp)
   11240:	dd001515 	stw	r20,84(sp)
   11244:	dcc01415 	stw	r19,80(sp)
   11248:	dc801315 	stw	r18,76(sp)
   1124c:	dc401215 	stw	r17,72(sp)
   11250:	dc001115 	stw	r16,68(sp)
   11254:	dfc01a15 	stw	ra,104(sp)
   11258:	df001915 	stw	fp,100(sp)
   1125c:	2029883a 	mov	r20,r4
   11260:	2823883a 	mov	r17,r5
   11264:	382d883a 	mov	r22,r7
   11268:	d9800f15 	stw	r6,60(sp)
   1126c:	0021883a 	mov	r16,zero
   11270:	d8000e15 	stw	zero,56(sp)
   11274:	d8000a15 	stw	zero,40(sp)
   11278:	002b883a 	mov	r21,zero
   1127c:	0027883a 	mov	r19,zero
   11280:	0025883a 	mov	r18,zero
   11284:	d8000c15 	stw	zero,48(sp)
   11288:	d8000b15 	stw	zero,44(sp)
   1128c:	002f883a 	mov	r23,zero
   11290:	d8c00915 	stw	r3,36(sp)
   11294:	d8c00f17 	ldw	r3,60(sp)
   11298:	19000003 	ldbu	r4,0(r3)
   1129c:	20803fcc 	andi	r2,r4,255
   112a0:	1080201c 	xori	r2,r2,128
   112a4:	10bfe004 	addi	r2,r2,-128
   112a8:	10011e26 	beq	r2,zero,11724 <___vfprintf_internal_r+0x4f8>
   112ac:	00c00044 	movi	r3,1
   112b0:	b8c01426 	beq	r23,r3,11304 <___vfprintf_internal_r+0xd8>
   112b4:	1dc00216 	blt	r3,r23,112c0 <___vfprintf_internal_r+0x94>
   112b8:	b8000626 	beq	r23,zero,112d4 <___vfprintf_internal_r+0xa8>
   112bc:	00011506 	br	11714 <___vfprintf_internal_r+0x4e8>
   112c0:	01400084 	movi	r5,2
   112c4:	b9401d26 	beq	r23,r5,1133c <___vfprintf_internal_r+0x110>
   112c8:	014000c4 	movi	r5,3
   112cc:	b9402b26 	beq	r23,r5,1137c <___vfprintf_internal_r+0x150>
   112d0:	00011006 	br	11714 <___vfprintf_internal_r+0x4e8>
   112d4:	01400944 	movi	r5,37
   112d8:	1140fc26 	beq	r2,r5,116cc <___vfprintf_internal_r+0x4a0>
   112dc:	88800117 	ldw	r2,4(r17)
   112e0:	d9000005 	stb	r4,0(sp)
   112e4:	01c00044 	movi	r7,1
   112e8:	d80d883a 	mov	r6,sp
   112ec:	880b883a 	mov	r5,r17
   112f0:	a009883a 	mov	r4,r20
   112f4:	103ee83a 	callr	r2
   112f8:	1000d81e 	bne	r2,zero,1165c <___vfprintf_internal_r+0x430>
   112fc:	84000044 	addi	r16,r16,1
   11300:	00010406 	br	11714 <___vfprintf_internal_r+0x4e8>
   11304:	01400c04 	movi	r5,48
   11308:	1140fa26 	beq	r2,r5,116f4 <___vfprintf_internal_r+0x4c8>
   1130c:	01400944 	movi	r5,37
   11310:	11400a1e 	bne	r2,r5,1133c <___vfprintf_internal_r+0x110>
   11314:	d8800005 	stb	r2,0(sp)
   11318:	88800117 	ldw	r2,4(r17)
   1131c:	b80f883a 	mov	r7,r23
   11320:	d80d883a 	mov	r6,sp
   11324:	880b883a 	mov	r5,r17
   11328:	a009883a 	mov	r4,r20
   1132c:	103ee83a 	callr	r2
   11330:	1000ca1e 	bne	r2,zero,1165c <___vfprintf_internal_r+0x430>
   11334:	84000044 	addi	r16,r16,1
   11338:	0000f506 	br	11710 <___vfprintf_internal_r+0x4e4>
   1133c:	25fff404 	addi	r23,r4,-48
   11340:	bdc03fcc 	andi	r23,r23,255
   11344:	00c00244 	movi	r3,9
   11348:	1dc00936 	bltu	r3,r23,11370 <___vfprintf_internal_r+0x144>
   1134c:	00bfffc4 	movi	r2,-1
   11350:	90800426 	beq	r18,r2,11364 <___vfprintf_internal_r+0x138>
   11354:	01400284 	movi	r5,10
   11358:	9009883a 	mov	r4,r18
   1135c:	00111100 	call	11110 <__mulsi3>
   11360:	00000106 	br	11368 <___vfprintf_internal_r+0x13c>
   11364:	0005883a 	mov	r2,zero
   11368:	b8a5883a 	add	r18,r23,r2
   1136c:	0000e206 	br	116f8 <___vfprintf_internal_r+0x4cc>
   11370:	01400b84 	movi	r5,46
   11374:	1140e426 	beq	r2,r5,11708 <___vfprintf_internal_r+0x4dc>
   11378:	05c00084 	movi	r23,2
   1137c:	213ff404 	addi	r4,r4,-48
   11380:	27003fcc 	andi	fp,r4,255
   11384:	00c00244 	movi	r3,9
   11388:	1f000936 	bltu	r3,fp,113b0 <___vfprintf_internal_r+0x184>
   1138c:	00bfffc4 	movi	r2,-1
   11390:	98800426 	beq	r19,r2,113a4 <___vfprintf_internal_r+0x178>
   11394:	01400284 	movi	r5,10
   11398:	9809883a 	mov	r4,r19
   1139c:	00111100 	call	11110 <__mulsi3>
   113a0:	00000106 	br	113a8 <___vfprintf_internal_r+0x17c>
   113a4:	0005883a 	mov	r2,zero
   113a8:	e0a7883a 	add	r19,fp,r2
   113ac:	0000d906 	br	11714 <___vfprintf_internal_r+0x4e8>
   113b0:	00c01b04 	movi	r3,108
   113b4:	10c0d226 	beq	r2,r3,11700 <___vfprintf_internal_r+0x4d4>
   113b8:	013fffc4 	movi	r4,-1
   113bc:	99000226 	beq	r19,r4,113c8 <___vfprintf_internal_r+0x19c>
   113c0:	d8000b15 	stw	zero,44(sp)
   113c4:	00000106 	br	113cc <___vfprintf_internal_r+0x1a0>
   113c8:	04c00044 	movi	r19,1
   113cc:	01001a44 	movi	r4,105
   113d0:	11001626 	beq	r2,r4,1142c <___vfprintf_internal_r+0x200>
   113d4:	20800916 	blt	r4,r2,113fc <___vfprintf_internal_r+0x1d0>
   113d8:	010018c4 	movi	r4,99
   113dc:	11008826 	beq	r2,r4,11600 <___vfprintf_internal_r+0x3d4>
   113e0:	01001904 	movi	r4,100
   113e4:	11001126 	beq	r2,r4,1142c <___vfprintf_internal_r+0x200>
   113e8:	01001604 	movi	r4,88
   113ec:	1100c81e 	bne	r2,r4,11710 <___vfprintf_internal_r+0x4e4>
   113f0:	00c00044 	movi	r3,1
   113f4:	d8c00e15 	stw	r3,56(sp)
   113f8:	00001506 	br	11450 <___vfprintf_internal_r+0x224>
   113fc:	01001cc4 	movi	r4,115
   11400:	11009826 	beq	r2,r4,11664 <___vfprintf_internal_r+0x438>
   11404:	20800416 	blt	r4,r2,11418 <___vfprintf_internal_r+0x1ec>
   11408:	01001bc4 	movi	r4,111
   1140c:	1100c01e 	bne	r2,r4,11710 <___vfprintf_internal_r+0x4e4>
   11410:	05400204 	movi	r21,8
   11414:	00000f06 	br	11454 <___vfprintf_internal_r+0x228>
   11418:	01001d44 	movi	r4,117
   1141c:	11000d26 	beq	r2,r4,11454 <___vfprintf_internal_r+0x228>
   11420:	01001e04 	movi	r4,120
   11424:	11000a26 	beq	r2,r4,11450 <___vfprintf_internal_r+0x224>
   11428:	0000b906 	br	11710 <___vfprintf_internal_r+0x4e4>
   1142c:	d8c00a17 	ldw	r3,40(sp)
   11430:	b7000104 	addi	fp,r22,4
   11434:	18000726 	beq	r3,zero,11454 <___vfprintf_internal_r+0x228>
   11438:	df000d15 	stw	fp,52(sp)
   1143c:	b5c00017 	ldw	r23,0(r22)
   11440:	b800080e 	bge	r23,zero,11464 <___vfprintf_internal_r+0x238>
   11444:	05efc83a 	sub	r23,zero,r23
   11448:	02400044 	movi	r9,1
   1144c:	00000606 	br	11468 <___vfprintf_internal_r+0x23c>
   11450:	05400404 	movi	r21,16
   11454:	b0c00104 	addi	r3,r22,4
   11458:	d8c00d15 	stw	r3,52(sp)
   1145c:	b5c00017 	ldw	r23,0(r22)
   11460:	d8000a15 	stw	zero,40(sp)
   11464:	0013883a 	mov	r9,zero
   11468:	d839883a 	mov	fp,sp
   1146c:	b8001726 	beq	r23,zero,114cc <___vfprintf_internal_r+0x2a0>
   11470:	a80b883a 	mov	r5,r21
   11474:	b809883a 	mov	r4,r23
   11478:	da401015 	stw	r9,64(sp)
   1147c:	00119980 	call	11998 <__udivsi3>
   11480:	a80b883a 	mov	r5,r21
   11484:	1009883a 	mov	r4,r2
   11488:	102d883a 	mov	r22,r2
   1148c:	00111100 	call	11110 <__mulsi3>
   11490:	b885c83a 	sub	r2,r23,r2
   11494:	00c00244 	movi	r3,9
   11498:	da401017 	ldw	r9,64(sp)
   1149c:	18800216 	blt	r3,r2,114a8 <___vfprintf_internal_r+0x27c>
   114a0:	10800c04 	addi	r2,r2,48
   114a4:	00000506 	br	114bc <___vfprintf_internal_r+0x290>
   114a8:	d8c00e17 	ldw	r3,56(sp)
   114ac:	18000226 	beq	r3,zero,114b8 <___vfprintf_internal_r+0x28c>
   114b0:	10800dc4 	addi	r2,r2,55
   114b4:	00000106 	br	114bc <___vfprintf_internal_r+0x290>
   114b8:	108015c4 	addi	r2,r2,87
   114bc:	e0800005 	stb	r2,0(fp)
   114c0:	b02f883a 	mov	r23,r22
   114c4:	e7000044 	addi	fp,fp,1
   114c8:	003fe806 	br	1146c <__alt_data_end+0xffff146c>
   114cc:	e6efc83a 	sub	r23,fp,sp
   114d0:	9dc5c83a 	sub	r2,r19,r23
   114d4:	0080090e 	bge	zero,r2,114fc <___vfprintf_internal_r+0x2d0>
   114d8:	e085883a 	add	r2,fp,r2
   114dc:	01400c04 	movi	r5,48
   114e0:	d8c00917 	ldw	r3,36(sp)
   114e4:	e009883a 	mov	r4,fp
   114e8:	e0c0032e 	bgeu	fp,r3,114f8 <___vfprintf_internal_r+0x2cc>
   114ec:	e7000044 	addi	fp,fp,1
   114f0:	21400005 	stb	r5,0(r4)
   114f4:	e0bffa1e 	bne	fp,r2,114e0 <__alt_data_end+0xffff14e0>
   114f8:	e6efc83a 	sub	r23,fp,sp
   114fc:	d8c00b17 	ldw	r3,44(sp)
   11500:	4dd1883a 	add	r8,r9,r23
   11504:	922dc83a 	sub	r22,r18,r8
   11508:	18001626 	beq	r3,zero,11564 <___vfprintf_internal_r+0x338>
   1150c:	48000a26 	beq	r9,zero,11538 <___vfprintf_internal_r+0x30c>
   11510:	00800b44 	movi	r2,45
   11514:	d8800805 	stb	r2,32(sp)
   11518:	88800117 	ldw	r2,4(r17)
   1151c:	01c00044 	movi	r7,1
   11520:	d9800804 	addi	r6,sp,32
   11524:	880b883a 	mov	r5,r17
   11528:	a009883a 	mov	r4,r20
   1152c:	103ee83a 	callr	r2
   11530:	10004a1e 	bne	r2,zero,1165c <___vfprintf_internal_r+0x430>
   11534:	84000044 	addi	r16,r16,1
   11538:	0580070e 	bge	zero,r22,11558 <___vfprintf_internal_r+0x32c>
   1153c:	b00f883a 	mov	r7,r22
   11540:	01800c04 	movi	r6,48
   11544:	880b883a 	mov	r5,r17
   11548:	a009883a 	mov	r4,r20
   1154c:	00111c00 	call	111c0 <print_repeat>
   11550:	1000421e 	bne	r2,zero,1165c <___vfprintf_internal_r+0x430>
   11554:	85a1883a 	add	r16,r16,r22
   11558:	e02d883a 	mov	r22,fp
   1155c:	bf2fc83a 	sub	r23,r23,fp
   11560:	00002006 	br	115e4 <___vfprintf_internal_r+0x3b8>
   11564:	0580090e 	bge	zero,r22,1158c <___vfprintf_internal_r+0x360>
   11568:	b00f883a 	mov	r7,r22
   1156c:	01800804 	movi	r6,32
   11570:	880b883a 	mov	r5,r17
   11574:	a009883a 	mov	r4,r20
   11578:	da401015 	stw	r9,64(sp)
   1157c:	00111c00 	call	111c0 <print_repeat>
   11580:	da401017 	ldw	r9,64(sp)
   11584:	1000351e 	bne	r2,zero,1165c <___vfprintf_internal_r+0x430>
   11588:	85a1883a 	add	r16,r16,r22
   1158c:	483ff226 	beq	r9,zero,11558 <__alt_data_end+0xffff1558>
   11590:	00800b44 	movi	r2,45
   11594:	d8800805 	stb	r2,32(sp)
   11598:	88800117 	ldw	r2,4(r17)
   1159c:	01c00044 	movi	r7,1
   115a0:	d9800804 	addi	r6,sp,32
   115a4:	880b883a 	mov	r5,r17
   115a8:	a009883a 	mov	r4,r20
   115ac:	103ee83a 	callr	r2
   115b0:	10002a1e 	bne	r2,zero,1165c <___vfprintf_internal_r+0x430>
   115b4:	84000044 	addi	r16,r16,1
   115b8:	003fe706 	br	11558 <__alt_data_end+0xffff1558>
   115bc:	b5bfffc4 	addi	r22,r22,-1
   115c0:	b0800003 	ldbu	r2,0(r22)
   115c4:	01c00044 	movi	r7,1
   115c8:	d9800804 	addi	r6,sp,32
   115cc:	d8800805 	stb	r2,32(sp)
   115d0:	88800117 	ldw	r2,4(r17)
   115d4:	880b883a 	mov	r5,r17
   115d8:	a009883a 	mov	r4,r20
   115dc:	103ee83a 	callr	r2
   115e0:	10001e1e 	bne	r2,zero,1165c <___vfprintf_internal_r+0x430>
   115e4:	8585c83a 	sub	r2,r16,r22
   115e8:	b5c9883a 	add	r4,r22,r23
   115ec:	e085883a 	add	r2,fp,r2
   115f0:	013ff216 	blt	zero,r4,115bc <__alt_data_end+0xffff15bc>
   115f4:	1021883a 	mov	r16,r2
   115f8:	dd800d17 	ldw	r22,52(sp)
   115fc:	00004406 	br	11710 <___vfprintf_internal_r+0x4e4>
   11600:	00800044 	movi	r2,1
   11604:	1480080e 	bge	r2,r18,11628 <___vfprintf_internal_r+0x3fc>
   11608:	95ffffc4 	addi	r23,r18,-1
   1160c:	b80f883a 	mov	r7,r23
   11610:	01800804 	movi	r6,32
   11614:	880b883a 	mov	r5,r17
   11618:	a009883a 	mov	r4,r20
   1161c:	00111c00 	call	111c0 <print_repeat>
   11620:	10000e1e 	bne	r2,zero,1165c <___vfprintf_internal_r+0x430>
   11624:	85e1883a 	add	r16,r16,r23
   11628:	b0800017 	ldw	r2,0(r22)
   1162c:	01c00044 	movi	r7,1
   11630:	d80d883a 	mov	r6,sp
   11634:	d8800005 	stb	r2,0(sp)
   11638:	88800117 	ldw	r2,4(r17)
   1163c:	880b883a 	mov	r5,r17
   11640:	a009883a 	mov	r4,r20
   11644:	b5c00104 	addi	r23,r22,4
   11648:	103ee83a 	callr	r2
   1164c:	1000031e 	bne	r2,zero,1165c <___vfprintf_internal_r+0x430>
   11650:	84000044 	addi	r16,r16,1
   11654:	b82d883a 	mov	r22,r23
   11658:	00002d06 	br	11710 <___vfprintf_internal_r+0x4e4>
   1165c:	00bfffc4 	movi	r2,-1
   11660:	00003106 	br	11728 <___vfprintf_internal_r+0x4fc>
   11664:	b5c00017 	ldw	r23,0(r22)
   11668:	b7000104 	addi	fp,r22,4
   1166c:	b809883a 	mov	r4,r23
   11670:	001182c0 	call	1182c <strlen>
   11674:	9091c83a 	sub	r8,r18,r2
   11678:	102d883a 	mov	r22,r2
   1167c:	0200090e 	bge	zero,r8,116a4 <___vfprintf_internal_r+0x478>
   11680:	400f883a 	mov	r7,r8
   11684:	01800804 	movi	r6,32
   11688:	880b883a 	mov	r5,r17
   1168c:	a009883a 	mov	r4,r20
   11690:	da001015 	stw	r8,64(sp)
   11694:	00111c00 	call	111c0 <print_repeat>
   11698:	da001017 	ldw	r8,64(sp)
   1169c:	103fef1e 	bne	r2,zero,1165c <__alt_data_end+0xffff165c>
   116a0:	8221883a 	add	r16,r16,r8
   116a4:	88800117 	ldw	r2,4(r17)
   116a8:	b00f883a 	mov	r7,r22
   116ac:	b80d883a 	mov	r6,r23
   116b0:	880b883a 	mov	r5,r17
   116b4:	a009883a 	mov	r4,r20
   116b8:	103ee83a 	callr	r2
   116bc:	103fe71e 	bne	r2,zero,1165c <__alt_data_end+0xffff165c>
   116c0:	85a1883a 	add	r16,r16,r22
   116c4:	e02d883a 	mov	r22,fp
   116c8:	00001106 	br	11710 <___vfprintf_internal_r+0x4e4>
   116cc:	00c00044 	movi	r3,1
   116d0:	04ffffc4 	movi	r19,-1
   116d4:	d8000e15 	stw	zero,56(sp)
   116d8:	d8c00a15 	stw	r3,40(sp)
   116dc:	05400284 	movi	r21,10
   116e0:	9825883a 	mov	r18,r19
   116e4:	d8000c15 	stw	zero,48(sp)
   116e8:	d8000b15 	stw	zero,44(sp)
   116ec:	182f883a 	mov	r23,r3
   116f0:	00000806 	br	11714 <___vfprintf_internal_r+0x4e8>
   116f4:	ddc00b15 	stw	r23,44(sp)
   116f8:	05c00084 	movi	r23,2
   116fc:	00000506 	br	11714 <___vfprintf_internal_r+0x4e8>
   11700:	00c00044 	movi	r3,1
   11704:	d8c00c15 	stw	r3,48(sp)
   11708:	05c000c4 	movi	r23,3
   1170c:	00000106 	br	11714 <___vfprintf_internal_r+0x4e8>
   11710:	002f883a 	mov	r23,zero
   11714:	d8c00f17 	ldw	r3,60(sp)
   11718:	18c00044 	addi	r3,r3,1
   1171c:	d8c00f15 	stw	r3,60(sp)
   11720:	003edc06 	br	11294 <__alt_data_end+0xffff1294>
   11724:	8005883a 	mov	r2,r16
   11728:	dfc01a17 	ldw	ra,104(sp)
   1172c:	df001917 	ldw	fp,100(sp)
   11730:	ddc01817 	ldw	r23,96(sp)
   11734:	dd801717 	ldw	r22,92(sp)
   11738:	dd401617 	ldw	r21,88(sp)
   1173c:	dd001517 	ldw	r20,84(sp)
   11740:	dcc01417 	ldw	r19,80(sp)
   11744:	dc801317 	ldw	r18,76(sp)
   11748:	dc401217 	ldw	r17,72(sp)
   1174c:	dc001117 	ldw	r16,68(sp)
   11750:	dec01b04 	addi	sp,sp,108
   11754:	f800283a 	ret

00011758 <__vfprintf_internal>:
   11758:	00800074 	movhi	r2,1
   1175c:	10892904 	addi	r2,r2,9380
   11760:	300f883a 	mov	r7,r6
   11764:	280d883a 	mov	r6,r5
   11768:	200b883a 	mov	r5,r4
   1176c:	11000017 	ldw	r4,0(r2)
   11770:	001122c1 	jmpi	1122c <___vfprintf_internal_r>

00011774 <__sfvwrite_small_dev>:
   11774:	2880000b 	ldhu	r2,0(r5)
   11778:	1080020c 	andi	r2,r2,8
   1177c:	10002126 	beq	r2,zero,11804 <__sfvwrite_small_dev+0x90>
   11780:	2880008f 	ldh	r2,2(r5)
   11784:	defffa04 	addi	sp,sp,-24
   11788:	dc000015 	stw	r16,0(sp)
   1178c:	dfc00515 	stw	ra,20(sp)
   11790:	dd000415 	stw	r20,16(sp)
   11794:	dcc00315 	stw	r19,12(sp)
   11798:	dc800215 	stw	r18,8(sp)
   1179c:	dc400115 	stw	r17,4(sp)
   117a0:	2821883a 	mov	r16,r5
   117a4:	10001216 	blt	r2,zero,117f0 <__sfvwrite_small_dev+0x7c>
   117a8:	2027883a 	mov	r19,r4
   117ac:	3025883a 	mov	r18,r6
   117b0:	3823883a 	mov	r17,r7
   117b4:	05010004 	movi	r20,1024
   117b8:	04400b0e 	bge	zero,r17,117e8 <__sfvwrite_small_dev+0x74>
   117bc:	880f883a 	mov	r7,r17
   117c0:	a440010e 	bge	r20,r17,117c8 <__sfvwrite_small_dev+0x54>
   117c4:	01c10004 	movi	r7,1024
   117c8:	8140008f 	ldh	r5,2(r16)
   117cc:	900d883a 	mov	r6,r18
   117d0:	9809883a 	mov	r4,r19
   117d4:	00118480 	call	11848 <_write_r>
   117d8:	0080050e 	bge	zero,r2,117f0 <__sfvwrite_small_dev+0x7c>
   117dc:	88a3c83a 	sub	r17,r17,r2
   117e0:	90a5883a 	add	r18,r18,r2
   117e4:	003ff406 	br	117b8 <__alt_data_end+0xffff17b8>
   117e8:	0005883a 	mov	r2,zero
   117ec:	00000706 	br	1180c <__sfvwrite_small_dev+0x98>
   117f0:	8080000b 	ldhu	r2,0(r16)
   117f4:	10801014 	ori	r2,r2,64
   117f8:	8080000d 	sth	r2,0(r16)
   117fc:	00bfffc4 	movi	r2,-1
   11800:	00000206 	br	1180c <__sfvwrite_small_dev+0x98>
   11804:	00bfffc4 	movi	r2,-1
   11808:	f800283a 	ret
   1180c:	dfc00517 	ldw	ra,20(sp)
   11810:	dd000417 	ldw	r20,16(sp)
   11814:	dcc00317 	ldw	r19,12(sp)
   11818:	dc800217 	ldw	r18,8(sp)
   1181c:	dc400117 	ldw	r17,4(sp)
   11820:	dc000017 	ldw	r16,0(sp)
   11824:	dec00604 	addi	sp,sp,24
   11828:	f800283a 	ret

0001182c <strlen>:
   1182c:	2005883a 	mov	r2,r4
   11830:	10c00007 	ldb	r3,0(r2)
   11834:	18000226 	beq	r3,zero,11840 <strlen+0x14>
   11838:	10800044 	addi	r2,r2,1
   1183c:	003ffc06 	br	11830 <__alt_data_end+0xffff1830>
   11840:	1105c83a 	sub	r2,r2,r4
   11844:	f800283a 	ret

00011848 <_write_r>:
   11848:	defffd04 	addi	sp,sp,-12
   1184c:	dc000015 	stw	r16,0(sp)
   11850:	04000074 	movhi	r16,1
   11854:	dc400115 	stw	r17,4(sp)
   11858:	8409a004 	addi	r16,r16,9856
   1185c:	2023883a 	mov	r17,r4
   11860:	2809883a 	mov	r4,r5
   11864:	300b883a 	mov	r5,r6
   11868:	380d883a 	mov	r6,r7
   1186c:	dfc00215 	stw	ra,8(sp)
   11870:	80000015 	stw	zero,0(r16)
   11874:	0011c580 	call	11c58 <write>
   11878:	00ffffc4 	movi	r3,-1
   1187c:	10c0031e 	bne	r2,r3,1188c <_write_r+0x44>
   11880:	80c00017 	ldw	r3,0(r16)
   11884:	18000126 	beq	r3,zero,1188c <_write_r+0x44>
   11888:	88c00015 	stw	r3,0(r17)
   1188c:	dfc00217 	ldw	ra,8(sp)
   11890:	dc400117 	ldw	r17,4(sp)
   11894:	dc000017 	ldw	r16,0(sp)
   11898:	dec00304 	addi	sp,sp,12
   1189c:	f800283a 	ret

000118a0 <__divsi3>:
   118a0:	20001b16 	blt	r4,zero,11910 <__divsi3+0x70>
   118a4:	000f883a 	mov	r7,zero
   118a8:	28001616 	blt	r5,zero,11904 <__divsi3+0x64>
   118ac:	200d883a 	mov	r6,r4
   118b0:	29001a2e 	bgeu	r5,r4,1191c <__divsi3+0x7c>
   118b4:	00800804 	movi	r2,32
   118b8:	00c00044 	movi	r3,1
   118bc:	00000106 	br	118c4 <__divsi3+0x24>
   118c0:	10000d26 	beq	r2,zero,118f8 <__divsi3+0x58>
   118c4:	294b883a 	add	r5,r5,r5
   118c8:	10bfffc4 	addi	r2,r2,-1
   118cc:	18c7883a 	add	r3,r3,r3
   118d0:	293ffb36 	bltu	r5,r4,118c0 <__alt_data_end+0xffff18c0>
   118d4:	0005883a 	mov	r2,zero
   118d8:	18000726 	beq	r3,zero,118f8 <__divsi3+0x58>
   118dc:	0005883a 	mov	r2,zero
   118e0:	31400236 	bltu	r6,r5,118ec <__divsi3+0x4c>
   118e4:	314dc83a 	sub	r6,r6,r5
   118e8:	10c4b03a 	or	r2,r2,r3
   118ec:	1806d07a 	srli	r3,r3,1
   118f0:	280ad07a 	srli	r5,r5,1
   118f4:	183ffa1e 	bne	r3,zero,118e0 <__alt_data_end+0xffff18e0>
   118f8:	38000126 	beq	r7,zero,11900 <__divsi3+0x60>
   118fc:	0085c83a 	sub	r2,zero,r2
   11900:	f800283a 	ret
   11904:	014bc83a 	sub	r5,zero,r5
   11908:	39c0005c 	xori	r7,r7,1
   1190c:	003fe706 	br	118ac <__alt_data_end+0xffff18ac>
   11910:	0109c83a 	sub	r4,zero,r4
   11914:	01c00044 	movi	r7,1
   11918:	003fe306 	br	118a8 <__alt_data_end+0xffff18a8>
   1191c:	00c00044 	movi	r3,1
   11920:	003fee06 	br	118dc <__alt_data_end+0xffff18dc>

00011924 <__modsi3>:
   11924:	20001716 	blt	r4,zero,11984 <__modsi3+0x60>
   11928:	000f883a 	mov	r7,zero
   1192c:	2005883a 	mov	r2,r4
   11930:	28001216 	blt	r5,zero,1197c <__modsi3+0x58>
   11934:	2900162e 	bgeu	r5,r4,11990 <__modsi3+0x6c>
   11938:	01800804 	movi	r6,32
   1193c:	00c00044 	movi	r3,1
   11940:	00000106 	br	11948 <__modsi3+0x24>
   11944:	30000a26 	beq	r6,zero,11970 <__modsi3+0x4c>
   11948:	294b883a 	add	r5,r5,r5
   1194c:	31bfffc4 	addi	r6,r6,-1
   11950:	18c7883a 	add	r3,r3,r3
   11954:	293ffb36 	bltu	r5,r4,11944 <__alt_data_end+0xffff1944>
   11958:	18000526 	beq	r3,zero,11970 <__modsi3+0x4c>
   1195c:	1806d07a 	srli	r3,r3,1
   11960:	11400136 	bltu	r2,r5,11968 <__modsi3+0x44>
   11964:	1145c83a 	sub	r2,r2,r5
   11968:	280ad07a 	srli	r5,r5,1
   1196c:	183ffb1e 	bne	r3,zero,1195c <__alt_data_end+0xffff195c>
   11970:	38000126 	beq	r7,zero,11978 <__modsi3+0x54>
   11974:	0085c83a 	sub	r2,zero,r2
   11978:	f800283a 	ret
   1197c:	014bc83a 	sub	r5,zero,r5
   11980:	003fec06 	br	11934 <__alt_data_end+0xffff1934>
   11984:	0109c83a 	sub	r4,zero,r4
   11988:	01c00044 	movi	r7,1
   1198c:	003fe706 	br	1192c <__alt_data_end+0xffff192c>
   11990:	00c00044 	movi	r3,1
   11994:	003ff106 	br	1195c <__alt_data_end+0xffff195c>

00011998 <__udivsi3>:
   11998:	200d883a 	mov	r6,r4
   1199c:	2900152e 	bgeu	r5,r4,119f4 <__udivsi3+0x5c>
   119a0:	28001416 	blt	r5,zero,119f4 <__udivsi3+0x5c>
   119a4:	00800804 	movi	r2,32
   119a8:	00c00044 	movi	r3,1
   119ac:	00000206 	br	119b8 <__udivsi3+0x20>
   119b0:	10000e26 	beq	r2,zero,119ec <__udivsi3+0x54>
   119b4:	28000516 	blt	r5,zero,119cc <__udivsi3+0x34>
   119b8:	294b883a 	add	r5,r5,r5
   119bc:	10bfffc4 	addi	r2,r2,-1
   119c0:	18c7883a 	add	r3,r3,r3
   119c4:	293ffa36 	bltu	r5,r4,119b0 <__alt_data_end+0xffff19b0>
   119c8:	18000826 	beq	r3,zero,119ec <__udivsi3+0x54>
   119cc:	0005883a 	mov	r2,zero
   119d0:	31400236 	bltu	r6,r5,119dc <__udivsi3+0x44>
   119d4:	314dc83a 	sub	r6,r6,r5
   119d8:	10c4b03a 	or	r2,r2,r3
   119dc:	1806d07a 	srli	r3,r3,1
   119e0:	280ad07a 	srli	r5,r5,1
   119e4:	183ffa1e 	bne	r3,zero,119d0 <__alt_data_end+0xffff19d0>
   119e8:	f800283a 	ret
   119ec:	0005883a 	mov	r2,zero
   119f0:	f800283a 	ret
   119f4:	00c00044 	movi	r3,1
   119f8:	003ff406 	br	119cc <__alt_data_end+0xffff19cc>

000119fc <__umodsi3>:
   119fc:	2005883a 	mov	r2,r4
   11a00:	2900122e 	bgeu	r5,r4,11a4c <__umodsi3+0x50>
   11a04:	28001116 	blt	r5,zero,11a4c <__umodsi3+0x50>
   11a08:	01800804 	movi	r6,32
   11a0c:	00c00044 	movi	r3,1
   11a10:	00000206 	br	11a1c <__umodsi3+0x20>
   11a14:	30000c26 	beq	r6,zero,11a48 <__umodsi3+0x4c>
   11a18:	28000516 	blt	r5,zero,11a30 <__umodsi3+0x34>
   11a1c:	294b883a 	add	r5,r5,r5
   11a20:	31bfffc4 	addi	r6,r6,-1
   11a24:	18c7883a 	add	r3,r3,r3
   11a28:	293ffa36 	bltu	r5,r4,11a14 <__alt_data_end+0xffff1a14>
   11a2c:	18000626 	beq	r3,zero,11a48 <__umodsi3+0x4c>
   11a30:	1806d07a 	srli	r3,r3,1
   11a34:	11400136 	bltu	r2,r5,11a3c <__umodsi3+0x40>
   11a38:	1145c83a 	sub	r2,r2,r5
   11a3c:	280ad07a 	srli	r5,r5,1
   11a40:	183ffb1e 	bne	r3,zero,11a30 <__alt_data_end+0xffff1a30>
   11a44:	f800283a 	ret
   11a48:	f800283a 	ret
   11a4c:	00c00044 	movi	r3,1
   11a50:	003ff706 	br	11a30 <__alt_data_end+0xffff1a30>

00011a54 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11a54:	008007c4 	movi	r2,31
   11a58:	11002136 	bltu	r2,r4,11ae0 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11a5c:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11a60:	00ffff84 	movi	r3,-2
   11a64:	38c4703a 	and	r2,r7,r3
   11a68:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   11a6c:	200490fa 	slli	r2,r4,3
   11a70:	02000074 	movhi	r8,1
   11a74:	4209c604 	addi	r8,r8,10008
   11a78:	4085883a 	add	r2,r8,r2
   11a7c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
   11a80:	11400115 	stw	r5,4(r2)
   11a84:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   11a88:	30000726 	beq	r6,zero,11aa8 <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11a8c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11a90:	28c6703a 	and	r3,r5,r3
   11a94:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   11a98:	d0e07b17 	ldw	r3,-32276(gp)
   11a9c:	1104983a 	sll	r2,r2,r4
   11aa0:	10c4b03a 	or	r2,r2,r3
   11aa4:	00000706 	br	11ac4 <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11aa8:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11aac:	28c6703a 	and	r3,r5,r3
   11ab0:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   11ab4:	1104983a 	sll	r2,r2,r4
   11ab8:	d0e07b17 	ldw	r3,-32276(gp)
   11abc:	0084303a 	nor	r2,zero,r2
   11ac0:	10c4703a 	and	r2,r2,r3
   11ac4:	d0a07b15 	stw	r2,-32276(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11ac8:	d0a07b17 	ldw	r2,-32276(gp)
   11acc:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11ad0:	2801703a 	wrctl	status,r5
   11ad4:	3801703a 	wrctl	status,r7
   11ad8:	0005883a 	mov	r2,zero
   11adc:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
   11ae0:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
   11ae4:	f800283a 	ret

00011ae8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   11ae8:	deffff04 	addi	sp,sp,-4
   11aec:	01000074 	movhi	r4,1
   11af0:	01400074 	movhi	r5,1
   11af4:	dfc00015 	stw	ra,0(sp)
   11af8:	2108cd04 	addi	r4,r4,9012
   11afc:	29493504 	addi	r5,r5,9428

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   11b00:	2140061e 	bne	r4,r5,11b1c <alt_load+0x34>
   11b04:	01000074 	movhi	r4,1
   11b08:	01400074 	movhi	r5,1
   11b0c:	21000804 	addi	r4,r4,32
   11b10:	29400804 	addi	r5,r5,32
   11b14:	2140121e 	bne	r4,r5,11b60 <alt_load+0x78>
   11b18:	00000b06 	br	11b48 <alt_load+0x60>
   11b1c:	00c00074 	movhi	r3,1
   11b20:	18c93504 	addi	r3,r3,9428
   11b24:	1907c83a 	sub	r3,r3,r4
   11b28:	0005883a 	mov	r2,zero
  {
    while( to != end )
   11b2c:	10fff526 	beq	r2,r3,11b04 <__alt_data_end+0xffff1b04>
    {
      *to++ = *from++;
   11b30:	114f883a 	add	r7,r2,r5
   11b34:	39c00017 	ldw	r7,0(r7)
   11b38:	110d883a 	add	r6,r2,r4
   11b3c:	10800104 	addi	r2,r2,4
   11b40:	31c00015 	stw	r7,0(r6)
   11b44:	003ff906 	br	11b2c <__alt_data_end+0xffff1b2c>
   11b48:	01000074 	movhi	r4,1
   11b4c:	01400074 	movhi	r5,1
   11b50:	21086304 	addi	r4,r4,8588
   11b54:	29486304 	addi	r5,r5,8588

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   11b58:	2140101e 	bne	r4,r5,11b9c <alt_load+0xb4>
   11b5c:	00000b06 	br	11b8c <alt_load+0xa4>
   11b60:	00c00074 	movhi	r3,1
   11b64:	18c06004 	addi	r3,r3,384
   11b68:	1907c83a 	sub	r3,r3,r4
   11b6c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   11b70:	10fff526 	beq	r2,r3,11b48 <__alt_data_end+0xffff1b48>
    {
      *to++ = *from++;
   11b74:	114f883a 	add	r7,r2,r5
   11b78:	39c00017 	ldw	r7,0(r7)
   11b7c:	110d883a 	add	r6,r2,r4
   11b80:	10800104 	addi	r2,r2,4
   11b84:	31c00015 	stw	r7,0(r6)
   11b88:	003ff906 	br	11b70 <__alt_data_end+0xffff1b70>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   11b8c:	0011f040 	call	11f04 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   11b90:	dfc00017 	ldw	ra,0(sp)
   11b94:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   11b98:	0011ff01 	jmpi	11ff0 <alt_icache_flush_all>
   11b9c:	00c00074 	movhi	r3,1
   11ba0:	18c8cd04 	addi	r3,r3,9012
   11ba4:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   11ba8:	0005883a 	mov	r2,zero
  {
    while( to != end )
   11bac:	18bff726 	beq	r3,r2,11b8c <__alt_data_end+0xffff1b8c>
    {
      *to++ = *from++;
   11bb0:	114f883a 	add	r7,r2,r5
   11bb4:	39c00017 	ldw	r7,0(r7)
   11bb8:	110d883a 	add	r6,r2,r4
   11bbc:	10800104 	addi	r2,r2,4
   11bc0:	31c00015 	stw	r7,0(r6)
   11bc4:	003ff906 	br	11bac <__alt_data_end+0xffff1bac>

00011bc8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   11bc8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   11bcc:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   11bd0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   11bd4:	0011cb80 	call	11cb8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   11bd8:	0011cd80 	call	11cd8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   11bdc:	d1a07c17 	ldw	r6,-32272(gp)
   11be0:	d1607d17 	ldw	r5,-32268(gp)
   11be4:	d1207e17 	ldw	r4,-32264(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   11be8:	dfc00017 	ldw	ra,0(sp)
   11bec:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   11bf0:	00104c81 	jmpi	104c8 <main>

00011bf4 <times>:
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   11bf4:	d0e08017 	ldw	r3,-32256(gp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   11bf8:	d0a07f17 	ldw	r2,-32260(gp)
{
  clock_t ticks = alt_nticks(); 

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   11bfc:	1800101e 	bne	r3,zero,11c40 <times+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   11c00:	d0a00c17 	ldw	r2,-32720(gp)
   11c04:	10000926 	beq	r2,zero,11c2c <times+0x38>
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   11c08:	deffff04 	addi	sp,sp,-4
   11c0c:	dfc00015 	stw	ra,0(sp)
   11c10:	103ee83a 	callr	r2

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  {
    ALT_ERRNO = ENOSYS;
   11c14:	00c01604 	movi	r3,88
   11c18:	10c00015 	stw	r3,0(r2)
    return 0;
   11c1c:	0005883a 	mov	r2,zero
  buf->tms_stime  = ticks;
  buf->tms_cutime = 0;
  buf->tms_cstime = 0;

  return ticks;
}
   11c20:	dfc00017 	ldw	ra,0(sp)
   11c24:	dec00104 	addi	sp,sp,4
   11c28:	f800283a 	ret
   11c2c:	d0a07a04 	addi	r2,gp,-32280

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  {
    ALT_ERRNO = ENOSYS;
   11c30:	00c01604 	movi	r3,88
   11c34:	10c00015 	stw	r3,0(r2)
    return 0;
   11c38:	0005883a 	mov	r2,zero
  buf->tms_stime  = ticks;
  buf->tms_cutime = 0;
  buf->tms_cstime = 0;

  return ticks;
}
   11c3c:	f800283a 	ret
    return 0;
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   11c40:	20000015 	stw	zero,0(r4)
  buf->tms_stime  = ticks;
   11c44:	20800115 	stw	r2,4(r4)
  buf->tms_cutime = 0;
   11c48:	20000215 	stw	zero,8(r4)
  buf->tms_cstime = 0;
   11c4c:	20000315 	stw	zero,12(r4)

  return ticks;
   11c50:	f800283a 	ret

00011c54 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
   11c54:	0011e7c1 	jmpi	11e7c <alt_busy_sleep>

00011c58 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   11c58:	00800044 	movi	r2,1
   11c5c:	20800226 	beq	r4,r2,11c68 <write+0x10>
   11c60:	00800084 	movi	r2,2
   11c64:	2080041e 	bne	r4,r2,11c78 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   11c68:	01000074 	movhi	r4,1
   11c6c:	000f883a 	mov	r7,zero
   11c70:	21092c04 	addi	r4,r4,9392
   11c74:	0011ce81 	jmpi	11ce8 <altera_avalon_jtag_uart_write>
   11c78:	d0a00c17 	ldw	r2,-32720(gp)
   11c7c:	10000926 	beq	r2,zero,11ca4 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   11c80:	deffff04 	addi	sp,sp,-4
   11c84:	dfc00015 	stw	ra,0(sp)
   11c88:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   11c8c:	00c01444 	movi	r3,81
   11c90:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   11c94:	00bfffc4 	movi	r2,-1
   11c98:	dfc00017 	ldw	ra,0(sp)
   11c9c:	dec00104 	addi	sp,sp,4
   11ca0:	f800283a 	ret
   11ca4:	d0a07a04 	addi	r2,gp,-32280
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   11ca8:	00c01444 	movi	r3,81
   11cac:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   11cb0:	00bfffc4 	movi	r2,-1
   11cb4:	f800283a 	ret

00011cb8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   11cb8:	deffff04 	addi	sp,sp,-4
   11cbc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   11cc0:	00120e00 	call	120e0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   11cc4:	00800044 	movi	r2,1
   11cc8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   11ccc:	dfc00017 	ldw	ra,0(sp)
   11cd0:	dec00104 	addi	sp,sp,4
   11cd4:	f800283a 	ret

00011cd8 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   11cd8:	01000074 	movhi	r4,1
   11cdc:	d1600804 	addi	r5,gp,-32736
   11ce0:	21090504 	addi	r4,r4,9236
   11ce4:	0011f101 	jmpi	11f10 <alt_dev_llist_insert>

00011ce8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   11ce8:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   11cec:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   11cf0:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   11cf4:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   11cf8:	2980072e 	bgeu	r5,r6,11d18 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   11cfc:	38c00037 	ldwio	r3,0(r7)
   11d00:	18ffffec 	andhi	r3,r3,65535
   11d04:	183ffc26 	beq	r3,zero,11cf8 <__alt_data_end+0xffff1cf8>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   11d08:	28c00007 	ldb	r3,0(r5)
   11d0c:	20c00035 	stwio	r3,0(r4)
   11d10:	29400044 	addi	r5,r5,1
   11d14:	003ff806 	br	11cf8 <__alt_data_end+0xffff1cf8>

  return count;
}
   11d18:	f800283a 	ret

00011d1c <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   11d1c:	d1600804 	addi	r5,gp,-32736
   11d20:	0011f7c1 	jmpi	11f7c <alt_find_dev>

00011d24 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   11d24:	20800a17 	ldw	r2,40(r4)
   11d28:	10800023 	ldbuio	r2,0(r2)
   11d2c:	28800005 	stb	r2,0(r5)

	return 0;
}
   11d30:	0005883a 	mov	r2,zero
   11d34:	f800283a 	ret

00011d38 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11d38:	20800a17 	ldw	r2,40(r4)
   11d3c:	29400fcc 	andi	r5,r5,63
   11d40:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11d44:	20800a17 	ldw	r2,40(r4)
   11d48:	10800063 	ldbuio	r2,1(r2)
   11d4c:	30800005 	stb	r2,0(r6)

	return 0;
}
   11d50:	0005883a 	mov	r2,zero
   11d54:	f800283a 	ret

00011d58 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11d58:	20800a17 	ldw	r2,40(r4)
   11d5c:	29400fcc 	andi	r5,r5,63
   11d60:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   11d64:	20800a17 	ldw	r2,40(r4)
   11d68:	11800065 	stbio	r6,1(r2)

	return 0;
}
   11d6c:	0005883a 	mov	r2,zero
   11d70:	f800283a 	ret

00011d74 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11d74:	20800a17 	ldw	r2,40(r4)
   11d78:	00c00c84 	movi	r3,50
   11d7c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11d80:	20800a17 	ldw	r2,40(r4)
   11d84:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11d88:	00c00cc4 	movi	r3,51
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11d8c:	10803fcc 	andi	r2,r2,255
   11d90:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11d94:	20800a17 	ldw	r2,40(r4)
   11d98:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11d9c:	20800a17 	ldw	r2,40(r4)
   11da0:	10800063 	ldbuio	r2,1(r2)
   11da4:	10803fcc 	andi	r2,r2,255
   11da8:	1006923a 	slli	r3,r2,8
   11dac:	28800017 	ldw	r2,0(r5)
   11db0:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
   11db4:	10e0000c 	andi	r3,r2,32768
   11db8:	18000126 	beq	r3,zero,11dc0 <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
   11dbc:	10bffff4 	orhi	r2,r2,65535
   11dc0:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   11dc4:	0005883a 	mov	r2,zero
   11dc8:	f800283a 	ret

00011dcc <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11dcc:	20800a17 	ldw	r2,40(r4)
   11dd0:	00c00d04 	movi	r3,52
   11dd4:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11dd8:	20800a17 	ldw	r2,40(r4)
   11ddc:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11de0:	00c00d44 	movi	r3,53
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11de4:	10803fcc 	andi	r2,r2,255
   11de8:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11dec:	20800a17 	ldw	r2,40(r4)
   11df0:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11df4:	20800a17 	ldw	r2,40(r4)
   11df8:	10800063 	ldbuio	r2,1(r2)
   11dfc:	10803fcc 	andi	r2,r2,255
   11e00:	1006923a 	slli	r3,r2,8
   11e04:	28800017 	ldw	r2,0(r5)
   11e08:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
   11e0c:	10e0000c 	andi	r3,r2,32768
   11e10:	18000126 	beq	r3,zero,11e18 <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
   11e14:	10bffff4 	orhi	r2,r2,65535
   11e18:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   11e1c:	0005883a 	mov	r2,zero
   11e20:	f800283a 	ret

00011e24 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11e24:	20800a17 	ldw	r2,40(r4)
   11e28:	00c00d84 	movi	r3,54
   11e2c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11e30:	20800a17 	ldw	r2,40(r4)
   11e34:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11e38:	00c00dc4 	movi	r3,55
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11e3c:	10803fcc 	andi	r2,r2,255
   11e40:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11e44:	20800a17 	ldw	r2,40(r4)
   11e48:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11e4c:	20800a17 	ldw	r2,40(r4)
   11e50:	10800063 	ldbuio	r2,1(r2)
   11e54:	10803fcc 	andi	r2,r2,255
   11e58:	1006923a 	slli	r3,r2,8
   11e5c:	28800017 	ldw	r2,0(r5)
   11e60:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
   11e64:	10e0000c 	andi	r3,r2,32768
   11e68:	18000126 	beq	r3,zero,11e70 <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
   11e6c:	10bffff4 	orhi	r2,r2,65535
   11e70:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   11e74:	0005883a 	mov	r2,zero
   11e78:	f800283a 	ret

00011e7c <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   11e7c:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   11e80:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   11e84:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   11e88:	dc000015 	stw	r16,0(sp)
   11e8c:	dfc00115 	stw	ra,4(sp)
   11e90:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   11e94:	00119980 	call	11998 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   11e98:	10001026 	beq	r2,zero,11edc <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   11e9c:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   11ea0:	013999b4 	movhi	r4,58982
   11ea4:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   11ea8:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   11eac:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   11eb0:	297fffc4 	addi	r5,r5,-1
   11eb4:	283ffe1e 	bne	r5,zero,11eb0 <__alt_data_end+0xffff1eb0>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   11eb8:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   11ebc:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   11ec0:	18bffb16 	blt	r3,r2,11eb0 <__alt_data_end+0xffff1eb0>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11ec4:	01400144 	movi	r5,5
   11ec8:	8009883a 	mov	r4,r16
   11ecc:	00111100 	call	11110 <__mulsi3>
   11ed0:	10bfffc4 	addi	r2,r2,-1
   11ed4:	103ffe1e 	bne	r2,zero,11ed0 <__alt_data_end+0xffff1ed0>
   11ed8:	00000506 	br	11ef0 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11edc:	01400144 	movi	r5,5
   11ee0:	8009883a 	mov	r4,r16
   11ee4:	00111100 	call	11110 <__mulsi3>
   11ee8:	10bfffc4 	addi	r2,r2,-1
   11eec:	00bffe16 	blt	zero,r2,11ee8 <__alt_data_end+0xffff1ee8>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   11ef0:	0005883a 	mov	r2,zero
   11ef4:	dfc00117 	ldw	ra,4(sp)
   11ef8:	dc000017 	ldw	r16,0(sp)
   11efc:	dec00204 	addi	sp,sp,8
   11f00:	f800283a 	ret

00011f04 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11f04:	f800283a 	ret

00011f08 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   11f08:	3005883a 	mov	r2,r6
   11f0c:	f800283a 	ret

00011f10 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11f10:	20000226 	beq	r4,zero,11f1c <alt_dev_llist_insert+0xc>
   11f14:	20800217 	ldw	r2,8(r4)
   11f18:	1000101e 	bne	r2,zero,11f5c <alt_dev_llist_insert+0x4c>
   11f1c:	d0a00c17 	ldw	r2,-32720(gp)
   11f20:	10000926 	beq	r2,zero,11f48 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   11f24:	deffff04 	addi	sp,sp,-4
   11f28:	dfc00015 	stw	ra,0(sp)
   11f2c:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   11f30:	00c00584 	movi	r3,22
   11f34:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   11f38:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   11f3c:	dfc00017 	ldw	ra,0(sp)
   11f40:	dec00104 	addi	sp,sp,4
   11f44:	f800283a 	ret
   11f48:	d0a07a04 	addi	r2,gp,-32280
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   11f4c:	00c00584 	movi	r3,22
   11f50:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   11f54:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   11f58:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   11f5c:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11f60:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   11f64:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   11f68:	28800017 	ldw	r2,0(r5)
   11f6c:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   11f70:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   11f74:	0005883a 	mov	r2,zero
   11f78:	f800283a 	ret

00011f7c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11f7c:	defffb04 	addi	sp,sp,-20
   11f80:	dcc00315 	stw	r19,12(sp)
   11f84:	dc800215 	stw	r18,8(sp)
   11f88:	dc400115 	stw	r17,4(sp)
   11f8c:	dc000015 	stw	r16,0(sp)
   11f90:	dfc00415 	stw	ra,16(sp)
   11f94:	2027883a 	mov	r19,r4
   11f98:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   11f9c:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   11fa0:	001182c0 	call	1182c <strlen>
   11fa4:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11fa8:	84400726 	beq	r16,r17,11fc8 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11fac:	81000217 	ldw	r4,8(r16)
   11fb0:	900d883a 	mov	r6,r18
   11fb4:	980b883a 	mov	r5,r19
   11fb8:	001215c0 	call	1215c <memcmp>
   11fbc:	10000426 	beq	r2,zero,11fd0 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   11fc0:	84000017 	ldw	r16,0(r16)
   11fc4:	003ff806 	br	11fa8 <__alt_data_end+0xffff1fa8>
  }
  
  /* No match found */
  
  return NULL;
   11fc8:	0005883a 	mov	r2,zero
   11fcc:	00000106 	br	11fd4 <alt_find_dev+0x58>
   11fd0:	8005883a 	mov	r2,r16
}
   11fd4:	dfc00417 	ldw	ra,16(sp)
   11fd8:	dcc00317 	ldw	r19,12(sp)
   11fdc:	dc800217 	ldw	r18,8(sp)
   11fe0:	dc400117 	ldw	r17,4(sp)
   11fe4:	dc000017 	ldw	r16,0(sp)
   11fe8:	dec00504 	addi	sp,sp,20
   11fec:	f800283a 	ret

00011ff0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11ff0:	f800283a 	ret

00011ff4 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11ff4:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11ff8:	00bfff84 	movi	r2,-2
   11ffc:	1884703a 	and	r2,r3,r2
   12000:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   12004:	21400117 	ldw	r5,4(r4)
   12008:	20800017 	ldw	r2,0(r4)
   1200c:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
   12010:	21400117 	ldw	r5,4(r4)
   12014:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   12018:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
   1201c:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12020:	1801703a 	wrctl	status,r3
   12024:	f800283a 	ret

00012028 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   12028:	d0a07f17 	ldw	r2,-32260(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1202c:	defffb04 	addi	sp,sp,-20
   12030:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   12034:	d4200d17 	ldw	r16,-32716(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   12038:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1203c:	dc800215 	stw	r18,8(sp)
   12040:	dc400115 	stw	r17,4(sp)
   12044:	dfc00415 	stw	ra,16(sp)
   12048:	dcc00315 	stw	r19,12(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1204c:	d0a07f15 	stw	r2,-32260(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   12050:	d4600d04 	addi	r17,gp,-32716
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
   12054:	04800044 	movi	r18,1

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   12058:	84401a26 	beq	r16,r17,120c4 <alt_tick+0x9c>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1205c:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
   12060:	84c00017 	ldw	r19,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   12064:	10000326 	beq	r2,zero,12074 <alt_tick+0x4c>
   12068:	d0a07f17 	ldw	r2,-32260(gp)
   1206c:	1000011e 	bne	r2,zero,12074 <alt_tick+0x4c>
    {
      alarm->rollover = 0;
   12070:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   12074:	d0e07f17 	ldw	r3,-32260(gp)
   12078:	80800217 	ldw	r2,8(r16)
   1207c:	18800f36 	bltu	r3,r2,120bc <alt_tick+0x94>
   12080:	80800403 	ldbu	r2,16(r16)
   12084:	10000d1e 	bne	r2,zero,120bc <alt_tick+0x94>
    {
      next_callback = alarm->callback (alarm->context);
   12088:	80800317 	ldw	r2,12(r16)
   1208c:	81000517 	ldw	r4,20(r16)
   12090:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   12094:	1000031e 	bne	r2,zero,120a4 <alt_tick+0x7c>
      {
        alt_alarm_stop (alarm);
   12098:	8009883a 	mov	r4,r16
   1209c:	0011ff40 	call	11ff4 <alt_alarm_stop>
   120a0:	00000606 	br	120bc <alt_tick+0x94>
      }
      else
      {
        alarm->time += next_callback;
   120a4:	80c00217 	ldw	r3,8(r16)
   120a8:	10c5883a 	add	r2,r2,r3
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   120ac:	d0e07f17 	ldw	r3,-32260(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
   120b0:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   120b4:	10c0012e 	bgeu	r2,r3,120bc <alt_tick+0x94>
        {
          alarm->rollover = 1;
   120b8:	84800405 	stb	r18,16(r16)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   120bc:	9821883a 	mov	r16,r19
   120c0:	003fe506 	br	12058 <__alt_data_end+0xffff2058>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   120c4:	dfc00417 	ldw	ra,16(sp)
   120c8:	dcc00317 	ldw	r19,12(sp)
   120cc:	dc800217 	ldw	r18,8(sp)
   120d0:	dc400117 	ldw	r17,4(sp)
   120d4:	dc000017 	ldw	r16,0(sp)
   120d8:	dec00504 	addi	sp,sp,20
   120dc:	f800283a 	ret

000120e0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   120e0:	000170fa 	wrctl	ienable,zero
   120e4:	f800283a 	ret

000120e8 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   120e8:	213ffe84 	addi	r4,r4,-6
   120ec:	008003c4 	movi	r2,15
   120f0:	11001636 	bltu	r2,r4,1214c <alt_exception_cause_generated_bad_addr+0x64>
   120f4:	200890ba 	slli	r4,r4,2
   120f8:	00800074 	movhi	r2,1
   120fc:	10884304 	addi	r2,r2,8460
   12100:	2089883a 	add	r4,r4,r2
   12104:	20800017 	ldw	r2,0(r4)
   12108:	1000683a 	jmp	r2
   1210c:	00012154 	movui	zero,1157
   12110:	00012154 	movui	zero,1157
   12114:	0001214c 	andi	zero,zero,1157
   12118:	0001214c 	andi	zero,zero,1157
   1211c:	0001214c 	andi	zero,zero,1157
   12120:	00012154 	movui	zero,1157
   12124:	0001214c 	andi	zero,zero,1157
   12128:	0001214c 	andi	zero,zero,1157
   1212c:	00012154 	movui	zero,1157
   12130:	00012154 	movui	zero,1157
   12134:	0001214c 	andi	zero,zero,1157
   12138:	00012154 	movui	zero,1157
   1213c:	0001214c 	andi	zero,zero,1157
   12140:	0001214c 	andi	zero,zero,1157
   12144:	0001214c 	andi	zero,zero,1157
   12148:	00012154 	movui	zero,1157
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1214c:	0005883a 	mov	r2,zero
   12150:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   12154:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   12158:	f800283a 	ret

0001215c <memcmp>:
   1215c:	218d883a 	add	r6,r4,r6
   12160:	21800826 	beq	r4,r6,12184 <memcmp+0x28>
   12164:	20800003 	ldbu	r2,0(r4)
   12168:	28c00003 	ldbu	r3,0(r5)
   1216c:	10c00226 	beq	r2,r3,12178 <memcmp+0x1c>
   12170:	10c5c83a 	sub	r2,r2,r3
   12174:	f800283a 	ret
   12178:	21000044 	addi	r4,r4,1
   1217c:	29400044 	addi	r5,r5,1
   12180:	003ff706 	br	12160 <__alt_data_end+0xffff2160>
   12184:	0005883a 	mov	r2,zero
   12188:	f800283a 	ret
