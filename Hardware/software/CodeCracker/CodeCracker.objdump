
CodeCracker.elf:     file format elf32-littlenios2
CodeCracker.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000025bc memsz 0x000025bc flags r-x
    LOAD off    0x000035dc vaddr 0x000125dc paddr 0x0001277c align 2**12
         filesz 0x000001a0 memsz 0x000001a0 flags rw-
    LOAD off    0x0000391c vaddr 0x0001291c paddr 0x0001291c align 2**12
         filesz 0x00000000 memsz 0x000001a4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002274  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001e8  000123f4  000123f4  000033f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000001a0  000125dc  0001277c  000035dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001a4  0001291c  0001291c  0000391c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00012ac0  00012ac0  0000377c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000377c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000005b8  00000000  00000000  000037a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00007186  00000000  00000000  00003d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002a7f  00000000  00000000  0000aede  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002fe7  00000000  00000000  0000d95d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000838  00000000  00000000  00010944  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001f44  00000000  00000000  0001117c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000321a  00000000  00000000  000130c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000162dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000620  00000000  00000000  00016320  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000183de  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000183e1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000183e4  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000183e5  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000183e6  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000183ea  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000183ee  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000183f2  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000183fb  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00018404  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0001840d  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000005a  00000000  00000000  00018418  2**0
                  CONTENTS, READONLY
 29 .jdi          00004920  00000000  00000000  00018472  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00078340  00000000  00000000  0001cd92  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
000123f4 l    d  .rodata	00000000 .rodata
000125dc l    d  .rwdata	00000000 .rwdata
0001291c l    d  .bss	00000000 .bss
00012ac0 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../CodeCracker_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00012948 l     O .bss	00000078 xv.3573
00012458 l     O .rodata	00000078 h.3571
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00011444 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000125dc l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_times.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000126bc l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00012170 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
00012944 g     O .bss	00000004 alt_instruction_exception_handler
00011e30 g     F .text	0000002c alt_main
0001023c g     F .text	00000014 led_write
00011358 g     F .text	00000080 _puts_r
000129c0 g     O .bss	00000100 alt_irq
0001277c g       *ABS*	00000000 __flash_rwdata_start
0001130c g     F .text	0000004c printf
00011090 g     F .text	00000070 .hidden __fixsfsi
000101bc g     F .text	00000080 sys_timer_isr
00012740 g     O .rwdata	00000004 FLATHIGH
00012758 g     O .rwdata	00000004 jtag_uart
00012348 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00011e5c g     F .text	00000060 times
000102b4 g     F .text	0000000c is_flat
00011fdc g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
00012928 g     O .bss	00000004 errno
00012934 g     O .bss	00000004 alt_argv
0001a740 g       *ABS*	00000000 _gp
00011ebc g     F .text	00000004 usleep
000126e8 g     O .rwdata	00000030 alt_fd_list
000121e4 g     F .text	00000074 alt_find_dev
000113d8 g     F .text	00000014 puts
00012350 g     F .text	00000074 alt_exception_cause_generated_bad_addr
000112d0 g     F .text	0000003c _printf_r
00011c00 g     F .text	00000064 .hidden __udivsi3
00012744 g     O .rwdata	00000004 FLATLOW
0001275c g     O .rwdata	00000004 alt_max_fd
00011cbc g     F .text	00000094 alt_irq_register
00012748 g     O .rwdata	00000004 _global_impure_ptr
00012ac0 g       *ABS*	00000000 __bss_end
00012290 g     F .text	000000b8 alt_tick
0001225c g     F .text	00000034 alt_alarm_stop
0001292c g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
00012718 g     O .rwdata	00000028 alt_dev_null
0001216c g     F .text	00000004 alt_dcache_flush_all
0001277c g       *ABS*	00000000 __ram_rwdata_end
000102c0 g     F .text	00000070 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00012760 g     O .rwdata	00000008 alt_dev_list
00011ec0 g     F .text	00000060 write
000125dc g       *ABS*	00000000 __ram_rodata_end
000113ec g     F .text	0000003c strcat
00012920 g     O .bss	00000001 led
00011c64 g     F .text	00000058 .hidden __umodsi3
00012ac0 g       *ABS*	00000000 end
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
00011224 g     F .text	00000064 .hidden __clzsi2
00011f50 g     F .text	00000034 altera_avalon_jtag_uart_write
000114b0 g     F .text	0000052c ___vfprintf_internal_r
00010180 g     F .text	0000003c _start
00012924 g     O .bss	00000004 level
00012940 g     O .bss	00000004 _alt_tick_rate
0001293c g     O .bss	00000004 _alt_nticks
00011f40 g     F .text	00000010 alt_sys_init
00011f8c g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
00011100 g     F .text	00000124 .hidden __floatsisf
00011288 g     F .text	00000028 .hidden __mulsi3
000125dc g       *ABS*	00000000 __ram_rwdata_start
000123f4 g       *ABS*	00000000 __ram_rodata_start
000120e4 g     F .text	00000088 alt_busy_sleep
00012034 g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
000123c4 g     F .text	00000030 memcmp
00012ac0 g       *ABS*	00000000 __alt_stack_base
00012178 g     F .text	0000006c alt_dev_llist_insert
000119f8 g     F .text	000000b8 __sfvwrite_small_dev
0001291c g       *ABS*	00000000 __bss_start
000112b0 g     F .text	00000020 memset
000104c8 g     F .text	000002d0 main
00012930 g     O .bss	00000004 alt_envp
00012754 g     O .rwdata	00000004 uart_0
00012770 g     O .rwdata	00000004 alt_errno
00011b08 g     F .text	00000084 .hidden __divsi3
00010c60 g     F .text	00000430 .hidden __mulsf3
000123f4 g       *ABS*	00000000 __flash_rodata_start
00011f20 g     F .text	00000020 alt_irq_init
000124d0 g     O .rodata	00000100 .hidden __clz_tab
00011ab0 g     F .text	00000058 _write_r
00010250 g     F .text	00000030 led_response
0001274c g     O .rwdata	00000004 _impure_ptr
00012938 g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
0001291c g     O .bss	00000001 pwm
00012768 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00011f84 g     F .text	00000008 alt_up_accelerometer_spi_open_dev
0001277c g       *ABS*	00000000 _edata
00012ac0 g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
00011b8c g     F .text	00000074 .hidden __modsi3
0001208c g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010280 g     F .text	00000034 convert_read
0001000c g       .entry	00000000 _exit
00011fa0 g     F .text	00000020 alt_up_accelerometer_spi_read
00011fc0 g     F .text	0000001c alt_up_accelerometer_spi_write
00011428 g     F .text	0000001c strlen
00012258 g     F .text	00000004 alt_icache_flush_all
00012750 g     O .rwdata	00000004 alt_priority_mask
00010330 g     F .text	00000198 FIR
000119dc g     F .text	0000001c __vfprintf_internal
00012774 g     O .rwdata	00000008 alt_alarm_list
00010798 g     F .text	000004c8 .hidden __addsf3
00011d50 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1010c:	04000074 	movhi	r16,1
   10110:	840a7004 	addi	r16,r16,10688

  active = alt_irq_pending ();

  do
  {
    i = 0;
   10114:	000b883a 	mov	r5,zero
    mask = 1;
   10118:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	1888703a 	and	r4,r3,r2
   10120:	20000b26 	beq	r4,zero,10150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   10124:	280490fa 	slli	r2,r5,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	183ff51e 	bne	r3,zero,10114 <__alt_data_end+0xffff0114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10150:	1085883a 	add	r2,r2,r2
      i++;
   10154:	29400044 	addi	r5,r5,1

    } while (1);
   10158:	003ff006 	br	1011c <__alt_data_end+0xffff011c>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a08117 	ldw	r2,-32252(gp)
   10160:	10000426 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10164:	200b883a 	mov	r5,r4
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1018c:	d6a9d014 	ori	gp,gp,42816
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	108a4714 	ori	r2,r2,10524

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18cab014 	ori	r3,r3,10944

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <__alt_data_end+0xffff01a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	0011d500 	call	11d50 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	0011e300 	call	11e30 <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <__alt_data_end+0xffff01b8>

000101bc <sys_timer_isr>:
}



void sys_timer_isr() {
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   101bc:	008000b4 	movhi	r2,2
   101c0:	10840804 	addi	r2,r2,4128
   101c4:	10000035 	stwio	zero,0(r2)

    if (pwm < abs(level)) {
   101c8:	d0a07917 	ldw	r2,-32284(gp)
   101cc:	d1607707 	ldb	r5,-32292(gp)
   101d0:	1009883a 	mov	r4,r2
   101d4:	1000010e 	bge	r2,zero,101dc <sys_timer_isr+0x20>
   101d8:	0089c83a 	sub	r4,zero,r2
   101dc:	00c000b4 	movhi	r3,2
   101e0:	18c43004 	addi	r3,r3,4288
   101e4:	2900080e 	bge	r5,r4,10208 <sys_timer_isr+0x4c>

        if (level < 0) {
   101e8:	1000040e 	bge	r2,zero,101fc <sys_timer_isr+0x40>
alt_8 pwm = 0;
alt_u8 led;
int level;

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   101ec:	d0a07803 	ldbu	r2,-32288(gp)
   101f0:	1085883a 	add	r2,r2,r2
   101f4:	10803fcc 	andi	r2,r2,255
   101f8:	00000406 	br	1020c <sys_timer_isr+0x50>
   101fc:	d0a07803 	ldbu	r2,-32288(gp)
   10200:	1004d07a 	srli	r2,r2,1
   10204:	00000106 	br	1020c <sys_timer_isr+0x50>
   10208:	d0a07803 	ldbu	r2,-32288(gp)
   1020c:	18800035 	stwio	r2,0(r3)

    } else {
        led_write(led);
    }

    if (pwm > PWM_PERIOD) {
   10210:	d0a07703 	ldbu	r2,-32292(gp)
   10214:	01000404 	movi	r4,16
   10218:	10c03fcc 	andi	r3,r2,255
   1021c:	18c0201c 	xori	r3,r3,128
   10220:	18ffe004 	addi	r3,r3,-128
   10224:	20c0020e 	bge	r4,r3,10230 <sys_timer_isr+0x74>
        pwm = 0;
   10228:	d0207705 	stb	zero,-32292(gp)
   1022c:	f800283a 	ret
    } else {
        pwm++;
   10230:	10800044 	addi	r2,r2,1
   10234:	d0a07705 	stb	r2,-32292(gp)
   10238:	f800283a 	ret

0001023c <led_write>:
alt_8 pwm = 0;
alt_u8 led;
int level;

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   1023c:	008000b4 	movhi	r2,2
   10240:	21003fcc 	andi	r4,r4,255
   10244:	10843004 	addi	r2,r2,4288
   10248:	11000035 	stwio	r4,0(r2)
   1024c:	f800283a 	ret

00010250 <led_response>:
}

void led_response(char check){
    if(check == 'y'){
   10250:	21003fcc 	andi	r4,r4,255
   10254:	2100201c 	xori	r4,r4,128
   10258:	008000b4 	movhi	r2,2
   1025c:	213fe004 	addi	r4,r4,-128
   10260:	00c01e44 	movi	r3,121
   10264:	10843004 	addi	r2,r2,4288
   10268:	20c0021e 	bne	r4,r3,10274 <led_response+0x24>
        IOWR(LED_BASE, 0, 256);
   1026c:	00c04004 	movi	r3,256
   10270:	00000106 	br	10278 <led_response+0x28>
    }else{
        IOWR(LED_BASE, 0, 16);
   10274:	00c00404 	movi	r3,16
   10278:	10c00035 	stwio	r3,0(r2)
   1027c:	f800283a 	ret

00010280 <convert_read>:
}



void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
   10280:	213ff804 	addi	r4,r4,-32
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   10284:	2005d1ba 	srai	r2,r4,6
    * level = (acc_read >> 1) & 0x1f;
   10288:	2009d07a 	srai	r4,r4,1


void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   1028c:	10c001cc 	andi	r3,r2,7
   10290:	00800204 	movi	r2,8
   10294:	10cfc83a 	sub	r7,r2,r3
   10298:	11ce983a 	sll	r7,r2,r7
   1029c:	10c5d83a 	sra	r2,r2,r3
    * level = (acc_read >> 1) & 0x1f;
   102a0:	210007cc 	andi	r4,r4,31


void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   102a4:	3884b03a 	or	r2,r7,r2
   102a8:	30800005 	stb	r2,0(r6)
    * level = (acc_read >> 1) & 0x1f;
   102ac:	29000015 	stw	r4,0(r5)
   102b0:	f800283a 	ret

000102b4 <is_flat>:
}

int is_flat(alt_32 reading){
   102b4:	21000f04 	addi	r4,r4,60
   102b8:	20801e70 	cmpltui	r2,r4,121
    if((reading < -60) || (reading > 60)){
        return 0;
    }else{
        return 1;
    }
}
   102bc:	f800283a 	ret

000102c0 <timer_init>:
        pwm++;
    }

}

void timer_init(void * isr) {
   102c0:	defffe04 	addi	sp,sp,-8
   102c4:	dc000015 	stw	r16,0(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   102c8:	040000b4 	movhi	r16,2
        pwm++;
    }

}

void timer_init(void * isr) {
   102cc:	dfc00115 	stw	ra,4(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   102d0:	84040904 	addi	r16,r16,4132
   102d4:	008000c4 	movi	r2,3
   102d8:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   102dc:	00c000b4 	movhi	r3,2
   102e0:	0005883a 	mov	r2,zero
   102e4:	18c40804 	addi	r3,r3,4128
   102e8:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
   102ec:	00c000b4 	movhi	r3,2
   102f0:	18c40a04 	addi	r3,r3,4136
   102f4:	01424004 	movi	r5,2304
   102f8:	19400035 	stwio	r5,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
   102fc:	00c000b4 	movhi	r3,2
   10300:	18c40b04 	addi	r3,r3,4140
   10304:	18800035 	stwio	r2,0(r3)
    alt_irq_register(TIMER_IRQ, 0, isr);
   10308:	200d883a 	mov	r6,r4
   1030c:	000b883a 	mov	r5,zero
   10310:	01000044 	movi	r4,1
   10314:	0011cbc0 	call	11cbc <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   10318:	008001c4 	movi	r2,7
   1031c:	80800035 	stwio	r2,0(r16)

}
   10320:	dfc00117 	ldw	ra,4(sp)
   10324:	dc000017 	ldw	r16,0(sp)
   10328:	dec00204 	addi	sp,sp,8
   1032c:	f800283a 	ret

00010330 <FIR>:

  // filter output
  alt_32 yn = 0;

  // implementation of delay line
  xv[29] = xv[28];
   10330:	00800074 	movhi	r2,1
   10334:	108a5204 	addi	r2,r2,10568
   10338:	10c01c17 	ldw	r3,112(r2)
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);

}

alt_32 FIR(alt_32 xn)
{
   1033c:	defff904 	addi	sp,sp,-28
   10340:	dd400515 	stw	r21,20(sp)
   10344:	dcc00315 	stw	r19,12(sp)
   10348:	dc800215 	stw	r18,8(sp)
   1034c:	dc400115 	stw	r17,4(sp)
   10350:	dc000015 	stw	r16,0(sp)
   10354:	dfc00615 	stw	ra,24(sp)
   10358:	dd000415 	stw	r20,16(sp)

  // filter output
  alt_32 yn = 0;

  // implementation of delay line
  xv[29] = xv[28];
   1035c:	10c01d15 	stw	r3,116(r2)
  xv[28] = xv[27];
   10360:	10c01b17 	ldw	r3,108(r2)

  // convolve delay line by
  // filter coefficients
  for(int i=0;i<30;i++)
  {
    yn += h[i]*xv[i];
   10364:	05400074 	movhi	r21,1
  xv[5] = xv[4];
  xv[4] = xv[3];
  xv[3] = xv[2];
  xv[2] = xv[1];
  xv[1] = xv[0];
  xv[0] = xn;
   10368:	0023883a 	mov	r17,zero
  // filter output
  alt_32 yn = 0;

  // implementation of delay line
  xv[29] = xv[28];
  xv[28] = xv[27];
   1036c:	10c01c15 	stw	r3,112(r2)
  xv[27] = xv[26];
   10370:	10c01a17 	ldw	r3,104(r2)

  // delay line of time samples
  static alt_32 xv[30] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

  // filter output
  alt_32 yn = 0;
   10374:	0025883a 	mov	r18,zero
   10378:	1021883a 	mov	r16,r2

  // implementation of delay line
  xv[29] = xv[28];
  xv[28] = xv[27];
  xv[27] = xv[26];
   1037c:	10c01b15 	stw	r3,108(r2)
  xv[26] = xv[25];
   10380:	10c01917 	ldw	r3,100(r2)

  // convolve delay line by
  // filter coefficients
  for(int i=0;i<30;i++)
  {
    yn += h[i]*xv[i];
   10384:	ad491604 	addi	r21,r21,9304
  xv[1] = xv[0];
  xv[0] = xn;

  // convolve delay line by
  // filter coefficients
  for(int i=0;i<30;i++)
   10388:	04c01e04 	movi	r19,120

  // implementation of delay line
  xv[29] = xv[28];
  xv[28] = xv[27];
  xv[27] = xv[26];
  xv[26] = xv[25];
   1038c:	10c01a15 	stw	r3,104(r2)
  xv[25] = xv[24];
   10390:	10c01817 	ldw	r3,96(r2)
   10394:	10c01915 	stw	r3,100(r2)
  xv[24] = xv[23];
   10398:	10c01717 	ldw	r3,92(r2)
   1039c:	10c01815 	stw	r3,96(r2)
  xv[23] = xv[22];
   103a0:	10c01617 	ldw	r3,88(r2)
   103a4:	10c01715 	stw	r3,92(r2)
  xv[22] = xv[21];
   103a8:	10c01517 	ldw	r3,84(r2)
   103ac:	10c01615 	stw	r3,88(r2)
  xv[21] = xv[20];
   103b0:	10c01417 	ldw	r3,80(r2)
   103b4:	10c01515 	stw	r3,84(r2)
  xv[20] = xv[19];
   103b8:	10c01317 	ldw	r3,76(r2)
   103bc:	10c01415 	stw	r3,80(r2)
  xv[19] = xv[18];
   103c0:	10c01217 	ldw	r3,72(r2)
   103c4:	10c01315 	stw	r3,76(r2)
  xv[18] = xv[17];
   103c8:	10c01117 	ldw	r3,68(r2)
   103cc:	10c01215 	stw	r3,72(r2)
  xv[17] = xv[16];
   103d0:	10c01017 	ldw	r3,64(r2)
   103d4:	10c01115 	stw	r3,68(r2)
  xv[16] = xv[15];
   103d8:	10c00f17 	ldw	r3,60(r2)
   103dc:	10c01015 	stw	r3,64(r2)
  xv[15] = xv[14];
   103e0:	10c00e17 	ldw	r3,56(r2)
   103e4:	10c00f15 	stw	r3,60(r2)
  xv[14] = xv[13];
   103e8:	10c00d17 	ldw	r3,52(r2)
   103ec:	10c00e15 	stw	r3,56(r2)
  xv[13] = xv[12];
   103f0:	10c00c17 	ldw	r3,48(r2)
   103f4:	10c00d15 	stw	r3,52(r2)
  xv[12] = xv[11];
   103f8:	10c00b17 	ldw	r3,44(r2)
   103fc:	10c00c15 	stw	r3,48(r2)
  xv[11] = xv[10];
   10400:	10c00a17 	ldw	r3,40(r2)
   10404:	10c00b15 	stw	r3,44(r2)
  xv[10] = xv[9];
   10408:	10c00917 	ldw	r3,36(r2)
   1040c:	10c00a15 	stw	r3,40(r2)
  xv[9] = xv[8];
   10410:	10c00817 	ldw	r3,32(r2)
   10414:	10c00915 	stw	r3,36(r2)
  xv[8] = xv[7];
   10418:	10c00717 	ldw	r3,28(r2)
   1041c:	10c00815 	stw	r3,32(r2)
  xv[7] = xv[6];
   10420:	10c00617 	ldw	r3,24(r2)
   10424:	10c00715 	stw	r3,28(r2)
  xv[6] = xv[5];
   10428:	10c00517 	ldw	r3,20(r2)
   1042c:	10c00615 	stw	r3,24(r2)
  xv[5] = xv[4];
   10430:	10c00417 	ldw	r3,16(r2)
   10434:	10c00515 	stw	r3,20(r2)
  xv[4] = xv[3];
   10438:	10c00317 	ldw	r3,12(r2)
   1043c:	10c00415 	stw	r3,16(r2)
  xv[3] = xv[2];
   10440:	10c00217 	ldw	r3,8(r2)
   10444:	10c00315 	stw	r3,12(r2)
  xv[2] = xv[1];
   10448:	10c00117 	ldw	r3,4(r2)
   1044c:	10c00215 	stw	r3,8(r2)
  xv[1] = xv[0];
   10450:	10c00017 	ldw	r3,0(r2)
   10454:	10c00115 	stw	r3,4(r2)
  xv[0] = xn;
   10458:	11000015 	stw	r4,0(r2)

  // convolve delay line by
  // filter coefficients
  for(int i=0;i<30;i++)
  {
    yn += h[i]*xv[i];
   1045c:	8c05883a 	add	r2,r17,r16
   10460:	11000017 	ldw	r4,0(r2)
   10464:	00111000 	call	11100 <__floatsisf>
   10468:	8d47883a 	add	r3,r17,r21
   1046c:	19400017 	ldw	r5,0(r3)
   10470:	1009883a 	mov	r4,r2
   10474:	8c400104 	addi	r17,r17,4
   10478:	0010c600 	call	10c60 <__mulsf3>
   1047c:	9009883a 	mov	r4,r18
   10480:	1029883a 	mov	r20,r2
   10484:	00111000 	call	11100 <__floatsisf>
   10488:	100b883a 	mov	r5,r2
   1048c:	a009883a 	mov	r4,r20
   10490:	00107980 	call	10798 <__addsf3>
   10494:	1009883a 	mov	r4,r2
   10498:	00110900 	call	11090 <__fixsfsi>
   1049c:	1025883a 	mov	r18,r2
  xv[1] = xv[0];
  xv[0] = xn;

  // convolve delay line by
  // filter coefficients
  for(int i=0;i<30;i++)
   104a0:	8cffee1e 	bne	r17,r19,1045c <__alt_data_end+0xffff045c>
    yn += h[i]*xv[i];
  }
  // apply gain
  yn = hg*yn;
  return yn;
}
   104a4:	dfc00617 	ldw	ra,24(sp)
   104a8:	dd400517 	ldw	r21,20(sp)
   104ac:	dd000417 	ldw	r20,16(sp)
   104b0:	dcc00317 	ldw	r19,12(sp)
   104b4:	dc800217 	ldw	r18,8(sp)
   104b8:	dc400117 	ldw	r17,4(sp)
   104bc:	dc000017 	ldw	r16,0(sp)
   104c0:	dec00704 	addi	sp,sp,28
   104c4:	f800283a 	ret

000104c8 <main>:

    alt_32 x_read;
    alt_32 y_read;
    alt_32 z_read;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   104c8:	01000074 	movhi	r4,1
  // apply gain
  yn = hg*yn;
  return yn;
}

int main() {
   104cc:	deffde04 	addi	sp,sp,-136

    alt_32 x_read;
    alt_32 y_read;
    alt_32 z_read;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   104d0:	2108fd04 	addi	r4,r4,9204
  // apply gain
  yn = hg*yn;
  return yn;
}

int main() {
   104d4:	dfc02115 	stw	ra,132(sp)
   104d8:	dd402015 	stw	r21,128(sp)
   104dc:	dd001f15 	stw	r20,124(sp)
   104e0:	dcc01e15 	stw	r19,120(sp)
   104e4:	dc801d15 	stw	r18,116(sp)
   104e8:	dc401c15 	stw	r17,112(sp)
   104ec:	dc001b15 	stw	r16,108(sp)

    alt_32 x_read;
    alt_32 y_read;
    alt_32 z_read;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   104f0:	0011f840 	call	11f84 <alt_up_accelerometer_spi_open_dev>
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   104f4:	10009e26 	beq	r2,zero,10770 <main+0x2a8>
        return 1;
    }

    ///%switches and buttons initialisation%///
    timer_init(sys_timer_isr);
   104f8:	01000074 	movhi	r4,1
   104fc:	21006f04 	addi	r4,r4,444
   10500:	1023883a 	mov	r17,r2
   10504:	00102c00 	call	102c0 <timer_init>
    int button_datain;
    int switch_datain;
    char response[100] = "";
   10508:	01801804 	movi	r6,96
   1050c:	000b883a 	mov	r5,zero
   10510:	d9000104 	addi	r4,sp,4

    ///Code///
    while (1) {

    	///Switches code///
     	switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   10514:	048000b4 	movhi	r18,2
        ////////////////////////



        //////send button///////
        button_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   10518:	04c000b4 	movhi	r19,2
		if(button_datain &= 0b0000000001){
			int i = 0;
			while (response[i] != '\0') {
				IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, response[i]);
   1051c:	050000b4 	movhi	r20,2

    ///%switches and buttons initialisation%///
    timer_init(sys_timer_isr);
    int button_datain;
    int switch_datain;
    char response[100] = "";
   10520:	d8000015 	stw	zero,0(sp)

    ///Code///
    while (1) {

    	///Switches code///
     	switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   10524:	94842804 	addi	r18,r18,4256

    ///%switches and buttons initialisation%///
    timer_init(sys_timer_isr);
    int button_datain;
    int switch_datain;
    char response[100] = "";
   10528:	00112b00 	call	112b0 <memset>
        ////////////////////////



        //////send button///////
        button_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   1052c:	9cc42c04 	addi	r19,r19,4272
		if(button_datain &= 0b0000000001){
			int i = 0;
			while (response[i] != '\0') {
				IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, response[i]);
   10530:	a5040104 	addi	r20,r20,4100

    ///Code///
    while (1) {

    	///Switches code///
     	switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   10534:	90800037 	ldwio	r2,0(r18)
   10538:	010000b4 	movhi	r4,2
    	switch_datain &= (0b1111111111);
   1053c:	1080ffcc 	andi	r2,r2,1023
   10540:	21042804 	addi	r4,r4,4256

    	if(switch_datain != 0){
   10544:	10001726 	beq	r2,zero,105a4 <main+0xdc>
			flicked_switch = switch_datain;
			while(switch_datain != 0){
				//printf("here \n");
				switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   10548:	20c00037 	ldwio	r3,0(r4)
     	switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
    	switch_datain &= (0b1111111111);

    	if(switch_datain != 0){
			flicked_switch = switch_datain;
			while(switch_datain != 0){
   1054c:	18c0ffcc 	andi	r3,r3,1023
   10550:	183ffd1e 	bne	r3,zero,10548 <__alt_data_end+0xffff0548>
				//printf("here \n");
				switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
				switch_datain &= (0b1111111111);
			}

			if(flicked_switch == 1){
   10554:	00c00044 	movi	r3,1
   10558:	10c0031e 	bne	r2,r3,10568 <main+0xa0>
				strcat(response,"1");
   1055c:	01400074 	movhi	r5,1
   10560:	29490304 	addi	r5,r5,9228
   10564:	00000906 	br	1058c <main+0xc4>
				printf("\nResponse: %s\n", response);
			}
			else if(flicked_switch == 2){
   10568:	00c00084 	movi	r3,2
   1056c:	10c0031e 	bne	r2,r3,1057c <main+0xb4>
				strcat(response,"2");
   10570:	01400074 	movhi	r5,1
   10574:	29490804 	addi	r5,r5,9248
   10578:	00000406 	br	1058c <main+0xc4>
				printf("\nResponse: %s\n", response);
			}
			else if(flicked_switch == 4){
   1057c:	00c00104 	movi	r3,4
   10580:	10c0081e 	bne	r2,r3,105a4 <main+0xdc>
				strcat(response,"3");
   10584:	01400074 	movhi	r5,1
   10588:	29490904 	addi	r5,r5,9252
   1058c:	d809883a 	mov	r4,sp
   10590:	00113ec0 	call	113ec <strcat>
				printf("\nResponse: %s\n", response);
   10594:	01000074 	movhi	r4,1
   10598:	d80b883a 	mov	r5,sp
   1059c:	21090404 	addi	r4,r4,9232
   105a0:	001130c0 	call	1130c <printf>
		}

    	////Accelerometer code//////

    	clock_t exec_t1, exec_t2;
    	exec_t1 = times(NULL);
   105a4:	0009883a 	mov	r4,zero
   105a8:	0011e5c0 	call	11e5c <times>

        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   105ac:	d9401a04 	addi	r5,sp,104
   105b0:	8809883a 	mov	r4,r17
   105b4:	0011fdc0 	call	11fdc <alt_up_accelerometer_spi_read_x_axis>
        alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
   105b8:	d9401904 	addi	r5,sp,100
   105bc:	8809883a 	mov	r4,r17
   105c0:	00120340 	call	12034 <alt_up_accelerometer_spi_read_y_axis>
        // alt_up_accelerometer_spi_read_z_axis(acc_dev, & z_read);
        alt_32 FIR_out[3];
        FIR_out[0] = FIR(x_read);
   105c4:	d9001a17 	ldw	r4,104(sp)
   105c8:	00103300 	call	10330 <FIR>
        //printf("FIR out y = %d \n", FIR_out[1]);
        //printf("FIR out z = %d \n", FIR_out[2]);

        //Left & Right//

        if(FIR_out[0] < RIGHTLIM){
   105cc:	00ffda84 	movi	r3,-150
        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
        alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
        // alt_up_accelerometer_spi_read_z_axis(acc_dev, & z_read);
        alt_32 FIR_out[3];
        FIR_out[0] = FIR(x_read);
        FIR_out[1] = y_read;
   105d0:	dc001917 	ldw	r16,100(sp)
        //printf("FIR out y = %d \n", FIR_out[1]);
        //printf("FIR out z = %d \n", FIR_out[2]);

        //Left & Right//

        if(FIR_out[0] < RIGHTLIM){
   105d4:	10c0060e 	bge	r2,r3,105f0 <main+0x128>
    * led = (8 >> val) | (8 << (8 - val));
    * level = (acc_read >> 1) & 0x1f;
}

int is_flat(alt_32 reading){
    if((reading < -60) || (reading > 60)){
   105d8:	05401e04 	movi	r21,120
   105dc:	10800f04 	addi	r2,r2,60
   105e0:	a8804d36 	bltu	r21,r2,10718 <main+0x250>
        if(FIR_out[0] < RIGHTLIM){
            while(is_flat(FIR_out[0]) == 0){
            	alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
            	FIR_out[0] = FIR(x_read);
            }
            strcat(response, "R");
   105e4:	01400074 	movhi	r5,1
   105e8:	29491204 	addi	r5,r5,9288
   105ec:	00000706 	br	1060c <main+0x144>
            printf("\nResponse: %s\n", response);

        }else if(FIR_out[0] > LEFTLIM){
   105f0:	00c02584 	movi	r3,150
   105f4:	18800b0e 	bge	r3,r2,10624 <main+0x15c>
    * led = (8 >> val) | (8 << (8 - val));
    * level = (acc_read >> 1) & 0x1f;
}

int is_flat(alt_32 reading){
    if((reading < -60) || (reading > 60)){
   105f8:	05401e04 	movi	r21,120
   105fc:	10800f04 	addi	r2,r2,60
   10600:	a8804b36 	bltu	r21,r2,10730 <main+0x268>
        }else if(FIR_out[0] > LEFTLIM){
            while(is_flat(FIR_out[0]) == 0){
            	alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
            	FIR_out[0] = FIR(x_read);
            }
            strcat(response, "L");
   10604:	01400074 	movhi	r5,1
   10608:	29491304 	addi	r5,r5,9292
   1060c:	d809883a 	mov	r4,sp
   10610:	00113ec0 	call	113ec <strcat>
            printf("\nResponse: %s\n", response);
   10614:	01000074 	movhi	r4,1
   10618:	d80b883a 	mov	r5,sp
   1061c:	21090404 	addi	r4,r4,9232
   10620:	001130c0 	call	1130c <printf>
        }

        //Forward & Backward//

        if(FIR_out[1] < FORWARDLIM){
   10624:	00bfe204 	movi	r2,-120
   10628:	8080060e 	bge	r16,r2,10644 <main+0x17c>
    * led = (8 >> val) | (8 << (8 - val));
    * level = (acc_read >> 1) & 0x1f;
}

int is_flat(alt_32 reading){
    if((reading < -60) || (reading > 60)){
   1062c:	05401e04 	movi	r21,120
   10630:	84000f04 	addi	r16,r16,60
   10634:	ac004436 	bltu	r21,r16,10748 <main+0x280>
        if(FIR_out[1] < FORWARDLIM){
			while(is_flat(FIR_out[1]) == 0){
				alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
				FIR_out[1] = y_read;
			}
			strcat(response, "F");
   10638:	01400074 	movhi	r5,1
   1063c:	29491404 	addi	r5,r5,9296
   10640:	00000706 	br	10660 <main+0x198>
            printf("\nResponse: %s\n", response);

		}else if(FIR_out[1] > BACKWARDLIM){
   10644:	00801e04 	movi	r2,120
   10648:	14000b0e 	bge	r2,r16,10678 <main+0x1b0>
    * led = (8 >> val) | (8 << (8 - val));
    * level = (acc_read >> 1) & 0x1f;
}

int is_flat(alt_32 reading){
    if((reading < -60) || (reading > 60)){
   1064c:	102b883a 	mov	r21,r2
   10650:	84000f04 	addi	r16,r16,60
   10654:	ac004136 	bltu	r21,r16,1075c <main+0x294>
		}else if(FIR_out[1] > BACKWARDLIM){
			while(is_flat(FIR_out[1]) == 0){
				alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
				FIR_out[1] = y_read;
			}
			strcat(response, "B");
   10658:	01400074 	movhi	r5,1
   1065c:	29491504 	addi	r5,r5,9300
   10660:	d809883a 	mov	r4,sp
   10664:	00113ec0 	call	113ec <strcat>
            printf("\nResponse: %s\n", response);
   10668:	01000074 	movhi	r4,1
   1066c:	d80b883a 	mov	r5,sp
   10670:	21090404 	addi	r4,r4,9232
   10674:	001130c0 	call	1130c <printf>
        ////////////////////////



        //////send button///////
        button_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   10678:	98800037 	ldwio	r2,0(r19)
   1067c:	0084303a 	nor	r2,zero,r2
		if(button_datain &= 0b0000000001){
   10680:	1080004c 	andi	r2,r2,1
   10684:	10000d26 	beq	r2,zero,106bc <main+0x1f4>
   10688:	0021883a 	mov	r16,zero
			int i = 0;
			while (response[i] != '\0') {
   1068c:	dc05883a 	add	r2,sp,r16
   10690:	10800007 	ldb	r2,0(r2)
   10694:	10000526 	beq	r2,zero,106ac <main+0x1e4>
				IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, response[i]);
   10698:	a0800035 	stwio	r2,0(r20)
				i++;
				usleep(30000) ;
   1069c:	011d4c04 	movi	r4,30000
        button_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
		if(button_datain &= 0b0000000001){
			int i = 0;
			while (response[i] != '\0') {
				IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, response[i]);
				i++;
   106a0:	84000044 	addi	r16,r16,1
				usleep(30000) ;
   106a4:	0011ebc0 	call	11ebc <usleep>
   106a8:	003ff806 	br	1068c <__alt_data_end+0xffff068c>
			}
			printf("\nSending: %s\n", response);
   106ac:	01000074 	movhi	r4,1
   106b0:	d80b883a 	mov	r5,sp
   106b4:	21090a04 	addi	r4,r4,9256
   106b8:	001130c0 	call	1130c <printf>
		}
		//receive button
		button_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   106bc:	008000b4 	movhi	r2,2
   106c0:	10842c04 	addi	r2,r2,4272
   106c4:	10800037 	ldwio	r2,0(r2)
   106c8:	0084303a 	nor	r2,zero,r2
		if(button_datain &= 0b0000000010){
   106cc:	1080008c 	andi	r2,r2,2
   106d0:	10000a26 	beq	r2,zero,106fc <main+0x234>
			//reset response
			memset(response,0,strlen(response));
   106d4:	d809883a 	mov	r4,sp
   106d8:	00114280 	call	11428 <strlen>
   106dc:	d809883a 	mov	r4,sp
   106e0:	100d883a 	mov	r6,r2
   106e4:	000b883a 	mov	r5,zero
   106e8:	00112b00 	call	112b0 <memset>
			printf("Resetting...\n");
   106ec:	01000074 	movhi	r4,1
   106f0:	21090e04 	addi	r4,r4,9272
   106f4:	00113d80 	call	113d8 <puts>
   106f8:	00000206 	br	10704 <main+0x23c>
		}
		else {
			usleep(50000);
   106fc:	0130d414 	movui	r4,50000
   10700:	0011ebc0 	call	11ebc <usleep>
		}

        //printf("<-> %c <->", response[100]);
        convert_read(x_read, & level, & led);
   10704:	d9001a17 	ldw	r4,104(sp)
   10708:	d1a07804 	addi	r6,gp,-32288
   1070c:	d1607904 	addi	r5,gp,-32284
   10710:	00102800 	call	10280 <convert_read>



    }
   10714:	003f8706 	br	10534 <__alt_data_end+0xffff0534>

        //Left & Right//

        if(FIR_out[0] < RIGHTLIM){
            while(is_flat(FIR_out[0]) == 0){
            	alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   10718:	8809883a 	mov	r4,r17
   1071c:	d9401a04 	addi	r5,sp,104
   10720:	0011fdc0 	call	11fdc <alt_up_accelerometer_spi_read_x_axis>
            	FIR_out[0] = FIR(x_read);
   10724:	d9001a17 	ldw	r4,104(sp)
   10728:	00103300 	call	10330 <FIR>
   1072c:	003fab06 	br	105dc <__alt_data_end+0xffff05dc>
            strcat(response, "R");
            printf("\nResponse: %s\n", response);

        }else if(FIR_out[0] > LEFTLIM){
            while(is_flat(FIR_out[0]) == 0){
            	alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   10730:	8809883a 	mov	r4,r17
   10734:	d9401a04 	addi	r5,sp,104
   10738:	0011fdc0 	call	11fdc <alt_up_accelerometer_spi_read_x_axis>
            	FIR_out[0] = FIR(x_read);
   1073c:	d9001a17 	ldw	r4,104(sp)
   10740:	00103300 	call	10330 <FIR>
   10744:	003fad06 	br	105fc <__alt_data_end+0xffff05fc>

        //Forward & Backward//

        if(FIR_out[1] < FORWARDLIM){
			while(is_flat(FIR_out[1]) == 0){
				alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
   10748:	d9401904 	addi	r5,sp,100
   1074c:	8809883a 	mov	r4,r17
   10750:	00120340 	call	12034 <alt_up_accelerometer_spi_read_y_axis>
				FIR_out[1] = y_read;
   10754:	dc001917 	ldw	r16,100(sp)
   10758:	003fb506 	br	10630 <__alt_data_end+0xffff0630>
			strcat(response, "F");
            printf("\nResponse: %s\n", response);

		}else if(FIR_out[1] > BACKWARDLIM){
			while(is_flat(FIR_out[1]) == 0){
				alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
   1075c:	d9401904 	addi	r5,sp,100
   10760:	8809883a 	mov	r4,r17
   10764:	00120340 	call	12034 <alt_up_accelerometer_spi_read_y_axis>
				FIR_out[1] = y_read;
   10768:	dc001917 	ldw	r16,100(sp)
   1076c:	003fb806 	br	10650 <__alt_data_end+0xffff0650>


    }

    return 0;
}
   10770:	00800044 	movi	r2,1
   10774:	dfc02117 	ldw	ra,132(sp)
   10778:	dd402017 	ldw	r21,128(sp)
   1077c:	dd001f17 	ldw	r20,124(sp)
   10780:	dcc01e17 	ldw	r19,120(sp)
   10784:	dc801d17 	ldw	r18,116(sp)
   10788:	dc401c17 	ldw	r17,112(sp)
   1078c:	dc001b17 	ldw	r16,108(sp)
   10790:	dec02204 	addi	sp,sp,136
   10794:	f800283a 	ret

00010798 <__addsf3>:
   10798:	defffc04 	addi	sp,sp,-16
   1079c:	2004d7fa 	srli	r2,r4,31
   107a0:	280cd5fa 	srli	r6,r5,23
   107a4:	dc000015 	stw	r16,0(sp)
   107a8:	00c02034 	movhi	r3,128
   107ac:	2020d5fa 	srli	r16,r4,23
   107b0:	280ed7fa 	srli	r7,r5,31
   107b4:	18ffffc4 	addi	r3,r3,-1
   107b8:	dc400115 	stw	r17,4(sp)
   107bc:	1908703a 	and	r4,r3,r4
   107c0:	194a703a 	and	r5,r3,r5
   107c4:	dfc00315 	stw	ra,12(sp)
   107c8:	dc800215 	stw	r18,8(sp)
   107cc:	14403fcc 	andi	r17,r2,255
   107d0:	84003fcc 	andi	r16,r16,255
   107d4:	200890fa 	slli	r4,r4,3
   107d8:	31803fcc 	andi	r6,r6,255
   107dc:	280a90fa 	slli	r5,r5,3
   107e0:	89c05026 	beq	r17,r7,10924 <__addsf3+0x18c>
   107e4:	8185c83a 	sub	r2,r16,r6
   107e8:	00807a0e 	bge	zero,r2,109d4 <__addsf3+0x23c>
   107ec:	30001e1e 	bne	r6,zero,10868 <__addsf3+0xd0>
   107f0:	28006d1e 	bne	r5,zero,109a8 <__addsf3+0x210>
   107f4:	208001cc 	andi	r2,r4,7
   107f8:	10000426 	beq	r2,zero,1080c <__addsf3+0x74>
   107fc:	208003cc 	andi	r2,r4,15
   10800:	00c00104 	movi	r3,4
   10804:	10c00126 	beq	r2,r3,1080c <__addsf3+0x74>
   10808:	20c9883a 	add	r4,r4,r3
   1080c:	2081002c 	andhi	r2,r4,1024
   10810:	10003926 	beq	r2,zero,108f8 <__addsf3+0x160>
   10814:	84000044 	addi	r16,r16,1
   10818:	00803fc4 	movi	r2,255
   1081c:	80807826 	beq	r16,r2,10a00 <__addsf3+0x268>
   10820:	200891ba 	slli	r4,r4,6
   10824:	8805883a 	mov	r2,r17
   10828:	2008d27a 	srli	r4,r4,9
   1082c:	84003fcc 	andi	r16,r16,255
   10830:	800695fa 	slli	r3,r16,23
   10834:	10803fcc 	andi	r2,r2,255
   10838:	04002034 	movhi	r16,128
   1083c:	843fffc4 	addi	r16,r16,-1
   10840:	100497fa 	slli	r2,r2,31
   10844:	2408703a 	and	r4,r4,r16
   10848:	20e0b03a 	or	r16,r4,r3
   1084c:	8084b03a 	or	r2,r16,r2
   10850:	dfc00317 	ldw	ra,12(sp)
   10854:	dc800217 	ldw	r18,8(sp)
   10858:	dc400117 	ldw	r17,4(sp)
   1085c:	dc000017 	ldw	r16,0(sp)
   10860:	dec00404 	addi	sp,sp,16
   10864:	f800283a 	ret
   10868:	00c03fc4 	movi	r3,255
   1086c:	80ffe126 	beq	r16,r3,107f4 <__alt_data_end+0xffff07f4>
   10870:	29410034 	orhi	r5,r5,1024
   10874:	00c006c4 	movi	r3,27
   10878:	18807516 	blt	r3,r2,10a50 <__addsf3+0x2b8>
   1087c:	00c00804 	movi	r3,32
   10880:	1887c83a 	sub	r3,r3,r2
   10884:	28c6983a 	sll	r3,r5,r3
   10888:	288ad83a 	srl	r5,r5,r2
   1088c:	1804c03a 	cmpne	r2,r3,zero
   10890:	288ab03a 	or	r5,r5,r2
   10894:	2149c83a 	sub	r4,r4,r5
   10898:	2081002c 	andhi	r2,r4,1024
   1089c:	10001426 	beq	r2,zero,108f0 <__addsf3+0x158>
   108a0:	04810034 	movhi	r18,1024
   108a4:	94bfffc4 	addi	r18,r18,-1
   108a8:	24a4703a 	and	r18,r4,r18
   108ac:	9009883a 	mov	r4,r18
   108b0:	00112240 	call	11224 <__clzsi2>
   108b4:	10bffec4 	addi	r2,r2,-5
   108b8:	90a4983a 	sll	r18,r18,r2
   108bc:	14005416 	blt	r2,r16,10a10 <__addsf3+0x278>
   108c0:	1405c83a 	sub	r2,r2,r16
   108c4:	11000044 	addi	r4,r2,1
   108c8:	00800804 	movi	r2,32
   108cc:	1105c83a 	sub	r2,r2,r4
   108d0:	9084983a 	sll	r2,r18,r2
   108d4:	9124d83a 	srl	r18,r18,r4
   108d8:	0021883a 	mov	r16,zero
   108dc:	1008c03a 	cmpne	r4,r2,zero
   108e0:	9108b03a 	or	r4,r18,r4
   108e4:	003fc306 	br	107f4 <__alt_data_end+0xffff07f4>
   108e8:	1000db26 	beq	r2,zero,10c58 <__addsf3+0x4c0>
   108ec:	1009883a 	mov	r4,r2
   108f0:	208001cc 	andi	r2,r4,7
   108f4:	103fc11e 	bne	r2,zero,107fc <__alt_data_end+0xffff07fc>
   108f8:	2006d0fa 	srli	r3,r4,3
   108fc:	01003fc4 	movi	r4,255
   10900:	8805883a 	mov	r2,r17
   10904:	8100241e 	bne	r16,r4,10998 <__addsf3+0x200>
   10908:	18006e26 	beq	r3,zero,10ac4 <__addsf3+0x32c>
   1090c:	19001034 	orhi	r4,r3,64
   10910:	00c02034 	movhi	r3,128
   10914:	18ffffc4 	addi	r3,r3,-1
   10918:	043fffc4 	movi	r16,-1
   1091c:	20c8703a 	and	r4,r4,r3
   10920:	003fc206 	br	1082c <__alt_data_end+0xffff082c>
   10924:	8187c83a 	sub	r3,r16,r6
   10928:	00c03e0e 	bge	zero,r3,10a24 <__addsf3+0x28c>
   1092c:	30002326 	beq	r6,zero,109bc <__addsf3+0x224>
   10930:	01803fc4 	movi	r6,255
   10934:	81bfaf26 	beq	r16,r6,107f4 <__alt_data_end+0xffff07f4>
   10938:	29410034 	orhi	r5,r5,1024
   1093c:	018006c4 	movi	r6,27
   10940:	30c07416 	blt	r6,r3,10b14 <__addsf3+0x37c>
   10944:	01800804 	movi	r6,32
   10948:	30cdc83a 	sub	r6,r6,r3
   1094c:	298c983a 	sll	r6,r5,r6
   10950:	28cad83a 	srl	r5,r5,r3
   10954:	3006c03a 	cmpne	r3,r6,zero
   10958:	28cab03a 	or	r5,r5,r3
   1095c:	2149883a 	add	r4,r4,r5
   10960:	20c1002c 	andhi	r3,r4,1024
   10964:	183fe226 	beq	r3,zero,108f0 <__alt_data_end+0xffff08f0>
   10968:	84000044 	addi	r16,r16,1
   1096c:	00c03fc4 	movi	r3,255
   10970:	80c05426 	beq	r16,r3,10ac4 <__addsf3+0x32c>
   10974:	00bf0034 	movhi	r2,64512
   10978:	10bfffc4 	addi	r2,r2,-1
   1097c:	20c0004c 	andi	r3,r4,1
   10980:	2088703a 	and	r4,r4,r2
   10984:	2008d07a 	srli	r4,r4,1
   10988:	20c8b03a 	or	r4,r4,r3
   1098c:	003f9906 	br	107f4 <__alt_data_end+0xffff07f4>
   10990:	0007883a 	mov	r3,zero
   10994:	0005883a 	mov	r2,zero
   10998:	01002034 	movhi	r4,128
   1099c:	213fffc4 	addi	r4,r4,-1
   109a0:	1908703a 	and	r4,r3,r4
   109a4:	003fa106 	br	1082c <__alt_data_end+0xffff082c>
   109a8:	10bfffc4 	addi	r2,r2,-1
   109ac:	103fb926 	beq	r2,zero,10894 <__alt_data_end+0xffff0894>
   109b0:	00c03fc4 	movi	r3,255
   109b4:	80ffaf1e 	bne	r16,r3,10874 <__alt_data_end+0xffff0874>
   109b8:	003f8e06 	br	107f4 <__alt_data_end+0xffff07f4>
   109bc:	283f8d26 	beq	r5,zero,107f4 <__alt_data_end+0xffff07f4>
   109c0:	18ffffc4 	addi	r3,r3,-1
   109c4:	183fe526 	beq	r3,zero,1095c <__alt_data_end+0xffff095c>
   109c8:	01803fc4 	movi	r6,255
   109cc:	81bfdb1e 	bne	r16,r6,1093c <__alt_data_end+0xffff093c>
   109d0:	003f8806 	br	107f4 <__alt_data_end+0xffff07f4>
   109d4:	1000201e 	bne	r2,zero,10a58 <__addsf3+0x2c0>
   109d8:	80800044 	addi	r2,r16,1
   109dc:	10803fcc 	andi	r2,r2,255
   109e0:	01800044 	movi	r6,1
   109e4:	3080450e 	bge	r6,r2,10afc <__addsf3+0x364>
   109e8:	2165c83a 	sub	r18,r4,r5
   109ec:	90c1002c 	andhi	r3,r18,1024
   109f0:	18002b26 	beq	r3,zero,10aa0 <__addsf3+0x308>
   109f4:	2925c83a 	sub	r18,r5,r4
   109f8:	3823883a 	mov	r17,r7
   109fc:	003fab06 	br	108ac <__alt_data_end+0xffff08ac>
   10a00:	8805883a 	mov	r2,r17
   10a04:	043fffc4 	movi	r16,-1
   10a08:	0009883a 	mov	r4,zero
   10a0c:	003f8706 	br	1082c <__alt_data_end+0xffff082c>
   10a10:	013f0034 	movhi	r4,64512
   10a14:	213fffc4 	addi	r4,r4,-1
   10a18:	80a1c83a 	sub	r16,r16,r2
   10a1c:	9108703a 	and	r4,r18,r4
   10a20:	003f7406 	br	107f4 <__alt_data_end+0xffff07f4>
   10a24:	1800411e 	bne	r3,zero,10b2c <__addsf3+0x394>
   10a28:	80c00044 	addi	r3,r16,1
   10a2c:	19c03fcc 	andi	r7,r3,255
   10a30:	01800044 	movi	r6,1
   10a34:	31c0260e 	bge	r6,r7,10ad0 <__addsf3+0x338>
   10a38:	01803fc4 	movi	r6,255
   10a3c:	19802126 	beq	r3,r6,10ac4 <__addsf3+0x32c>
   10a40:	2149883a 	add	r4,r4,r5
   10a44:	2008d07a 	srli	r4,r4,1
   10a48:	1821883a 	mov	r16,r3
   10a4c:	003f6906 	br	107f4 <__alt_data_end+0xffff07f4>
   10a50:	01400044 	movi	r5,1
   10a54:	003f8f06 	br	10894 <__alt_data_end+0xffff0894>
   10a58:	8000151e 	bne	r16,zero,10ab0 <__addsf3+0x318>
   10a5c:	20002f26 	beq	r4,zero,10b1c <__addsf3+0x384>
   10a60:	0084303a 	nor	r2,zero,r2
   10a64:	10000a26 	beq	r2,zero,10a90 <__addsf3+0x2f8>
   10a68:	00c03fc4 	movi	r3,255
   10a6c:	30c02b26 	beq	r6,r3,10b1c <__addsf3+0x384>
   10a70:	00c006c4 	movi	r3,27
   10a74:	18806d16 	blt	r3,r2,10c2c <__addsf3+0x494>
   10a78:	00c00804 	movi	r3,32
   10a7c:	1887c83a 	sub	r3,r3,r2
   10a80:	20c6983a 	sll	r3,r4,r3
   10a84:	2084d83a 	srl	r2,r4,r2
   10a88:	1808c03a 	cmpne	r4,r3,zero
   10a8c:	1108b03a 	or	r4,r2,r4
   10a90:	2909c83a 	sub	r4,r5,r4
   10a94:	3021883a 	mov	r16,r6
   10a98:	3823883a 	mov	r17,r7
   10a9c:	003f7e06 	br	10898 <__alt_data_end+0xffff0898>
   10aa0:	903f821e 	bne	r18,zero,108ac <__alt_data_end+0xffff08ac>
   10aa4:	0005883a 	mov	r2,zero
   10aa8:	0021883a 	mov	r16,zero
   10aac:	003fba06 	br	10998 <__alt_data_end+0xffff0998>
   10ab0:	00c03fc4 	movi	r3,255
   10ab4:	30c01926 	beq	r6,r3,10b1c <__addsf3+0x384>
   10ab8:	0085c83a 	sub	r2,zero,r2
   10abc:	21010034 	orhi	r4,r4,1024
   10ac0:	003feb06 	br	10a70 <__alt_data_end+0xffff0a70>
   10ac4:	043fffc4 	movi	r16,-1
   10ac8:	0009883a 	mov	r4,zero
   10acc:	003f5706 	br	1082c <__alt_data_end+0xffff082c>
   10ad0:	80004a1e 	bne	r16,zero,10bfc <__addsf3+0x464>
   10ad4:	20005926 	beq	r4,zero,10c3c <__addsf3+0x4a4>
   10ad8:	283f4626 	beq	r5,zero,107f4 <__alt_data_end+0xffff07f4>
   10adc:	2149883a 	add	r4,r4,r5
   10ae0:	2081002c 	andhi	r2,r4,1024
   10ae4:	103f8226 	beq	r2,zero,108f0 <__alt_data_end+0xffff08f0>
   10ae8:	00bf0034 	movhi	r2,64512
   10aec:	10bfffc4 	addi	r2,r2,-1
   10af0:	3021883a 	mov	r16,r6
   10af4:	2088703a 	and	r4,r4,r2
   10af8:	003f3e06 	br	107f4 <__alt_data_end+0xffff07f4>
   10afc:	8000121e 	bne	r16,zero,10b48 <__addsf3+0x3b0>
   10b00:	2000261e 	bne	r4,zero,10b9c <__addsf3+0x404>
   10b04:	283fa226 	beq	r5,zero,10990 <__alt_data_end+0xffff0990>
   10b08:	2809883a 	mov	r4,r5
   10b0c:	3823883a 	mov	r17,r7
   10b10:	003f3806 	br	107f4 <__alt_data_end+0xffff07f4>
   10b14:	01400044 	movi	r5,1
   10b18:	003f9006 	br	1095c <__alt_data_end+0xffff095c>
   10b1c:	2809883a 	mov	r4,r5
   10b20:	3021883a 	mov	r16,r6
   10b24:	3823883a 	mov	r17,r7
   10b28:	003f3206 	br	107f4 <__alt_data_end+0xffff07f4>
   10b2c:	80000c1e 	bne	r16,zero,10b60 <__addsf3+0x3c8>
   10b30:	20002f26 	beq	r4,zero,10bf0 <__addsf3+0x458>
   10b34:	00c6303a 	nor	r3,zero,r3
   10b38:	18002b1e 	bne	r3,zero,10be8 <__addsf3+0x450>
   10b3c:	2149883a 	add	r4,r4,r5
   10b40:	3021883a 	mov	r16,r6
   10b44:	003f8606 	br	10960 <__alt_data_end+0xffff0960>
   10b48:	20001b1e 	bne	r4,zero,10bb8 <__addsf3+0x420>
   10b4c:	28003926 	beq	r5,zero,10c34 <__addsf3+0x49c>
   10b50:	2809883a 	mov	r4,r5
   10b54:	3823883a 	mov	r17,r7
   10b58:	04003fc4 	movi	r16,255
   10b5c:	003f2506 	br	107f4 <__alt_data_end+0xffff07f4>
   10b60:	01c03fc4 	movi	r7,255
   10b64:	31c02226 	beq	r6,r7,10bf0 <__addsf3+0x458>
   10b68:	00c7c83a 	sub	r3,zero,r3
   10b6c:	21010034 	orhi	r4,r4,1024
   10b70:	01c006c4 	movi	r7,27
   10b74:	38c03616 	blt	r7,r3,10c50 <__addsf3+0x4b8>
   10b78:	01c00804 	movi	r7,32
   10b7c:	38cfc83a 	sub	r7,r7,r3
   10b80:	21ce983a 	sll	r7,r4,r7
   10b84:	20c6d83a 	srl	r3,r4,r3
   10b88:	3808c03a 	cmpne	r4,r7,zero
   10b8c:	1906b03a 	or	r3,r3,r4
   10b90:	1949883a 	add	r4,r3,r5
   10b94:	3021883a 	mov	r16,r6
   10b98:	003f7106 	br	10960 <__alt_data_end+0xffff0960>
   10b9c:	283f1526 	beq	r5,zero,107f4 <__alt_data_end+0xffff07f4>
   10ba0:	2145c83a 	sub	r2,r4,r5
   10ba4:	10c1002c 	andhi	r3,r2,1024
   10ba8:	183f4f26 	beq	r3,zero,108e8 <__alt_data_end+0xffff08e8>
   10bac:	2909c83a 	sub	r4,r5,r4
   10bb0:	3823883a 	mov	r17,r7
   10bb4:	003f0f06 	br	107f4 <__alt_data_end+0xffff07f4>
   10bb8:	28001a26 	beq	r5,zero,10c24 <__addsf3+0x48c>
   10bbc:	2008d0fa 	srli	r4,r4,3
   10bc0:	2080102c 	andhi	r2,r4,64
   10bc4:	10000526 	beq	r2,zero,10bdc <__addsf3+0x444>
   10bc8:	280ad0fa 	srli	r5,r5,3
   10bcc:	2880102c 	andhi	r2,r5,64
   10bd0:	1000021e 	bne	r2,zero,10bdc <__addsf3+0x444>
   10bd4:	2809883a 	mov	r4,r5
   10bd8:	3823883a 	mov	r17,r7
   10bdc:	200890fa 	slli	r4,r4,3
   10be0:	04003fc4 	movi	r16,255
   10be4:	003f0306 	br	107f4 <__alt_data_end+0xffff07f4>
   10be8:	01c03fc4 	movi	r7,255
   10bec:	31ffe01e 	bne	r6,r7,10b70 <__alt_data_end+0xffff0b70>
   10bf0:	2809883a 	mov	r4,r5
   10bf4:	3021883a 	mov	r16,r6
   10bf8:	003efe06 	br	107f4 <__alt_data_end+0xffff07f4>
   10bfc:	20001126 	beq	r4,zero,10c44 <__addsf3+0x4ac>
   10c00:	28000826 	beq	r5,zero,10c24 <__addsf3+0x48c>
   10c04:	2008d0fa 	srli	r4,r4,3
   10c08:	2080102c 	andhi	r2,r4,64
   10c0c:	103ff326 	beq	r2,zero,10bdc <__alt_data_end+0xffff0bdc>
   10c10:	280ad0fa 	srli	r5,r5,3
   10c14:	2880102c 	andhi	r2,r5,64
   10c18:	103ff01e 	bne	r2,zero,10bdc <__alt_data_end+0xffff0bdc>
   10c1c:	2809883a 	mov	r4,r5
   10c20:	003fee06 	br	10bdc <__alt_data_end+0xffff0bdc>
   10c24:	04003fc4 	movi	r16,255
   10c28:	003ef206 	br	107f4 <__alt_data_end+0xffff07f4>
   10c2c:	01000044 	movi	r4,1
   10c30:	003f9706 	br	10a90 <__alt_data_end+0xffff0a90>
   10c34:	0005883a 	mov	r2,zero
   10c38:	003f3406 	br	1090c <__alt_data_end+0xffff090c>
   10c3c:	2809883a 	mov	r4,r5
   10c40:	003eec06 	br	107f4 <__alt_data_end+0xffff07f4>
   10c44:	2809883a 	mov	r4,r5
   10c48:	04003fc4 	movi	r16,255
   10c4c:	003ee906 	br	107f4 <__alt_data_end+0xffff07f4>
   10c50:	00c00044 	movi	r3,1
   10c54:	003fce06 	br	10b90 <__alt_data_end+0xffff0b90>
   10c58:	0005883a 	mov	r2,zero
   10c5c:	003f4e06 	br	10998 <__alt_data_end+0xffff0998>

00010c60 <__mulsf3>:
   10c60:	defff504 	addi	sp,sp,-44
   10c64:	dc000115 	stw	r16,4(sp)
   10c68:	2020d5fa 	srli	r16,r4,23
   10c6c:	dd400615 	stw	r21,24(sp)
   10c70:	202ad7fa 	srli	r21,r4,31
   10c74:	dc800315 	stw	r18,12(sp)
   10c78:	04802034 	movhi	r18,128
   10c7c:	df000915 	stw	fp,36(sp)
   10c80:	dd000515 	stw	r20,20(sp)
   10c84:	94bfffc4 	addi	r18,r18,-1
   10c88:	dfc00a15 	stw	ra,40(sp)
   10c8c:	ddc00815 	stw	r23,32(sp)
   10c90:	dd800715 	stw	r22,28(sp)
   10c94:	dcc00415 	stw	r19,16(sp)
   10c98:	dc400215 	stw	r17,8(sp)
   10c9c:	84003fcc 	andi	r16,r16,255
   10ca0:	9124703a 	and	r18,r18,r4
   10ca4:	a829883a 	mov	r20,r21
   10ca8:	af003fcc 	andi	fp,r21,255
   10cac:	80005426 	beq	r16,zero,10e00 <__mulsf3+0x1a0>
   10cb0:	00803fc4 	movi	r2,255
   10cb4:	80802f26 	beq	r16,r2,10d74 <__mulsf3+0x114>
   10cb8:	91002034 	orhi	r4,r18,128
   10cbc:	202490fa 	slli	r18,r4,3
   10cc0:	843fe044 	addi	r16,r16,-127
   10cc4:	0023883a 	mov	r17,zero
   10cc8:	002f883a 	mov	r23,zero
   10ccc:	2804d5fa 	srli	r2,r5,23
   10cd0:	282cd7fa 	srli	r22,r5,31
   10cd4:	01002034 	movhi	r4,128
   10cd8:	213fffc4 	addi	r4,r4,-1
   10cdc:	10803fcc 	andi	r2,r2,255
   10ce0:	2166703a 	and	r19,r4,r5
   10ce4:	b1803fcc 	andi	r6,r22,255
   10ce8:	10004c26 	beq	r2,zero,10e1c <__mulsf3+0x1bc>
   10cec:	00c03fc4 	movi	r3,255
   10cf0:	10c04726 	beq	r2,r3,10e10 <__mulsf3+0x1b0>
   10cf4:	99002034 	orhi	r4,r19,128
   10cf8:	202690fa 	slli	r19,r4,3
   10cfc:	10bfe044 	addi	r2,r2,-127
   10d00:	0007883a 	mov	r3,zero
   10d04:	80a1883a 	add	r16,r16,r2
   10d08:	010003c4 	movi	r4,15
   10d0c:	1c44b03a 	or	r2,r3,r17
   10d10:	b56af03a 	xor	r21,r22,r21
   10d14:	81c00044 	addi	r7,r16,1
   10d18:	20806b36 	bltu	r4,r2,10ec8 <__mulsf3+0x268>
   10d1c:	100490ba 	slli	r2,r2,2
   10d20:	01000074 	movhi	r4,1
   10d24:	21034d04 	addi	r4,r4,3380
   10d28:	1105883a 	add	r2,r2,r4
   10d2c:	10800017 	ldw	r2,0(r2)
   10d30:	1000683a 	jmp	r2
   10d34:	00010ec8 	cmpgei	zero,zero,1083
   10d38:	00010d88 	cmpgei	zero,zero,1078
   10d3c:	00010d88 	cmpgei	zero,zero,1078
   10d40:	00010d84 	movi	zero,1078
   10d44:	00010eac 	andhi	zero,zero,1082
   10d48:	00010eac 	andhi	zero,zero,1082
   10d4c:	00010e98 	cmpnei	zero,zero,1082
   10d50:	00010d84 	movi	zero,1078
   10d54:	00010eac 	andhi	zero,zero,1082
   10d58:	00010e98 	cmpnei	zero,zero,1082
   10d5c:	00010eac 	andhi	zero,zero,1082
   10d60:	00010d84 	movi	zero,1078
   10d64:	00010eb8 	rdprs	zero,zero,1082
   10d68:	00010eb8 	rdprs	zero,zero,1082
   10d6c:	00010eb8 	rdprs	zero,zero,1082
   10d70:	00010fc8 	cmpgei	zero,zero,1087
   10d74:	90003b1e 	bne	r18,zero,10e64 <__mulsf3+0x204>
   10d78:	04400204 	movi	r17,8
   10d7c:	05c00084 	movi	r23,2
   10d80:	003fd206 	br	10ccc <__alt_data_end+0xffff0ccc>
   10d84:	302b883a 	mov	r21,r6
   10d88:	00800084 	movi	r2,2
   10d8c:	18802626 	beq	r3,r2,10e28 <__mulsf3+0x1c8>
   10d90:	008000c4 	movi	r2,3
   10d94:	1880b826 	beq	r3,r2,11078 <__mulsf3+0x418>
   10d98:	00800044 	movi	r2,1
   10d9c:	1880af1e 	bne	r3,r2,1105c <__mulsf3+0x3fc>
   10da0:	a829883a 	mov	r20,r21
   10da4:	0007883a 	mov	r3,zero
   10da8:	0009883a 	mov	r4,zero
   10dac:	18803fcc 	andi	r2,r3,255
   10db0:	100695fa 	slli	r3,r2,23
   10db4:	a0803fcc 	andi	r2,r20,255
   10db8:	100a97fa 	slli	r5,r2,31
   10dbc:	00802034 	movhi	r2,128
   10dc0:	10bfffc4 	addi	r2,r2,-1
   10dc4:	2084703a 	and	r2,r4,r2
   10dc8:	10c4b03a 	or	r2,r2,r3
   10dcc:	1144b03a 	or	r2,r2,r5
   10dd0:	dfc00a17 	ldw	ra,40(sp)
   10dd4:	df000917 	ldw	fp,36(sp)
   10dd8:	ddc00817 	ldw	r23,32(sp)
   10ddc:	dd800717 	ldw	r22,28(sp)
   10de0:	dd400617 	ldw	r21,24(sp)
   10de4:	dd000517 	ldw	r20,20(sp)
   10de8:	dcc00417 	ldw	r19,16(sp)
   10dec:	dc800317 	ldw	r18,12(sp)
   10df0:	dc400217 	ldw	r17,8(sp)
   10df4:	dc000117 	ldw	r16,4(sp)
   10df8:	dec00b04 	addi	sp,sp,44
   10dfc:	f800283a 	ret
   10e00:	90000d1e 	bne	r18,zero,10e38 <__mulsf3+0x1d8>
   10e04:	04400104 	movi	r17,4
   10e08:	05c00044 	movi	r23,1
   10e0c:	003faf06 	br	10ccc <__alt_data_end+0xffff0ccc>
   10e10:	9806c03a 	cmpne	r3,r19,zero
   10e14:	18c00084 	addi	r3,r3,2
   10e18:	003fba06 	br	10d04 <__alt_data_end+0xffff0d04>
   10e1c:	9800141e 	bne	r19,zero,10e70 <__mulsf3+0x210>
   10e20:	00c00044 	movi	r3,1
   10e24:	003fb706 	br	10d04 <__alt_data_end+0xffff0d04>
   10e28:	a829883a 	mov	r20,r21
   10e2c:	00ffffc4 	movi	r3,-1
   10e30:	0009883a 	mov	r4,zero
   10e34:	003fdd06 	br	10dac <__alt_data_end+0xffff0dac>
   10e38:	9009883a 	mov	r4,r18
   10e3c:	d9400015 	stw	r5,0(sp)
   10e40:	00112240 	call	11224 <__clzsi2>
   10e44:	10fffec4 	addi	r3,r2,-5
   10e48:	10801d84 	addi	r2,r2,118
   10e4c:	90e4983a 	sll	r18,r18,r3
   10e50:	00a1c83a 	sub	r16,zero,r2
   10e54:	0023883a 	mov	r17,zero
   10e58:	002f883a 	mov	r23,zero
   10e5c:	d9400017 	ldw	r5,0(sp)
   10e60:	003f9a06 	br	10ccc <__alt_data_end+0xffff0ccc>
   10e64:	04400304 	movi	r17,12
   10e68:	05c000c4 	movi	r23,3
   10e6c:	003f9706 	br	10ccc <__alt_data_end+0xffff0ccc>
   10e70:	9809883a 	mov	r4,r19
   10e74:	d9800015 	stw	r6,0(sp)
   10e78:	00112240 	call	11224 <__clzsi2>
   10e7c:	10fffec4 	addi	r3,r2,-5
   10e80:	10801d84 	addi	r2,r2,118
   10e84:	98e6983a 	sll	r19,r19,r3
   10e88:	0085c83a 	sub	r2,zero,r2
   10e8c:	0007883a 	mov	r3,zero
   10e90:	d9800017 	ldw	r6,0(sp)
   10e94:	003f9b06 	br	10d04 <__alt_data_end+0xffff0d04>
   10e98:	01002034 	movhi	r4,128
   10e9c:	0029883a 	mov	r20,zero
   10ea0:	213fffc4 	addi	r4,r4,-1
   10ea4:	00ffffc4 	movi	r3,-1
   10ea8:	003fc006 	br	10dac <__alt_data_end+0xffff0dac>
   10eac:	9027883a 	mov	r19,r18
   10eb0:	b807883a 	mov	r3,r23
   10eb4:	003fb406 	br	10d88 <__alt_data_end+0xffff0d88>
   10eb8:	9027883a 	mov	r19,r18
   10ebc:	e02b883a 	mov	r21,fp
   10ec0:	b807883a 	mov	r3,r23
   10ec4:	003fb006 	br	10d88 <__alt_data_end+0xffff0d88>
   10ec8:	9028d43a 	srli	r20,r18,16
   10ecc:	982cd43a 	srli	r22,r19,16
   10ed0:	94bfffcc 	andi	r18,r18,65535
   10ed4:	9cffffcc 	andi	r19,r19,65535
   10ed8:	980b883a 	mov	r5,r19
   10edc:	9009883a 	mov	r4,r18
   10ee0:	d9c00015 	stw	r7,0(sp)
   10ee4:	00112880 	call	11288 <__mulsi3>
   10ee8:	a00b883a 	mov	r5,r20
   10eec:	9809883a 	mov	r4,r19
   10ef0:	1023883a 	mov	r17,r2
   10ef4:	00112880 	call	11288 <__mulsi3>
   10ef8:	a009883a 	mov	r4,r20
   10efc:	b00b883a 	mov	r5,r22
   10f00:	1027883a 	mov	r19,r2
   10f04:	00112880 	call	11288 <__mulsi3>
   10f08:	b00b883a 	mov	r5,r22
   10f0c:	9009883a 	mov	r4,r18
   10f10:	1029883a 	mov	r20,r2
   10f14:	00112880 	call	11288 <__mulsi3>
   10f18:	8806d43a 	srli	r3,r17,16
   10f1c:	14c5883a 	add	r2,r2,r19
   10f20:	d9c00017 	ldw	r7,0(sp)
   10f24:	1885883a 	add	r2,r3,r2
   10f28:	14c0022e 	bgeu	r2,r19,10f34 <__mulsf3+0x2d4>
   10f2c:	00c00074 	movhi	r3,1
   10f30:	a0e9883a 	add	r20,r20,r3
   10f34:	1026943a 	slli	r19,r2,16
   10f38:	8c7fffcc 	andi	r17,r17,65535
   10f3c:	1004d43a 	srli	r2,r2,16
   10f40:	9c63883a 	add	r17,r19,r17
   10f44:	882691ba 	slli	r19,r17,6
   10f48:	1505883a 	add	r2,r2,r20
   10f4c:	8822d6ba 	srli	r17,r17,26
   10f50:	100891ba 	slli	r4,r2,6
   10f54:	9826c03a 	cmpne	r19,r19,zero
   10f58:	9c62b03a 	or	r17,r19,r17
   10f5c:	8926b03a 	or	r19,r17,r4
   10f60:	9882002c 	andhi	r2,r19,2048
   10f64:	10000426 	beq	r2,zero,10f78 <__mulsf3+0x318>
   10f68:	9804d07a 	srli	r2,r19,1
   10f6c:	9900004c 	andi	r4,r19,1
   10f70:	3821883a 	mov	r16,r7
   10f74:	1126b03a 	or	r19,r2,r4
   10f78:	80c01fc4 	addi	r3,r16,127
   10f7c:	00c0210e 	bge	zero,r3,11004 <__mulsf3+0x3a4>
   10f80:	988001cc 	andi	r2,r19,7
   10f84:	10000426 	beq	r2,zero,10f98 <__mulsf3+0x338>
   10f88:	988003cc 	andi	r2,r19,15
   10f8c:	01000104 	movi	r4,4
   10f90:	11000126 	beq	r2,r4,10f98 <__mulsf3+0x338>
   10f94:	9927883a 	add	r19,r19,r4
   10f98:	9882002c 	andhi	r2,r19,2048
   10f9c:	10000426 	beq	r2,zero,10fb0 <__mulsf3+0x350>
   10fa0:	00be0034 	movhi	r2,63488
   10fa4:	10bfffc4 	addi	r2,r2,-1
   10fa8:	80c02004 	addi	r3,r16,128
   10fac:	98a6703a 	and	r19,r19,r2
   10fb0:	00803f84 	movi	r2,254
   10fb4:	10ff9c16 	blt	r2,r3,10e28 <__alt_data_end+0xffff0e28>
   10fb8:	980891ba 	slli	r4,r19,6
   10fbc:	a829883a 	mov	r20,r21
   10fc0:	2008d27a 	srli	r4,r4,9
   10fc4:	003f7906 	br	10dac <__alt_data_end+0xffff0dac>
   10fc8:	9080102c 	andhi	r2,r18,64
   10fcc:	10000826 	beq	r2,zero,10ff0 <__mulsf3+0x390>
   10fd0:	9880102c 	andhi	r2,r19,64
   10fd4:	1000061e 	bne	r2,zero,10ff0 <__mulsf3+0x390>
   10fd8:	00802034 	movhi	r2,128
   10fdc:	99001034 	orhi	r4,r19,64
   10fe0:	10bfffc4 	addi	r2,r2,-1
   10fe4:	b029883a 	mov	r20,r22
   10fe8:	2088703a 	and	r4,r4,r2
   10fec:	003fad06 	br	10ea4 <__alt_data_end+0xffff0ea4>
   10ff0:	00802034 	movhi	r2,128
   10ff4:	91001034 	orhi	r4,r18,64
   10ff8:	10bfffc4 	addi	r2,r2,-1
   10ffc:	2088703a 	and	r4,r4,r2
   11000:	003fa806 	br	10ea4 <__alt_data_end+0xffff0ea4>
   11004:	00800044 	movi	r2,1
   11008:	10c7c83a 	sub	r3,r2,r3
   1100c:	008006c4 	movi	r2,27
   11010:	10ff6316 	blt	r2,r3,10da0 <__alt_data_end+0xffff0da0>
   11014:	00800804 	movi	r2,32
   11018:	10c5c83a 	sub	r2,r2,r3
   1101c:	9884983a 	sll	r2,r19,r2
   11020:	98c6d83a 	srl	r3,r19,r3
   11024:	1004c03a 	cmpne	r2,r2,zero
   11028:	1884b03a 	or	r2,r3,r2
   1102c:	10c001cc 	andi	r3,r2,7
   11030:	18000426 	beq	r3,zero,11044 <__mulsf3+0x3e4>
   11034:	10c003cc 	andi	r3,r2,15
   11038:	01000104 	movi	r4,4
   1103c:	19000126 	beq	r3,r4,11044 <__mulsf3+0x3e4>
   11040:	1105883a 	add	r2,r2,r4
   11044:	10c1002c 	andhi	r3,r2,1024
   11048:	18000626 	beq	r3,zero,11064 <__mulsf3+0x404>
   1104c:	a829883a 	mov	r20,r21
   11050:	00c00044 	movi	r3,1
   11054:	0009883a 	mov	r4,zero
   11058:	003f5406 	br	10dac <__alt_data_end+0xffff0dac>
   1105c:	3821883a 	mov	r16,r7
   11060:	003fc506 	br	10f78 <__alt_data_end+0xffff0f78>
   11064:	100491ba 	slli	r2,r2,6
   11068:	a829883a 	mov	r20,r21
   1106c:	0007883a 	mov	r3,zero
   11070:	1008d27a 	srli	r4,r2,9
   11074:	003f4d06 	br	10dac <__alt_data_end+0xffff0dac>
   11078:	00802034 	movhi	r2,128
   1107c:	99001034 	orhi	r4,r19,64
   11080:	10bfffc4 	addi	r2,r2,-1
   11084:	a829883a 	mov	r20,r21
   11088:	2088703a 	and	r4,r4,r2
   1108c:	003f8506 	br	10ea4 <__alt_data_end+0xffff0ea4>

00011090 <__fixsfsi>:
   11090:	200ad5fa 	srli	r5,r4,23
   11094:	00c02034 	movhi	r3,128
   11098:	18ffffc4 	addi	r3,r3,-1
   1109c:	29403fcc 	andi	r5,r5,255
   110a0:	00801f84 	movi	r2,126
   110a4:	1906703a 	and	r3,r3,r4
   110a8:	2008d7fa 	srli	r4,r4,31
   110ac:	11400e0e 	bge	r2,r5,110e8 <__fixsfsi+0x58>
   110b0:	00802744 	movi	r2,157
   110b4:	11400816 	blt	r2,r5,110d8 <__fixsfsi+0x48>
   110b8:	00802544 	movi	r2,149
   110bc:	18c02034 	orhi	r3,r3,128
   110c0:	11400b0e 	bge	r2,r5,110f0 <__fixsfsi+0x60>
   110c4:	28bfda84 	addi	r2,r5,-150
   110c8:	1884983a 	sll	r2,r3,r2
   110cc:	20000726 	beq	r4,zero,110ec <__fixsfsi+0x5c>
   110d0:	0085c83a 	sub	r2,zero,r2
   110d4:	f800283a 	ret
   110d8:	00a00034 	movhi	r2,32768
   110dc:	10bfffc4 	addi	r2,r2,-1
   110e0:	2085883a 	add	r2,r4,r2
   110e4:	f800283a 	ret
   110e8:	0005883a 	mov	r2,zero
   110ec:	f800283a 	ret
   110f0:	00802584 	movi	r2,150
   110f4:	1145c83a 	sub	r2,r2,r5
   110f8:	1884d83a 	srl	r2,r3,r2
   110fc:	003ff306 	br	110cc <__alt_data_end+0xffff10cc>

00011100 <__floatsisf>:
   11100:	defffd04 	addi	sp,sp,-12
   11104:	dfc00215 	stw	ra,8(sp)
   11108:	dc400115 	stw	r17,4(sp)
   1110c:	dc000015 	stw	r16,0(sp)
   11110:	20003526 	beq	r4,zero,111e8 <__floatsisf+0xe8>
   11114:	2021883a 	mov	r16,r4
   11118:	2022d7fa 	srli	r17,r4,31
   1111c:	20003616 	blt	r4,zero,111f8 <__floatsisf+0xf8>
   11120:	8009883a 	mov	r4,r16
   11124:	00112240 	call	11224 <__clzsi2>
   11128:	00c02784 	movi	r3,158
   1112c:	1887c83a 	sub	r3,r3,r2
   11130:	01002584 	movi	r4,150
   11134:	20c01416 	blt	r4,r3,11188 <__floatsisf+0x88>
   11138:	20c9c83a 	sub	r4,r4,r3
   1113c:	8120983a 	sll	r16,r16,r4
   11140:	00802034 	movhi	r2,128
   11144:	10bfffc4 	addi	r2,r2,-1
   11148:	8809883a 	mov	r4,r17
   1114c:	80a0703a 	and	r16,r16,r2
   11150:	18803fcc 	andi	r2,r3,255
   11154:	100695fa 	slli	r3,r2,23
   11158:	20803fcc 	andi	r2,r4,255
   1115c:	100897fa 	slli	r4,r2,31
   11160:	00802034 	movhi	r2,128
   11164:	10bfffc4 	addi	r2,r2,-1
   11168:	8084703a 	and	r2,r16,r2
   1116c:	10c4b03a 	or	r2,r2,r3
   11170:	1104b03a 	or	r2,r2,r4
   11174:	dfc00217 	ldw	ra,8(sp)
   11178:	dc400117 	ldw	r17,4(sp)
   1117c:	dc000017 	ldw	r16,0(sp)
   11180:	dec00304 	addi	sp,sp,12
   11184:	f800283a 	ret
   11188:	01002644 	movi	r4,153
   1118c:	20c01c16 	blt	r4,r3,11200 <__floatsisf+0x100>
   11190:	20c9c83a 	sub	r4,r4,r3
   11194:	8120983a 	sll	r16,r16,r4
   11198:	013f0034 	movhi	r4,64512
   1119c:	213fffc4 	addi	r4,r4,-1
   111a0:	814001cc 	andi	r5,r16,7
   111a4:	8108703a 	and	r4,r16,r4
   111a8:	28000426 	beq	r5,zero,111bc <__floatsisf+0xbc>
   111ac:	840003cc 	andi	r16,r16,15
   111b0:	01400104 	movi	r5,4
   111b4:	81400126 	beq	r16,r5,111bc <__floatsisf+0xbc>
   111b8:	2149883a 	add	r4,r4,r5
   111bc:	2141002c 	andhi	r5,r4,1024
   111c0:	28000526 	beq	r5,zero,111d8 <__floatsisf+0xd8>
   111c4:	00c027c4 	movi	r3,159
   111c8:	1887c83a 	sub	r3,r3,r2
   111cc:	00bf0034 	movhi	r2,64512
   111d0:	10bfffc4 	addi	r2,r2,-1
   111d4:	2088703a 	and	r4,r4,r2
   111d8:	202091ba 	slli	r16,r4,6
   111dc:	8809883a 	mov	r4,r17
   111e0:	8020d27a 	srli	r16,r16,9
   111e4:	003fda06 	br	11150 <__alt_data_end+0xffff1150>
   111e8:	0009883a 	mov	r4,zero
   111ec:	0007883a 	mov	r3,zero
   111f0:	0021883a 	mov	r16,zero
   111f4:	003fd606 	br	11150 <__alt_data_end+0xffff1150>
   111f8:	0121c83a 	sub	r16,zero,r4
   111fc:	003fc806 	br	11120 <__alt_data_end+0xffff1120>
   11200:	01002e44 	movi	r4,185
   11204:	20c9c83a 	sub	r4,r4,r3
   11208:	01400144 	movi	r5,5
   1120c:	8108983a 	sll	r4,r16,r4
   11210:	288bc83a 	sub	r5,r5,r2
   11214:	8160d83a 	srl	r16,r16,r5
   11218:	2008c03a 	cmpne	r4,r4,zero
   1121c:	8120b03a 	or	r16,r16,r4
   11220:	003fdd06 	br	11198 <__alt_data_end+0xffff1198>

00011224 <__clzsi2>:
   11224:	00bfffd4 	movui	r2,65535
   11228:	11000536 	bltu	r2,r4,11240 <__clzsi2+0x1c>
   1122c:	00803fc4 	movi	r2,255
   11230:	11000f36 	bltu	r2,r4,11270 <__clzsi2+0x4c>
   11234:	00800804 	movi	r2,32
   11238:	0007883a 	mov	r3,zero
   1123c:	00000506 	br	11254 <__clzsi2+0x30>
   11240:	00804034 	movhi	r2,256
   11244:	10bfffc4 	addi	r2,r2,-1
   11248:	11000c2e 	bgeu	r2,r4,1127c <__clzsi2+0x58>
   1124c:	00800204 	movi	r2,8
   11250:	00c00604 	movi	r3,24
   11254:	20c8d83a 	srl	r4,r4,r3
   11258:	00c00074 	movhi	r3,1
   1125c:	18c93404 	addi	r3,r3,9424
   11260:	1909883a 	add	r4,r3,r4
   11264:	20c00003 	ldbu	r3,0(r4)
   11268:	10c5c83a 	sub	r2,r2,r3
   1126c:	f800283a 	ret
   11270:	00800604 	movi	r2,24
   11274:	00c00204 	movi	r3,8
   11278:	003ff606 	br	11254 <__alt_data_end+0xffff1254>
   1127c:	00800404 	movi	r2,16
   11280:	1007883a 	mov	r3,r2
   11284:	003ff306 	br	11254 <__alt_data_end+0xffff1254>

00011288 <__mulsi3>:
   11288:	0005883a 	mov	r2,zero
   1128c:	20000726 	beq	r4,zero,112ac <__mulsi3+0x24>
   11290:	20c0004c 	andi	r3,r4,1
   11294:	2008d07a 	srli	r4,r4,1
   11298:	18000126 	beq	r3,zero,112a0 <__mulsi3+0x18>
   1129c:	1145883a 	add	r2,r2,r5
   112a0:	294b883a 	add	r5,r5,r5
   112a4:	203ffa1e 	bne	r4,zero,11290 <__alt_data_end+0xffff1290>
   112a8:	f800283a 	ret
   112ac:	f800283a 	ret

000112b0 <memset>:
   112b0:	2005883a 	mov	r2,r4
   112b4:	2007883a 	mov	r3,r4
   112b8:	218d883a 	add	r6,r4,r6
   112bc:	19800326 	beq	r3,r6,112cc <memset+0x1c>
   112c0:	19400005 	stb	r5,0(r3)
   112c4:	18c00044 	addi	r3,r3,1
   112c8:	003ffc06 	br	112bc <__alt_data_end+0xffff12bc>
   112cc:	f800283a 	ret

000112d0 <_printf_r>:
   112d0:	defffd04 	addi	sp,sp,-12
   112d4:	dfc00015 	stw	ra,0(sp)
   112d8:	d9800115 	stw	r6,4(sp)
   112dc:	d9c00215 	stw	r7,8(sp)
   112e0:	20c00217 	ldw	r3,8(r4)
   112e4:	01800074 	movhi	r6,1
   112e8:	31867e04 	addi	r6,r6,6648
   112ec:	19800115 	stw	r6,4(r3)
   112f0:	280d883a 	mov	r6,r5
   112f4:	21400217 	ldw	r5,8(r4)
   112f8:	d9c00104 	addi	r7,sp,4
   112fc:	00114b00 	call	114b0 <___vfprintf_internal_r>
   11300:	dfc00017 	ldw	ra,0(sp)
   11304:	dec00304 	addi	sp,sp,12
   11308:	f800283a 	ret

0001130c <printf>:
   1130c:	defffc04 	addi	sp,sp,-16
   11310:	dfc00015 	stw	ra,0(sp)
   11314:	d9400115 	stw	r5,4(sp)
   11318:	d9800215 	stw	r6,8(sp)
   1131c:	d9c00315 	stw	r7,12(sp)
   11320:	00800074 	movhi	r2,1
   11324:	1089d304 	addi	r2,r2,10060
   11328:	10800017 	ldw	r2,0(r2)
   1132c:	01400074 	movhi	r5,1
   11330:	29467e04 	addi	r5,r5,6648
   11334:	10c00217 	ldw	r3,8(r2)
   11338:	d9800104 	addi	r6,sp,4
   1133c:	19400115 	stw	r5,4(r3)
   11340:	200b883a 	mov	r5,r4
   11344:	11000217 	ldw	r4,8(r2)
   11348:	00119dc0 	call	119dc <__vfprintf_internal>
   1134c:	dfc00017 	ldw	ra,0(sp)
   11350:	dec00404 	addi	sp,sp,16
   11354:	f800283a 	ret

00011358 <_puts_r>:
   11358:	defffd04 	addi	sp,sp,-12
   1135c:	dc000015 	stw	r16,0(sp)
   11360:	2021883a 	mov	r16,r4
   11364:	2809883a 	mov	r4,r5
   11368:	dfc00215 	stw	ra,8(sp)
   1136c:	dc400115 	stw	r17,4(sp)
   11370:	2823883a 	mov	r17,r5
   11374:	00114280 	call	11428 <strlen>
   11378:	81400217 	ldw	r5,8(r16)
   1137c:	01000074 	movhi	r4,1
   11380:	21067e04 	addi	r4,r4,6648
   11384:	29000115 	stw	r4,4(r5)
   11388:	100f883a 	mov	r7,r2
   1138c:	880d883a 	mov	r6,r17
   11390:	8009883a 	mov	r4,r16
   11394:	00119f80 	call	119f8 <__sfvwrite_small_dev>
   11398:	00ffffc4 	movi	r3,-1
   1139c:	10c00926 	beq	r2,r3,113c4 <_puts_r+0x6c>
   113a0:	81400217 	ldw	r5,8(r16)
   113a4:	01800074 	movhi	r6,1
   113a8:	01c00044 	movi	r7,1
   113ac:	28800117 	ldw	r2,4(r5)
   113b0:	31890d04 	addi	r6,r6,9268
   113b4:	8009883a 	mov	r4,r16
   113b8:	103ee83a 	callr	r2
   113bc:	10bfffe0 	cmpeqi	r2,r2,-1
   113c0:	0085c83a 	sub	r2,zero,r2
   113c4:	dfc00217 	ldw	ra,8(sp)
   113c8:	dc400117 	ldw	r17,4(sp)
   113cc:	dc000017 	ldw	r16,0(sp)
   113d0:	dec00304 	addi	sp,sp,12
   113d4:	f800283a 	ret

000113d8 <puts>:
   113d8:	00800074 	movhi	r2,1
   113dc:	1089d304 	addi	r2,r2,10060
   113e0:	200b883a 	mov	r5,r4
   113e4:	11000017 	ldw	r4,0(r2)
   113e8:	00113581 	jmpi	11358 <_puts_r>

000113ec <strcat>:
   113ec:	2005883a 	mov	r2,r4
   113f0:	2007883a 	mov	r3,r4
   113f4:	19000007 	ldb	r4,0(r3)
   113f8:	20000226 	beq	r4,zero,11404 <strcat+0x18>
   113fc:	18c00044 	addi	r3,r3,1
   11400:	003ffc06 	br	113f4 <__alt_data_end+0xffff13f4>
   11404:	29800003 	ldbu	r6,0(r5)
   11408:	18c00044 	addi	r3,r3,1
   1140c:	29400044 	addi	r5,r5,1
   11410:	19bfffc5 	stb	r6,-1(r3)
   11414:	31803fcc 	andi	r6,r6,255
   11418:	3180201c 	xori	r6,r6,128
   1141c:	31bfe004 	addi	r6,r6,-128
   11420:	303ff81e 	bne	r6,zero,11404 <__alt_data_end+0xffff1404>
   11424:	f800283a 	ret

00011428 <strlen>:
   11428:	2005883a 	mov	r2,r4
   1142c:	10c00007 	ldb	r3,0(r2)
   11430:	18000226 	beq	r3,zero,1143c <strlen+0x14>
   11434:	10800044 	addi	r2,r2,1
   11438:	003ffc06 	br	1142c <__alt_data_end+0xffff142c>
   1143c:	1105c83a 	sub	r2,r2,r4
   11440:	f800283a 	ret

00011444 <print_repeat>:
   11444:	defffb04 	addi	sp,sp,-20
   11448:	dc800315 	stw	r18,12(sp)
   1144c:	dc400215 	stw	r17,8(sp)
   11450:	dc000115 	stw	r16,4(sp)
   11454:	dfc00415 	stw	ra,16(sp)
   11458:	2025883a 	mov	r18,r4
   1145c:	2823883a 	mov	r17,r5
   11460:	d9800005 	stb	r6,0(sp)
   11464:	3821883a 	mov	r16,r7
   11468:	04000a0e 	bge	zero,r16,11494 <print_repeat+0x50>
   1146c:	88800117 	ldw	r2,4(r17)
   11470:	01c00044 	movi	r7,1
   11474:	d80d883a 	mov	r6,sp
   11478:	880b883a 	mov	r5,r17
   1147c:	9009883a 	mov	r4,r18
   11480:	103ee83a 	callr	r2
   11484:	843fffc4 	addi	r16,r16,-1
   11488:	103ff726 	beq	r2,zero,11468 <__alt_data_end+0xffff1468>
   1148c:	00bfffc4 	movi	r2,-1
   11490:	00000106 	br	11498 <print_repeat+0x54>
   11494:	0005883a 	mov	r2,zero
   11498:	dfc00417 	ldw	ra,16(sp)
   1149c:	dc800317 	ldw	r18,12(sp)
   114a0:	dc400217 	ldw	r17,8(sp)
   114a4:	dc000117 	ldw	r16,4(sp)
   114a8:	dec00504 	addi	sp,sp,20
   114ac:	f800283a 	ret

000114b0 <___vfprintf_internal_r>:
   114b0:	deffe504 	addi	sp,sp,-108
   114b4:	d8c00804 	addi	r3,sp,32
   114b8:	ddc01815 	stw	r23,96(sp)
   114bc:	dd801715 	stw	r22,92(sp)
   114c0:	dd401615 	stw	r21,88(sp)
   114c4:	dd001515 	stw	r20,84(sp)
   114c8:	dcc01415 	stw	r19,80(sp)
   114cc:	dc801315 	stw	r18,76(sp)
   114d0:	dc401215 	stw	r17,72(sp)
   114d4:	dc001115 	stw	r16,68(sp)
   114d8:	dfc01a15 	stw	ra,104(sp)
   114dc:	df001915 	stw	fp,100(sp)
   114e0:	2029883a 	mov	r20,r4
   114e4:	2823883a 	mov	r17,r5
   114e8:	382d883a 	mov	r22,r7
   114ec:	d9800f15 	stw	r6,60(sp)
   114f0:	0021883a 	mov	r16,zero
   114f4:	d8000e15 	stw	zero,56(sp)
   114f8:	d8000a15 	stw	zero,40(sp)
   114fc:	002b883a 	mov	r21,zero
   11500:	0027883a 	mov	r19,zero
   11504:	0025883a 	mov	r18,zero
   11508:	d8000c15 	stw	zero,48(sp)
   1150c:	d8000b15 	stw	zero,44(sp)
   11510:	002f883a 	mov	r23,zero
   11514:	d8c00915 	stw	r3,36(sp)
   11518:	d8c00f17 	ldw	r3,60(sp)
   1151c:	19000003 	ldbu	r4,0(r3)
   11520:	20803fcc 	andi	r2,r4,255
   11524:	1080201c 	xori	r2,r2,128
   11528:	10bfe004 	addi	r2,r2,-128
   1152c:	10011e26 	beq	r2,zero,119a8 <___vfprintf_internal_r+0x4f8>
   11530:	00c00044 	movi	r3,1
   11534:	b8c01426 	beq	r23,r3,11588 <___vfprintf_internal_r+0xd8>
   11538:	1dc00216 	blt	r3,r23,11544 <___vfprintf_internal_r+0x94>
   1153c:	b8000626 	beq	r23,zero,11558 <___vfprintf_internal_r+0xa8>
   11540:	00011506 	br	11998 <___vfprintf_internal_r+0x4e8>
   11544:	01400084 	movi	r5,2
   11548:	b9401d26 	beq	r23,r5,115c0 <___vfprintf_internal_r+0x110>
   1154c:	014000c4 	movi	r5,3
   11550:	b9402b26 	beq	r23,r5,11600 <___vfprintf_internal_r+0x150>
   11554:	00011006 	br	11998 <___vfprintf_internal_r+0x4e8>
   11558:	01400944 	movi	r5,37
   1155c:	1140fc26 	beq	r2,r5,11950 <___vfprintf_internal_r+0x4a0>
   11560:	88800117 	ldw	r2,4(r17)
   11564:	d9000005 	stb	r4,0(sp)
   11568:	01c00044 	movi	r7,1
   1156c:	d80d883a 	mov	r6,sp
   11570:	880b883a 	mov	r5,r17
   11574:	a009883a 	mov	r4,r20
   11578:	103ee83a 	callr	r2
   1157c:	1000d81e 	bne	r2,zero,118e0 <___vfprintf_internal_r+0x430>
   11580:	84000044 	addi	r16,r16,1
   11584:	00010406 	br	11998 <___vfprintf_internal_r+0x4e8>
   11588:	01400c04 	movi	r5,48
   1158c:	1140fa26 	beq	r2,r5,11978 <___vfprintf_internal_r+0x4c8>
   11590:	01400944 	movi	r5,37
   11594:	11400a1e 	bne	r2,r5,115c0 <___vfprintf_internal_r+0x110>
   11598:	d8800005 	stb	r2,0(sp)
   1159c:	88800117 	ldw	r2,4(r17)
   115a0:	b80f883a 	mov	r7,r23
   115a4:	d80d883a 	mov	r6,sp
   115a8:	880b883a 	mov	r5,r17
   115ac:	a009883a 	mov	r4,r20
   115b0:	103ee83a 	callr	r2
   115b4:	1000ca1e 	bne	r2,zero,118e0 <___vfprintf_internal_r+0x430>
   115b8:	84000044 	addi	r16,r16,1
   115bc:	0000f506 	br	11994 <___vfprintf_internal_r+0x4e4>
   115c0:	25fff404 	addi	r23,r4,-48
   115c4:	bdc03fcc 	andi	r23,r23,255
   115c8:	00c00244 	movi	r3,9
   115cc:	1dc00936 	bltu	r3,r23,115f4 <___vfprintf_internal_r+0x144>
   115d0:	00bfffc4 	movi	r2,-1
   115d4:	90800426 	beq	r18,r2,115e8 <___vfprintf_internal_r+0x138>
   115d8:	01400284 	movi	r5,10
   115dc:	9009883a 	mov	r4,r18
   115e0:	00112880 	call	11288 <__mulsi3>
   115e4:	00000106 	br	115ec <___vfprintf_internal_r+0x13c>
   115e8:	0005883a 	mov	r2,zero
   115ec:	b8a5883a 	add	r18,r23,r2
   115f0:	0000e206 	br	1197c <___vfprintf_internal_r+0x4cc>
   115f4:	01400b84 	movi	r5,46
   115f8:	1140e426 	beq	r2,r5,1198c <___vfprintf_internal_r+0x4dc>
   115fc:	05c00084 	movi	r23,2
   11600:	213ff404 	addi	r4,r4,-48
   11604:	27003fcc 	andi	fp,r4,255
   11608:	00c00244 	movi	r3,9
   1160c:	1f000936 	bltu	r3,fp,11634 <___vfprintf_internal_r+0x184>
   11610:	00bfffc4 	movi	r2,-1
   11614:	98800426 	beq	r19,r2,11628 <___vfprintf_internal_r+0x178>
   11618:	01400284 	movi	r5,10
   1161c:	9809883a 	mov	r4,r19
   11620:	00112880 	call	11288 <__mulsi3>
   11624:	00000106 	br	1162c <___vfprintf_internal_r+0x17c>
   11628:	0005883a 	mov	r2,zero
   1162c:	e0a7883a 	add	r19,fp,r2
   11630:	0000d906 	br	11998 <___vfprintf_internal_r+0x4e8>
   11634:	00c01b04 	movi	r3,108
   11638:	10c0d226 	beq	r2,r3,11984 <___vfprintf_internal_r+0x4d4>
   1163c:	013fffc4 	movi	r4,-1
   11640:	99000226 	beq	r19,r4,1164c <___vfprintf_internal_r+0x19c>
   11644:	d8000b15 	stw	zero,44(sp)
   11648:	00000106 	br	11650 <___vfprintf_internal_r+0x1a0>
   1164c:	04c00044 	movi	r19,1
   11650:	01001a44 	movi	r4,105
   11654:	11001626 	beq	r2,r4,116b0 <___vfprintf_internal_r+0x200>
   11658:	20800916 	blt	r4,r2,11680 <___vfprintf_internal_r+0x1d0>
   1165c:	010018c4 	movi	r4,99
   11660:	11008826 	beq	r2,r4,11884 <___vfprintf_internal_r+0x3d4>
   11664:	01001904 	movi	r4,100
   11668:	11001126 	beq	r2,r4,116b0 <___vfprintf_internal_r+0x200>
   1166c:	01001604 	movi	r4,88
   11670:	1100c81e 	bne	r2,r4,11994 <___vfprintf_internal_r+0x4e4>
   11674:	00c00044 	movi	r3,1
   11678:	d8c00e15 	stw	r3,56(sp)
   1167c:	00001506 	br	116d4 <___vfprintf_internal_r+0x224>
   11680:	01001cc4 	movi	r4,115
   11684:	11009826 	beq	r2,r4,118e8 <___vfprintf_internal_r+0x438>
   11688:	20800416 	blt	r4,r2,1169c <___vfprintf_internal_r+0x1ec>
   1168c:	01001bc4 	movi	r4,111
   11690:	1100c01e 	bne	r2,r4,11994 <___vfprintf_internal_r+0x4e4>
   11694:	05400204 	movi	r21,8
   11698:	00000f06 	br	116d8 <___vfprintf_internal_r+0x228>
   1169c:	01001d44 	movi	r4,117
   116a0:	11000d26 	beq	r2,r4,116d8 <___vfprintf_internal_r+0x228>
   116a4:	01001e04 	movi	r4,120
   116a8:	11000a26 	beq	r2,r4,116d4 <___vfprintf_internal_r+0x224>
   116ac:	0000b906 	br	11994 <___vfprintf_internal_r+0x4e4>
   116b0:	d8c00a17 	ldw	r3,40(sp)
   116b4:	b7000104 	addi	fp,r22,4
   116b8:	18000726 	beq	r3,zero,116d8 <___vfprintf_internal_r+0x228>
   116bc:	df000d15 	stw	fp,52(sp)
   116c0:	b5c00017 	ldw	r23,0(r22)
   116c4:	b800080e 	bge	r23,zero,116e8 <___vfprintf_internal_r+0x238>
   116c8:	05efc83a 	sub	r23,zero,r23
   116cc:	02400044 	movi	r9,1
   116d0:	00000606 	br	116ec <___vfprintf_internal_r+0x23c>
   116d4:	05400404 	movi	r21,16
   116d8:	b0c00104 	addi	r3,r22,4
   116dc:	d8c00d15 	stw	r3,52(sp)
   116e0:	b5c00017 	ldw	r23,0(r22)
   116e4:	d8000a15 	stw	zero,40(sp)
   116e8:	0013883a 	mov	r9,zero
   116ec:	d839883a 	mov	fp,sp
   116f0:	b8001726 	beq	r23,zero,11750 <___vfprintf_internal_r+0x2a0>
   116f4:	a80b883a 	mov	r5,r21
   116f8:	b809883a 	mov	r4,r23
   116fc:	da401015 	stw	r9,64(sp)
   11700:	0011c000 	call	11c00 <__udivsi3>
   11704:	a80b883a 	mov	r5,r21
   11708:	1009883a 	mov	r4,r2
   1170c:	102d883a 	mov	r22,r2
   11710:	00112880 	call	11288 <__mulsi3>
   11714:	b885c83a 	sub	r2,r23,r2
   11718:	00c00244 	movi	r3,9
   1171c:	da401017 	ldw	r9,64(sp)
   11720:	18800216 	blt	r3,r2,1172c <___vfprintf_internal_r+0x27c>
   11724:	10800c04 	addi	r2,r2,48
   11728:	00000506 	br	11740 <___vfprintf_internal_r+0x290>
   1172c:	d8c00e17 	ldw	r3,56(sp)
   11730:	18000226 	beq	r3,zero,1173c <___vfprintf_internal_r+0x28c>
   11734:	10800dc4 	addi	r2,r2,55
   11738:	00000106 	br	11740 <___vfprintf_internal_r+0x290>
   1173c:	108015c4 	addi	r2,r2,87
   11740:	e0800005 	stb	r2,0(fp)
   11744:	b02f883a 	mov	r23,r22
   11748:	e7000044 	addi	fp,fp,1
   1174c:	003fe806 	br	116f0 <__alt_data_end+0xffff16f0>
   11750:	e6efc83a 	sub	r23,fp,sp
   11754:	9dc5c83a 	sub	r2,r19,r23
   11758:	0080090e 	bge	zero,r2,11780 <___vfprintf_internal_r+0x2d0>
   1175c:	e085883a 	add	r2,fp,r2
   11760:	01400c04 	movi	r5,48
   11764:	d8c00917 	ldw	r3,36(sp)
   11768:	e009883a 	mov	r4,fp
   1176c:	e0c0032e 	bgeu	fp,r3,1177c <___vfprintf_internal_r+0x2cc>
   11770:	e7000044 	addi	fp,fp,1
   11774:	21400005 	stb	r5,0(r4)
   11778:	e0bffa1e 	bne	fp,r2,11764 <__alt_data_end+0xffff1764>
   1177c:	e6efc83a 	sub	r23,fp,sp
   11780:	d8c00b17 	ldw	r3,44(sp)
   11784:	4dd1883a 	add	r8,r9,r23
   11788:	922dc83a 	sub	r22,r18,r8
   1178c:	18001626 	beq	r3,zero,117e8 <___vfprintf_internal_r+0x338>
   11790:	48000a26 	beq	r9,zero,117bc <___vfprintf_internal_r+0x30c>
   11794:	00800b44 	movi	r2,45
   11798:	d8800805 	stb	r2,32(sp)
   1179c:	88800117 	ldw	r2,4(r17)
   117a0:	01c00044 	movi	r7,1
   117a4:	d9800804 	addi	r6,sp,32
   117a8:	880b883a 	mov	r5,r17
   117ac:	a009883a 	mov	r4,r20
   117b0:	103ee83a 	callr	r2
   117b4:	10004a1e 	bne	r2,zero,118e0 <___vfprintf_internal_r+0x430>
   117b8:	84000044 	addi	r16,r16,1
   117bc:	0580070e 	bge	zero,r22,117dc <___vfprintf_internal_r+0x32c>
   117c0:	b00f883a 	mov	r7,r22
   117c4:	01800c04 	movi	r6,48
   117c8:	880b883a 	mov	r5,r17
   117cc:	a009883a 	mov	r4,r20
   117d0:	00114440 	call	11444 <print_repeat>
   117d4:	1000421e 	bne	r2,zero,118e0 <___vfprintf_internal_r+0x430>
   117d8:	85a1883a 	add	r16,r16,r22
   117dc:	e02d883a 	mov	r22,fp
   117e0:	bf2fc83a 	sub	r23,r23,fp
   117e4:	00002006 	br	11868 <___vfprintf_internal_r+0x3b8>
   117e8:	0580090e 	bge	zero,r22,11810 <___vfprintf_internal_r+0x360>
   117ec:	b00f883a 	mov	r7,r22
   117f0:	01800804 	movi	r6,32
   117f4:	880b883a 	mov	r5,r17
   117f8:	a009883a 	mov	r4,r20
   117fc:	da401015 	stw	r9,64(sp)
   11800:	00114440 	call	11444 <print_repeat>
   11804:	da401017 	ldw	r9,64(sp)
   11808:	1000351e 	bne	r2,zero,118e0 <___vfprintf_internal_r+0x430>
   1180c:	85a1883a 	add	r16,r16,r22
   11810:	483ff226 	beq	r9,zero,117dc <__alt_data_end+0xffff17dc>
   11814:	00800b44 	movi	r2,45
   11818:	d8800805 	stb	r2,32(sp)
   1181c:	88800117 	ldw	r2,4(r17)
   11820:	01c00044 	movi	r7,1
   11824:	d9800804 	addi	r6,sp,32
   11828:	880b883a 	mov	r5,r17
   1182c:	a009883a 	mov	r4,r20
   11830:	103ee83a 	callr	r2
   11834:	10002a1e 	bne	r2,zero,118e0 <___vfprintf_internal_r+0x430>
   11838:	84000044 	addi	r16,r16,1
   1183c:	003fe706 	br	117dc <__alt_data_end+0xffff17dc>
   11840:	b5bfffc4 	addi	r22,r22,-1
   11844:	b0800003 	ldbu	r2,0(r22)
   11848:	01c00044 	movi	r7,1
   1184c:	d9800804 	addi	r6,sp,32
   11850:	d8800805 	stb	r2,32(sp)
   11854:	88800117 	ldw	r2,4(r17)
   11858:	880b883a 	mov	r5,r17
   1185c:	a009883a 	mov	r4,r20
   11860:	103ee83a 	callr	r2
   11864:	10001e1e 	bne	r2,zero,118e0 <___vfprintf_internal_r+0x430>
   11868:	8585c83a 	sub	r2,r16,r22
   1186c:	b5c9883a 	add	r4,r22,r23
   11870:	e085883a 	add	r2,fp,r2
   11874:	013ff216 	blt	zero,r4,11840 <__alt_data_end+0xffff1840>
   11878:	1021883a 	mov	r16,r2
   1187c:	dd800d17 	ldw	r22,52(sp)
   11880:	00004406 	br	11994 <___vfprintf_internal_r+0x4e4>
   11884:	00800044 	movi	r2,1
   11888:	1480080e 	bge	r2,r18,118ac <___vfprintf_internal_r+0x3fc>
   1188c:	95ffffc4 	addi	r23,r18,-1
   11890:	b80f883a 	mov	r7,r23
   11894:	01800804 	movi	r6,32
   11898:	880b883a 	mov	r5,r17
   1189c:	a009883a 	mov	r4,r20
   118a0:	00114440 	call	11444 <print_repeat>
   118a4:	10000e1e 	bne	r2,zero,118e0 <___vfprintf_internal_r+0x430>
   118a8:	85e1883a 	add	r16,r16,r23
   118ac:	b0800017 	ldw	r2,0(r22)
   118b0:	01c00044 	movi	r7,1
   118b4:	d80d883a 	mov	r6,sp
   118b8:	d8800005 	stb	r2,0(sp)
   118bc:	88800117 	ldw	r2,4(r17)
   118c0:	880b883a 	mov	r5,r17
   118c4:	a009883a 	mov	r4,r20
   118c8:	b5c00104 	addi	r23,r22,4
   118cc:	103ee83a 	callr	r2
   118d0:	1000031e 	bne	r2,zero,118e0 <___vfprintf_internal_r+0x430>
   118d4:	84000044 	addi	r16,r16,1
   118d8:	b82d883a 	mov	r22,r23
   118dc:	00002d06 	br	11994 <___vfprintf_internal_r+0x4e4>
   118e0:	00bfffc4 	movi	r2,-1
   118e4:	00003106 	br	119ac <___vfprintf_internal_r+0x4fc>
   118e8:	b5c00017 	ldw	r23,0(r22)
   118ec:	b7000104 	addi	fp,r22,4
   118f0:	b809883a 	mov	r4,r23
   118f4:	00114280 	call	11428 <strlen>
   118f8:	9091c83a 	sub	r8,r18,r2
   118fc:	102d883a 	mov	r22,r2
   11900:	0200090e 	bge	zero,r8,11928 <___vfprintf_internal_r+0x478>
   11904:	400f883a 	mov	r7,r8
   11908:	01800804 	movi	r6,32
   1190c:	880b883a 	mov	r5,r17
   11910:	a009883a 	mov	r4,r20
   11914:	da001015 	stw	r8,64(sp)
   11918:	00114440 	call	11444 <print_repeat>
   1191c:	da001017 	ldw	r8,64(sp)
   11920:	103fef1e 	bne	r2,zero,118e0 <__alt_data_end+0xffff18e0>
   11924:	8221883a 	add	r16,r16,r8
   11928:	88800117 	ldw	r2,4(r17)
   1192c:	b00f883a 	mov	r7,r22
   11930:	b80d883a 	mov	r6,r23
   11934:	880b883a 	mov	r5,r17
   11938:	a009883a 	mov	r4,r20
   1193c:	103ee83a 	callr	r2
   11940:	103fe71e 	bne	r2,zero,118e0 <__alt_data_end+0xffff18e0>
   11944:	85a1883a 	add	r16,r16,r22
   11948:	e02d883a 	mov	r22,fp
   1194c:	00001106 	br	11994 <___vfprintf_internal_r+0x4e4>
   11950:	00c00044 	movi	r3,1
   11954:	04ffffc4 	movi	r19,-1
   11958:	d8000e15 	stw	zero,56(sp)
   1195c:	d8c00a15 	stw	r3,40(sp)
   11960:	05400284 	movi	r21,10
   11964:	9825883a 	mov	r18,r19
   11968:	d8000c15 	stw	zero,48(sp)
   1196c:	d8000b15 	stw	zero,44(sp)
   11970:	182f883a 	mov	r23,r3
   11974:	00000806 	br	11998 <___vfprintf_internal_r+0x4e8>
   11978:	ddc00b15 	stw	r23,44(sp)
   1197c:	05c00084 	movi	r23,2
   11980:	00000506 	br	11998 <___vfprintf_internal_r+0x4e8>
   11984:	00c00044 	movi	r3,1
   11988:	d8c00c15 	stw	r3,48(sp)
   1198c:	05c000c4 	movi	r23,3
   11990:	00000106 	br	11998 <___vfprintf_internal_r+0x4e8>
   11994:	002f883a 	mov	r23,zero
   11998:	d8c00f17 	ldw	r3,60(sp)
   1199c:	18c00044 	addi	r3,r3,1
   119a0:	d8c00f15 	stw	r3,60(sp)
   119a4:	003edc06 	br	11518 <__alt_data_end+0xffff1518>
   119a8:	8005883a 	mov	r2,r16
   119ac:	dfc01a17 	ldw	ra,104(sp)
   119b0:	df001917 	ldw	fp,100(sp)
   119b4:	ddc01817 	ldw	r23,96(sp)
   119b8:	dd801717 	ldw	r22,92(sp)
   119bc:	dd401617 	ldw	r21,88(sp)
   119c0:	dd001517 	ldw	r20,84(sp)
   119c4:	dcc01417 	ldw	r19,80(sp)
   119c8:	dc801317 	ldw	r18,76(sp)
   119cc:	dc401217 	ldw	r17,72(sp)
   119d0:	dc001117 	ldw	r16,68(sp)
   119d4:	dec01b04 	addi	sp,sp,108
   119d8:	f800283a 	ret

000119dc <__vfprintf_internal>:
   119dc:	00800074 	movhi	r2,1
   119e0:	1089d304 	addi	r2,r2,10060
   119e4:	300f883a 	mov	r7,r6
   119e8:	280d883a 	mov	r6,r5
   119ec:	200b883a 	mov	r5,r4
   119f0:	11000017 	ldw	r4,0(r2)
   119f4:	00114b01 	jmpi	114b0 <___vfprintf_internal_r>

000119f8 <__sfvwrite_small_dev>:
   119f8:	2880000b 	ldhu	r2,0(r5)
   119fc:	1080020c 	andi	r2,r2,8
   11a00:	10002126 	beq	r2,zero,11a88 <__sfvwrite_small_dev+0x90>
   11a04:	2880008f 	ldh	r2,2(r5)
   11a08:	defffa04 	addi	sp,sp,-24
   11a0c:	dc000015 	stw	r16,0(sp)
   11a10:	dfc00515 	stw	ra,20(sp)
   11a14:	dd000415 	stw	r20,16(sp)
   11a18:	dcc00315 	stw	r19,12(sp)
   11a1c:	dc800215 	stw	r18,8(sp)
   11a20:	dc400115 	stw	r17,4(sp)
   11a24:	2821883a 	mov	r16,r5
   11a28:	10001216 	blt	r2,zero,11a74 <__sfvwrite_small_dev+0x7c>
   11a2c:	2027883a 	mov	r19,r4
   11a30:	3025883a 	mov	r18,r6
   11a34:	3823883a 	mov	r17,r7
   11a38:	05010004 	movi	r20,1024
   11a3c:	04400b0e 	bge	zero,r17,11a6c <__sfvwrite_small_dev+0x74>
   11a40:	880f883a 	mov	r7,r17
   11a44:	a440010e 	bge	r20,r17,11a4c <__sfvwrite_small_dev+0x54>
   11a48:	01c10004 	movi	r7,1024
   11a4c:	8140008f 	ldh	r5,2(r16)
   11a50:	900d883a 	mov	r6,r18
   11a54:	9809883a 	mov	r4,r19
   11a58:	0011ab00 	call	11ab0 <_write_r>
   11a5c:	0080050e 	bge	zero,r2,11a74 <__sfvwrite_small_dev+0x7c>
   11a60:	88a3c83a 	sub	r17,r17,r2
   11a64:	90a5883a 	add	r18,r18,r2
   11a68:	003ff406 	br	11a3c <__alt_data_end+0xffff1a3c>
   11a6c:	0005883a 	mov	r2,zero
   11a70:	00000706 	br	11a90 <__sfvwrite_small_dev+0x98>
   11a74:	8080000b 	ldhu	r2,0(r16)
   11a78:	10801014 	ori	r2,r2,64
   11a7c:	8080000d 	sth	r2,0(r16)
   11a80:	00bfffc4 	movi	r2,-1
   11a84:	00000206 	br	11a90 <__sfvwrite_small_dev+0x98>
   11a88:	00bfffc4 	movi	r2,-1
   11a8c:	f800283a 	ret
   11a90:	dfc00517 	ldw	ra,20(sp)
   11a94:	dd000417 	ldw	r20,16(sp)
   11a98:	dcc00317 	ldw	r19,12(sp)
   11a9c:	dc800217 	ldw	r18,8(sp)
   11aa0:	dc400117 	ldw	r17,4(sp)
   11aa4:	dc000017 	ldw	r16,0(sp)
   11aa8:	dec00604 	addi	sp,sp,24
   11aac:	f800283a 	ret

00011ab0 <_write_r>:
   11ab0:	defffd04 	addi	sp,sp,-12
   11ab4:	dc000015 	stw	r16,0(sp)
   11ab8:	04000074 	movhi	r16,1
   11abc:	dc400115 	stw	r17,4(sp)
   11ac0:	840a4a04 	addi	r16,r16,10536
   11ac4:	2023883a 	mov	r17,r4
   11ac8:	2809883a 	mov	r4,r5
   11acc:	300b883a 	mov	r5,r6
   11ad0:	380d883a 	mov	r6,r7
   11ad4:	dfc00215 	stw	ra,8(sp)
   11ad8:	80000015 	stw	zero,0(r16)
   11adc:	0011ec00 	call	11ec0 <write>
   11ae0:	00ffffc4 	movi	r3,-1
   11ae4:	10c0031e 	bne	r2,r3,11af4 <_write_r+0x44>
   11ae8:	80c00017 	ldw	r3,0(r16)
   11aec:	18000126 	beq	r3,zero,11af4 <_write_r+0x44>
   11af0:	88c00015 	stw	r3,0(r17)
   11af4:	dfc00217 	ldw	ra,8(sp)
   11af8:	dc400117 	ldw	r17,4(sp)
   11afc:	dc000017 	ldw	r16,0(sp)
   11b00:	dec00304 	addi	sp,sp,12
   11b04:	f800283a 	ret

00011b08 <__divsi3>:
   11b08:	20001b16 	blt	r4,zero,11b78 <__divsi3+0x70>
   11b0c:	000f883a 	mov	r7,zero
   11b10:	28001616 	blt	r5,zero,11b6c <__divsi3+0x64>
   11b14:	200d883a 	mov	r6,r4
   11b18:	29001a2e 	bgeu	r5,r4,11b84 <__divsi3+0x7c>
   11b1c:	00800804 	movi	r2,32
   11b20:	00c00044 	movi	r3,1
   11b24:	00000106 	br	11b2c <__divsi3+0x24>
   11b28:	10000d26 	beq	r2,zero,11b60 <__divsi3+0x58>
   11b2c:	294b883a 	add	r5,r5,r5
   11b30:	10bfffc4 	addi	r2,r2,-1
   11b34:	18c7883a 	add	r3,r3,r3
   11b38:	293ffb36 	bltu	r5,r4,11b28 <__alt_data_end+0xffff1b28>
   11b3c:	0005883a 	mov	r2,zero
   11b40:	18000726 	beq	r3,zero,11b60 <__divsi3+0x58>
   11b44:	0005883a 	mov	r2,zero
   11b48:	31400236 	bltu	r6,r5,11b54 <__divsi3+0x4c>
   11b4c:	314dc83a 	sub	r6,r6,r5
   11b50:	10c4b03a 	or	r2,r2,r3
   11b54:	1806d07a 	srli	r3,r3,1
   11b58:	280ad07a 	srli	r5,r5,1
   11b5c:	183ffa1e 	bne	r3,zero,11b48 <__alt_data_end+0xffff1b48>
   11b60:	38000126 	beq	r7,zero,11b68 <__divsi3+0x60>
   11b64:	0085c83a 	sub	r2,zero,r2
   11b68:	f800283a 	ret
   11b6c:	014bc83a 	sub	r5,zero,r5
   11b70:	39c0005c 	xori	r7,r7,1
   11b74:	003fe706 	br	11b14 <__alt_data_end+0xffff1b14>
   11b78:	0109c83a 	sub	r4,zero,r4
   11b7c:	01c00044 	movi	r7,1
   11b80:	003fe306 	br	11b10 <__alt_data_end+0xffff1b10>
   11b84:	00c00044 	movi	r3,1
   11b88:	003fee06 	br	11b44 <__alt_data_end+0xffff1b44>

00011b8c <__modsi3>:
   11b8c:	20001716 	blt	r4,zero,11bec <__modsi3+0x60>
   11b90:	000f883a 	mov	r7,zero
   11b94:	2005883a 	mov	r2,r4
   11b98:	28001216 	blt	r5,zero,11be4 <__modsi3+0x58>
   11b9c:	2900162e 	bgeu	r5,r4,11bf8 <__modsi3+0x6c>
   11ba0:	01800804 	movi	r6,32
   11ba4:	00c00044 	movi	r3,1
   11ba8:	00000106 	br	11bb0 <__modsi3+0x24>
   11bac:	30000a26 	beq	r6,zero,11bd8 <__modsi3+0x4c>
   11bb0:	294b883a 	add	r5,r5,r5
   11bb4:	31bfffc4 	addi	r6,r6,-1
   11bb8:	18c7883a 	add	r3,r3,r3
   11bbc:	293ffb36 	bltu	r5,r4,11bac <__alt_data_end+0xffff1bac>
   11bc0:	18000526 	beq	r3,zero,11bd8 <__modsi3+0x4c>
   11bc4:	1806d07a 	srli	r3,r3,1
   11bc8:	11400136 	bltu	r2,r5,11bd0 <__modsi3+0x44>
   11bcc:	1145c83a 	sub	r2,r2,r5
   11bd0:	280ad07a 	srli	r5,r5,1
   11bd4:	183ffb1e 	bne	r3,zero,11bc4 <__alt_data_end+0xffff1bc4>
   11bd8:	38000126 	beq	r7,zero,11be0 <__modsi3+0x54>
   11bdc:	0085c83a 	sub	r2,zero,r2
   11be0:	f800283a 	ret
   11be4:	014bc83a 	sub	r5,zero,r5
   11be8:	003fec06 	br	11b9c <__alt_data_end+0xffff1b9c>
   11bec:	0109c83a 	sub	r4,zero,r4
   11bf0:	01c00044 	movi	r7,1
   11bf4:	003fe706 	br	11b94 <__alt_data_end+0xffff1b94>
   11bf8:	00c00044 	movi	r3,1
   11bfc:	003ff106 	br	11bc4 <__alt_data_end+0xffff1bc4>

00011c00 <__udivsi3>:
   11c00:	200d883a 	mov	r6,r4
   11c04:	2900152e 	bgeu	r5,r4,11c5c <__udivsi3+0x5c>
   11c08:	28001416 	blt	r5,zero,11c5c <__udivsi3+0x5c>
   11c0c:	00800804 	movi	r2,32
   11c10:	00c00044 	movi	r3,1
   11c14:	00000206 	br	11c20 <__udivsi3+0x20>
   11c18:	10000e26 	beq	r2,zero,11c54 <__udivsi3+0x54>
   11c1c:	28000516 	blt	r5,zero,11c34 <__udivsi3+0x34>
   11c20:	294b883a 	add	r5,r5,r5
   11c24:	10bfffc4 	addi	r2,r2,-1
   11c28:	18c7883a 	add	r3,r3,r3
   11c2c:	293ffa36 	bltu	r5,r4,11c18 <__alt_data_end+0xffff1c18>
   11c30:	18000826 	beq	r3,zero,11c54 <__udivsi3+0x54>
   11c34:	0005883a 	mov	r2,zero
   11c38:	31400236 	bltu	r6,r5,11c44 <__udivsi3+0x44>
   11c3c:	314dc83a 	sub	r6,r6,r5
   11c40:	10c4b03a 	or	r2,r2,r3
   11c44:	1806d07a 	srli	r3,r3,1
   11c48:	280ad07a 	srli	r5,r5,1
   11c4c:	183ffa1e 	bne	r3,zero,11c38 <__alt_data_end+0xffff1c38>
   11c50:	f800283a 	ret
   11c54:	0005883a 	mov	r2,zero
   11c58:	f800283a 	ret
   11c5c:	00c00044 	movi	r3,1
   11c60:	003ff406 	br	11c34 <__alt_data_end+0xffff1c34>

00011c64 <__umodsi3>:
   11c64:	2005883a 	mov	r2,r4
   11c68:	2900122e 	bgeu	r5,r4,11cb4 <__umodsi3+0x50>
   11c6c:	28001116 	blt	r5,zero,11cb4 <__umodsi3+0x50>
   11c70:	01800804 	movi	r6,32
   11c74:	00c00044 	movi	r3,1
   11c78:	00000206 	br	11c84 <__umodsi3+0x20>
   11c7c:	30000c26 	beq	r6,zero,11cb0 <__umodsi3+0x4c>
   11c80:	28000516 	blt	r5,zero,11c98 <__umodsi3+0x34>
   11c84:	294b883a 	add	r5,r5,r5
   11c88:	31bfffc4 	addi	r6,r6,-1
   11c8c:	18c7883a 	add	r3,r3,r3
   11c90:	293ffa36 	bltu	r5,r4,11c7c <__alt_data_end+0xffff1c7c>
   11c94:	18000626 	beq	r3,zero,11cb0 <__umodsi3+0x4c>
   11c98:	1806d07a 	srli	r3,r3,1
   11c9c:	11400136 	bltu	r2,r5,11ca4 <__umodsi3+0x40>
   11ca0:	1145c83a 	sub	r2,r2,r5
   11ca4:	280ad07a 	srli	r5,r5,1
   11ca8:	183ffb1e 	bne	r3,zero,11c98 <__alt_data_end+0xffff1c98>
   11cac:	f800283a 	ret
   11cb0:	f800283a 	ret
   11cb4:	00c00044 	movi	r3,1
   11cb8:	003ff706 	br	11c98 <__alt_data_end+0xffff1c98>

00011cbc <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11cbc:	008007c4 	movi	r2,31
   11cc0:	11002136 	bltu	r2,r4,11d48 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11cc4:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11cc8:	00ffff84 	movi	r3,-2
   11ccc:	38c4703a 	and	r2,r7,r3
   11cd0:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   11cd4:	200490fa 	slli	r2,r4,3
   11cd8:	02000074 	movhi	r8,1
   11cdc:	420a7004 	addi	r8,r8,10688
   11ce0:	4085883a 	add	r2,r8,r2
   11ce4:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
   11ce8:	11400115 	stw	r5,4(r2)
   11cec:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   11cf0:	30000726 	beq	r6,zero,11d10 <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11cf4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11cf8:	28c6703a 	and	r3,r5,r3
   11cfc:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   11d00:	d0e07b17 	ldw	r3,-32276(gp)
   11d04:	1104983a 	sll	r2,r2,r4
   11d08:	10c4b03a 	or	r2,r2,r3
   11d0c:	00000706 	br	11d2c <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11d10:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11d14:	28c6703a 	and	r3,r5,r3
   11d18:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   11d1c:	1104983a 	sll	r2,r2,r4
   11d20:	d0e07b17 	ldw	r3,-32276(gp)
   11d24:	0084303a 	nor	r2,zero,r2
   11d28:	10c4703a 	and	r2,r2,r3
   11d2c:	d0a07b15 	stw	r2,-32276(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11d30:	d0a07b17 	ldw	r2,-32276(gp)
   11d34:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11d38:	2801703a 	wrctl	status,r5
   11d3c:	3801703a 	wrctl	status,r7
   11d40:	0005883a 	mov	r2,zero
   11d44:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
   11d48:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
   11d4c:	f800283a 	ret

00011d50 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   11d50:	deffff04 	addi	sp,sp,-4
   11d54:	01000074 	movhi	r4,1
   11d58:	01400074 	movhi	r5,1
   11d5c:	dfc00015 	stw	ra,0(sp)
   11d60:	21097704 	addi	r4,r4,9692
   11d64:	2949df04 	addi	r5,r5,10108

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   11d68:	2140061e 	bne	r4,r5,11d84 <alt_load+0x34>
   11d6c:	01000074 	movhi	r4,1
   11d70:	01400074 	movhi	r5,1
   11d74:	21000804 	addi	r4,r4,32
   11d78:	29400804 	addi	r5,r5,32
   11d7c:	2140121e 	bne	r4,r5,11dc8 <alt_load+0x78>
   11d80:	00000b06 	br	11db0 <alt_load+0x60>
   11d84:	00c00074 	movhi	r3,1
   11d88:	18c9df04 	addi	r3,r3,10108
   11d8c:	1907c83a 	sub	r3,r3,r4
   11d90:	0005883a 	mov	r2,zero
  {
    while( to != end )
   11d94:	10fff526 	beq	r2,r3,11d6c <__alt_data_end+0xffff1d6c>
    {
      *to++ = *from++;
   11d98:	114f883a 	add	r7,r2,r5
   11d9c:	39c00017 	ldw	r7,0(r7)
   11da0:	110d883a 	add	r6,r2,r4
   11da4:	10800104 	addi	r2,r2,4
   11da8:	31c00015 	stw	r7,0(r6)
   11dac:	003ff906 	br	11d94 <__alt_data_end+0xffff1d94>
   11db0:	01000074 	movhi	r4,1
   11db4:	01400074 	movhi	r5,1
   11db8:	2108fd04 	addi	r4,r4,9204
   11dbc:	2948fd04 	addi	r5,r5,9204

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   11dc0:	2140101e 	bne	r4,r5,11e04 <alt_load+0xb4>
   11dc4:	00000b06 	br	11df4 <alt_load+0xa4>
   11dc8:	00c00074 	movhi	r3,1
   11dcc:	18c06004 	addi	r3,r3,384
   11dd0:	1907c83a 	sub	r3,r3,r4
   11dd4:	0005883a 	mov	r2,zero
  {
    while( to != end )
   11dd8:	10fff526 	beq	r2,r3,11db0 <__alt_data_end+0xffff1db0>
    {
      *to++ = *from++;
   11ddc:	114f883a 	add	r7,r2,r5
   11de0:	39c00017 	ldw	r7,0(r7)
   11de4:	110d883a 	add	r6,r2,r4
   11de8:	10800104 	addi	r2,r2,4
   11dec:	31c00015 	stw	r7,0(r6)
   11df0:	003ff906 	br	11dd8 <__alt_data_end+0xffff1dd8>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   11df4:	001216c0 	call	1216c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   11df8:	dfc00017 	ldw	ra,0(sp)
   11dfc:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   11e00:	00122581 	jmpi	12258 <alt_icache_flush_all>
   11e04:	00c00074 	movhi	r3,1
   11e08:	18c97704 	addi	r3,r3,9692
   11e0c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   11e10:	0005883a 	mov	r2,zero
  {
    while( to != end )
   11e14:	18bff726 	beq	r3,r2,11df4 <__alt_data_end+0xffff1df4>
    {
      *to++ = *from++;
   11e18:	114f883a 	add	r7,r2,r5
   11e1c:	39c00017 	ldw	r7,0(r7)
   11e20:	110d883a 	add	r6,r2,r4
   11e24:	10800104 	addi	r2,r2,4
   11e28:	31c00015 	stw	r7,0(r6)
   11e2c:	003ff906 	br	11e14 <__alt_data_end+0xffff1e14>

00011e30 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   11e30:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   11e34:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   11e38:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   11e3c:	0011f200 	call	11f20 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   11e40:	0011f400 	call	11f40 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   11e44:	d1a07c17 	ldw	r6,-32272(gp)
   11e48:	d1607d17 	ldw	r5,-32268(gp)
   11e4c:	d1207e17 	ldw	r4,-32264(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   11e50:	dfc00017 	ldw	ra,0(sp)
   11e54:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   11e58:	00104c81 	jmpi	104c8 <main>

00011e5c <times>:
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   11e5c:	d0e08017 	ldw	r3,-32256(gp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   11e60:	d0a07f17 	ldw	r2,-32260(gp)
{
  clock_t ticks = alt_nticks(); 

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   11e64:	1800101e 	bne	r3,zero,11ea8 <times+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   11e68:	d0a00c17 	ldw	r2,-32720(gp)
   11e6c:	10000926 	beq	r2,zero,11e94 <times+0x38>
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   11e70:	deffff04 	addi	sp,sp,-4
   11e74:	dfc00015 	stw	ra,0(sp)
   11e78:	103ee83a 	callr	r2

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  {
    ALT_ERRNO = ENOSYS;
   11e7c:	00c01604 	movi	r3,88
   11e80:	10c00015 	stw	r3,0(r2)
    return 0;
   11e84:	0005883a 	mov	r2,zero
  buf->tms_stime  = ticks;
  buf->tms_cutime = 0;
  buf->tms_cstime = 0;

  return ticks;
}
   11e88:	dfc00017 	ldw	ra,0(sp)
   11e8c:	dec00104 	addi	sp,sp,4
   11e90:	f800283a 	ret
   11e94:	d0a07a04 	addi	r2,gp,-32280

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  {
    ALT_ERRNO = ENOSYS;
   11e98:	00c01604 	movi	r3,88
   11e9c:	10c00015 	stw	r3,0(r2)
    return 0;
   11ea0:	0005883a 	mov	r2,zero
  buf->tms_stime  = ticks;
  buf->tms_cutime = 0;
  buf->tms_cstime = 0;

  return ticks;
}
   11ea4:	f800283a 	ret
    return 0;
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   11ea8:	20000015 	stw	zero,0(r4)
  buf->tms_stime  = ticks;
   11eac:	20800115 	stw	r2,4(r4)
  buf->tms_cutime = 0;
   11eb0:	20000215 	stw	zero,8(r4)
  buf->tms_cstime = 0;
   11eb4:	20000315 	stw	zero,12(r4)

  return ticks;
   11eb8:	f800283a 	ret

00011ebc <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
   11ebc:	00120e41 	jmpi	120e4 <alt_busy_sleep>

00011ec0 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   11ec0:	00800044 	movi	r2,1
   11ec4:	20800226 	beq	r4,r2,11ed0 <write+0x10>
   11ec8:	00800084 	movi	r2,2
   11ecc:	2080041e 	bne	r4,r2,11ee0 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   11ed0:	01000074 	movhi	r4,1
   11ed4:	000f883a 	mov	r7,zero
   11ed8:	2109d604 	addi	r4,r4,10072
   11edc:	0011f501 	jmpi	11f50 <altera_avalon_jtag_uart_write>
   11ee0:	d0a00c17 	ldw	r2,-32720(gp)
   11ee4:	10000926 	beq	r2,zero,11f0c <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   11ee8:	deffff04 	addi	sp,sp,-4
   11eec:	dfc00015 	stw	ra,0(sp)
   11ef0:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   11ef4:	00c01444 	movi	r3,81
   11ef8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   11efc:	00bfffc4 	movi	r2,-1
   11f00:	dfc00017 	ldw	ra,0(sp)
   11f04:	dec00104 	addi	sp,sp,4
   11f08:	f800283a 	ret
   11f0c:	d0a07a04 	addi	r2,gp,-32280
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   11f10:	00c01444 	movi	r3,81
   11f14:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   11f18:	00bfffc4 	movi	r2,-1
   11f1c:	f800283a 	ret

00011f20 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   11f20:	deffff04 	addi	sp,sp,-4
   11f24:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   11f28:	00123480 	call	12348 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   11f2c:	00800044 	movi	r2,1
   11f30:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   11f34:	dfc00017 	ldw	ra,0(sp)
   11f38:	dec00104 	addi	sp,sp,4
   11f3c:	f800283a 	ret

00011f40 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   11f40:	01000074 	movhi	r4,1
   11f44:	d1600804 	addi	r5,gp,-32736
   11f48:	2109af04 	addi	r4,r4,9916
   11f4c:	00121781 	jmpi	12178 <alt_dev_llist_insert>

00011f50 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   11f50:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   11f54:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   11f58:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   11f5c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   11f60:	2980072e 	bgeu	r5,r6,11f80 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   11f64:	38c00037 	ldwio	r3,0(r7)
   11f68:	18ffffec 	andhi	r3,r3,65535
   11f6c:	183ffc26 	beq	r3,zero,11f60 <__alt_data_end+0xffff1f60>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   11f70:	28c00007 	ldb	r3,0(r5)
   11f74:	20c00035 	stwio	r3,0(r4)
   11f78:	29400044 	addi	r5,r5,1
   11f7c:	003ff806 	br	11f60 <__alt_data_end+0xffff1f60>

  return count;
}
   11f80:	f800283a 	ret

00011f84 <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   11f84:	d1600804 	addi	r5,gp,-32736
   11f88:	00121e41 	jmpi	121e4 <alt_find_dev>

00011f8c <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   11f8c:	20800a17 	ldw	r2,40(r4)
   11f90:	10800023 	ldbuio	r2,0(r2)
   11f94:	28800005 	stb	r2,0(r5)

	return 0;
}
   11f98:	0005883a 	mov	r2,zero
   11f9c:	f800283a 	ret

00011fa0 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11fa0:	20800a17 	ldw	r2,40(r4)
   11fa4:	29400fcc 	andi	r5,r5,63
   11fa8:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11fac:	20800a17 	ldw	r2,40(r4)
   11fb0:	10800063 	ldbuio	r2,1(r2)
   11fb4:	30800005 	stb	r2,0(r6)

	return 0;
}
   11fb8:	0005883a 	mov	r2,zero
   11fbc:	f800283a 	ret

00011fc0 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11fc0:	20800a17 	ldw	r2,40(r4)
   11fc4:	29400fcc 	andi	r5,r5,63
   11fc8:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   11fcc:	20800a17 	ldw	r2,40(r4)
   11fd0:	11800065 	stbio	r6,1(r2)

	return 0;
}
   11fd4:	0005883a 	mov	r2,zero
   11fd8:	f800283a 	ret

00011fdc <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11fdc:	20800a17 	ldw	r2,40(r4)
   11fe0:	00c00c84 	movi	r3,50
   11fe4:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11fe8:	20800a17 	ldw	r2,40(r4)
   11fec:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11ff0:	00c00cc4 	movi	r3,51
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11ff4:	10803fcc 	andi	r2,r2,255
   11ff8:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11ffc:	20800a17 	ldw	r2,40(r4)
   12000:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   12004:	20800a17 	ldw	r2,40(r4)
   12008:	10800063 	ldbuio	r2,1(r2)
   1200c:	10803fcc 	andi	r2,r2,255
   12010:	1006923a 	slli	r3,r2,8
   12014:	28800017 	ldw	r2,0(r5)
   12018:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
   1201c:	10e0000c 	andi	r3,r2,32768
   12020:	18000126 	beq	r3,zero,12028 <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
   12024:	10bffff4 	orhi	r2,r2,65535
   12028:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   1202c:	0005883a 	mov	r2,zero
   12030:	f800283a 	ret

00012034 <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12034:	20800a17 	ldw	r2,40(r4)
   12038:	00c00d04 	movi	r3,52
   1203c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   12040:	20800a17 	ldw	r2,40(r4)
   12044:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12048:	00c00d44 	movi	r3,53
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1204c:	10803fcc 	andi	r2,r2,255
   12050:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   12054:	20800a17 	ldw	r2,40(r4)
   12058:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   1205c:	20800a17 	ldw	r2,40(r4)
   12060:	10800063 	ldbuio	r2,1(r2)
   12064:	10803fcc 	andi	r2,r2,255
   12068:	1006923a 	slli	r3,r2,8
   1206c:	28800017 	ldw	r2,0(r5)
   12070:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
   12074:	10e0000c 	andi	r3,r2,32768
   12078:	18000126 	beq	r3,zero,12080 <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
   1207c:	10bffff4 	orhi	r2,r2,65535
   12080:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   12084:	0005883a 	mov	r2,zero
   12088:	f800283a 	ret

0001208c <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1208c:	20800a17 	ldw	r2,40(r4)
   12090:	00c00d84 	movi	r3,54
   12094:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   12098:	20800a17 	ldw	r2,40(r4)
   1209c:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   120a0:	00c00dc4 	movi	r3,55
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   120a4:	10803fcc 	andi	r2,r2,255
   120a8:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   120ac:	20800a17 	ldw	r2,40(r4)
   120b0:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   120b4:	20800a17 	ldw	r2,40(r4)
   120b8:	10800063 	ldbuio	r2,1(r2)
   120bc:	10803fcc 	andi	r2,r2,255
   120c0:	1006923a 	slli	r3,r2,8
   120c4:	28800017 	ldw	r2,0(r5)
   120c8:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
   120cc:	10e0000c 	andi	r3,r2,32768
   120d0:	18000126 	beq	r3,zero,120d8 <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
   120d4:	10bffff4 	orhi	r2,r2,65535
   120d8:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   120dc:	0005883a 	mov	r2,zero
   120e0:	f800283a 	ret

000120e4 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   120e4:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   120e8:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   120ec:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   120f0:	dc000015 	stw	r16,0(sp)
   120f4:	dfc00115 	stw	ra,4(sp)
   120f8:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   120fc:	0011c000 	call	11c00 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   12100:	10001026 	beq	r2,zero,12144 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   12104:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   12108:	013999b4 	movhi	r4,58982
   1210c:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   12110:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   12114:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   12118:	297fffc4 	addi	r5,r5,-1
   1211c:	283ffe1e 	bne	r5,zero,12118 <__alt_data_end+0xffff2118>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   12120:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   12124:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   12128:	18bffb16 	blt	r3,r2,12118 <__alt_data_end+0xffff2118>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1212c:	01400144 	movi	r5,5
   12130:	8009883a 	mov	r4,r16
   12134:	00112880 	call	11288 <__mulsi3>
   12138:	10bfffc4 	addi	r2,r2,-1
   1213c:	103ffe1e 	bne	r2,zero,12138 <__alt_data_end+0xffff2138>
   12140:	00000506 	br	12158 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   12144:	01400144 	movi	r5,5
   12148:	8009883a 	mov	r4,r16
   1214c:	00112880 	call	11288 <__mulsi3>
   12150:	10bfffc4 	addi	r2,r2,-1
   12154:	00bffe16 	blt	zero,r2,12150 <__alt_data_end+0xffff2150>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   12158:	0005883a 	mov	r2,zero
   1215c:	dfc00117 	ldw	ra,4(sp)
   12160:	dc000017 	ldw	r16,0(sp)
   12164:	dec00204 	addi	sp,sp,8
   12168:	f800283a 	ret

0001216c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1216c:	f800283a 	ret

00012170 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   12170:	3005883a 	mov	r2,r6
   12174:	f800283a 	ret

00012178 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   12178:	20000226 	beq	r4,zero,12184 <alt_dev_llist_insert+0xc>
   1217c:	20800217 	ldw	r2,8(r4)
   12180:	1000101e 	bne	r2,zero,121c4 <alt_dev_llist_insert+0x4c>
   12184:	d0a00c17 	ldw	r2,-32720(gp)
   12188:	10000926 	beq	r2,zero,121b0 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1218c:	deffff04 	addi	sp,sp,-4
   12190:	dfc00015 	stw	ra,0(sp)
   12194:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   12198:	00c00584 	movi	r3,22
   1219c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   121a0:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   121a4:	dfc00017 	ldw	ra,0(sp)
   121a8:	dec00104 	addi	sp,sp,4
   121ac:	f800283a 	ret
   121b0:	d0a07a04 	addi	r2,gp,-32280
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   121b4:	00c00584 	movi	r3,22
   121b8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   121bc:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   121c0:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   121c4:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   121c8:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   121cc:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   121d0:	28800017 	ldw	r2,0(r5)
   121d4:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   121d8:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   121dc:	0005883a 	mov	r2,zero
   121e0:	f800283a 	ret

000121e4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   121e4:	defffb04 	addi	sp,sp,-20
   121e8:	dcc00315 	stw	r19,12(sp)
   121ec:	dc800215 	stw	r18,8(sp)
   121f0:	dc400115 	stw	r17,4(sp)
   121f4:	dc000015 	stw	r16,0(sp)
   121f8:	dfc00415 	stw	ra,16(sp)
   121fc:	2027883a 	mov	r19,r4
   12200:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   12204:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   12208:	00114280 	call	11428 <strlen>
   1220c:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12210:	84400726 	beq	r16,r17,12230 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   12214:	81000217 	ldw	r4,8(r16)
   12218:	900d883a 	mov	r6,r18
   1221c:	980b883a 	mov	r5,r19
   12220:	00123c40 	call	123c4 <memcmp>
   12224:	10000426 	beq	r2,zero,12238 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   12228:	84000017 	ldw	r16,0(r16)
   1222c:	003ff806 	br	12210 <__alt_data_end+0xffff2210>
  }
  
  /* No match found */
  
  return NULL;
   12230:	0005883a 	mov	r2,zero
   12234:	00000106 	br	1223c <alt_find_dev+0x58>
   12238:	8005883a 	mov	r2,r16
}
   1223c:	dfc00417 	ldw	ra,16(sp)
   12240:	dcc00317 	ldw	r19,12(sp)
   12244:	dc800217 	ldw	r18,8(sp)
   12248:	dc400117 	ldw	r17,4(sp)
   1224c:	dc000017 	ldw	r16,0(sp)
   12250:	dec00504 	addi	sp,sp,20
   12254:	f800283a 	ret

00012258 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   12258:	f800283a 	ret

0001225c <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1225c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12260:	00bfff84 	movi	r2,-2
   12264:	1884703a 	and	r2,r3,r2
   12268:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1226c:	21400117 	ldw	r5,4(r4)
   12270:	20800017 	ldw	r2,0(r4)
   12274:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
   12278:	21400117 	ldw	r5,4(r4)
   1227c:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   12280:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
   12284:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12288:	1801703a 	wrctl	status,r3
   1228c:	f800283a 	ret

00012290 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   12290:	d0a07f17 	ldw	r2,-32260(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   12294:	defffb04 	addi	sp,sp,-20
   12298:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1229c:	d4200d17 	ldw	r16,-32716(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   122a0:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   122a4:	dc800215 	stw	r18,8(sp)
   122a8:	dc400115 	stw	r17,4(sp)
   122ac:	dfc00415 	stw	ra,16(sp)
   122b0:	dcc00315 	stw	r19,12(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   122b4:	d0a07f15 	stw	r2,-32260(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   122b8:	d4600d04 	addi	r17,gp,-32716
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
   122bc:	04800044 	movi	r18,1

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   122c0:	84401a26 	beq	r16,r17,1232c <alt_tick+0x9c>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   122c4:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
   122c8:	84c00017 	ldw	r19,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   122cc:	10000326 	beq	r2,zero,122dc <alt_tick+0x4c>
   122d0:	d0a07f17 	ldw	r2,-32260(gp)
   122d4:	1000011e 	bne	r2,zero,122dc <alt_tick+0x4c>
    {
      alarm->rollover = 0;
   122d8:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   122dc:	d0e07f17 	ldw	r3,-32260(gp)
   122e0:	80800217 	ldw	r2,8(r16)
   122e4:	18800f36 	bltu	r3,r2,12324 <alt_tick+0x94>
   122e8:	80800403 	ldbu	r2,16(r16)
   122ec:	10000d1e 	bne	r2,zero,12324 <alt_tick+0x94>
    {
      next_callback = alarm->callback (alarm->context);
   122f0:	80800317 	ldw	r2,12(r16)
   122f4:	81000517 	ldw	r4,20(r16)
   122f8:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   122fc:	1000031e 	bne	r2,zero,1230c <alt_tick+0x7c>
      {
        alt_alarm_stop (alarm);
   12300:	8009883a 	mov	r4,r16
   12304:	001225c0 	call	1225c <alt_alarm_stop>
   12308:	00000606 	br	12324 <alt_tick+0x94>
      }
      else
      {
        alarm->time += next_callback;
   1230c:	80c00217 	ldw	r3,8(r16)
   12310:	10c5883a 	add	r2,r2,r3
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   12314:	d0e07f17 	ldw	r3,-32260(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
   12318:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1231c:	10c0012e 	bgeu	r2,r3,12324 <alt_tick+0x94>
        {
          alarm->rollover = 1;
   12320:	84800405 	stb	r18,16(r16)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   12324:	9821883a 	mov	r16,r19
   12328:	003fe506 	br	122c0 <__alt_data_end+0xffff22c0>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   1232c:	dfc00417 	ldw	ra,16(sp)
   12330:	dcc00317 	ldw	r19,12(sp)
   12334:	dc800217 	ldw	r18,8(sp)
   12338:	dc400117 	ldw	r17,4(sp)
   1233c:	dc000017 	ldw	r16,0(sp)
   12340:	dec00504 	addi	sp,sp,20
   12344:	f800283a 	ret

00012348 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   12348:	000170fa 	wrctl	ienable,zero
   1234c:	f800283a 	ret

00012350 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   12350:	213ffe84 	addi	r4,r4,-6
   12354:	008003c4 	movi	r2,15
   12358:	11001636 	bltu	r2,r4,123b4 <alt_exception_cause_generated_bad_addr+0x64>
   1235c:	200890ba 	slli	r4,r4,2
   12360:	00800074 	movhi	r2,1
   12364:	1088dd04 	addi	r2,r2,9076
   12368:	2089883a 	add	r4,r4,r2
   1236c:	20800017 	ldw	r2,0(r4)
   12370:	1000683a 	jmp	r2
   12374:	000123bc 	xorhi	zero,zero,1166
   12378:	000123bc 	xorhi	zero,zero,1166
   1237c:	000123b4 	movhi	zero,1166
   12380:	000123b4 	movhi	zero,1166
   12384:	000123b4 	movhi	zero,1166
   12388:	000123bc 	xorhi	zero,zero,1166
   1238c:	000123b4 	movhi	zero,1166
   12390:	000123b4 	movhi	zero,1166
   12394:	000123bc 	xorhi	zero,zero,1166
   12398:	000123bc 	xorhi	zero,zero,1166
   1239c:	000123b4 	movhi	zero,1166
   123a0:	000123bc 	xorhi	zero,zero,1166
   123a4:	000123b4 	movhi	zero,1166
   123a8:	000123b4 	movhi	zero,1166
   123ac:	000123b4 	movhi	zero,1166
   123b0:	000123bc 	xorhi	zero,zero,1166
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   123b4:	0005883a 	mov	r2,zero
   123b8:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   123bc:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   123c0:	f800283a 	ret

000123c4 <memcmp>:
   123c4:	218d883a 	add	r6,r4,r6
   123c8:	21800826 	beq	r4,r6,123ec <memcmp+0x28>
   123cc:	20800003 	ldbu	r2,0(r4)
   123d0:	28c00003 	ldbu	r3,0(r5)
   123d4:	10c00226 	beq	r2,r3,123e0 <memcmp+0x1c>
   123d8:	10c5c83a 	sub	r2,r2,r3
   123dc:	f800283a 	ret
   123e0:	21000044 	addi	r4,r4,1
   123e4:	29400044 	addi	r5,r5,1
   123e8:	003ff706 	br	123c8 <__alt_data_end+0xffff23c8>
   123ec:	0005883a 	mov	r2,zero
   123f0:	f800283a 	ret
