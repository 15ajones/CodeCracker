
CodeCracker.elf:     file format elf32-littlenios2
CodeCracker.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00001c70 memsz 0x00001c70 flags r-x
    LOAD off    0x00002c90 vaddr 0x00011c90 paddr 0x00011e34 align 2**12
         filesz 0x000001a4 memsz 0x000001a4 flags rw-
    LOAD off    0x00002fd8 vaddr 0x00011fd8 paddr 0x00011fd8 align 2**12
         filesz 0x00000000 memsz 0x00000444 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001a50  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000c0  00011bd0  00011bd0  00002bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000001a4  00011c90  00011e34  00002c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000444  00011fd8  00011fd8  00002fd8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  0001241c  0001241c  00002e34  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002e34  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000520  00000000  00000000  00002e58  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00006d20  00000000  00000000  00003378  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000263f  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002ade  00000000  00000000  0000c6d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000007f0  00000000  00000000  0000f1b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001d78  00000000  00000000  0000f9a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000204c  00000000  00000000  00011720  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0001376c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000003d8  00000000  00000000  000137b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000156e6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000156e9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000156ec  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000156ed  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000156ee  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000156f2  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000156f6  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000156fa  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00015703  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0001570c  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00015715  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000005a  00000000  00000000  00015720  2**0
                  CONTENTS, READONLY
 29 .jdi          00004920  00000000  00000000  0001577a  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00078340  00000000  00000000  0001a09a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
00011bd0 l    d  .rodata	00000000 .rodata
00011c90 l    d  .rwdata	00000000 .rwdata
00011fd8 l    d  .bss	00000000 .bss
0001241c l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../CodeCracker_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00011c56 l     O .rodata	0000002b CSWTCH.36
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00010bc0 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00011c90 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_times.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00011d70 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0001194c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
00012018 g     O .bss	00000004 alt_instruction_exception_handler
000115d4 g     F .text	0000002c alt_main
0001062c g     F .text	00000014 led_write
00010ad4 g     F .text	00000080 _puts_r
0001231c g     O .bss	00000100 alt_irq
00011fdc g     O .bss	00000004 location
00011e34 g       *ABS*	00000000 __flash_rwdata_start
000104e0 g     F .text	00000054 print
00010a88 g     F .text	0000004c printf
0001029c g     F .text	000000a0 getActualText
00011dfc g     O .rwdata	00000004 timer
000101bc g     F .text	00000080 sys_timer_isr
00011600 g     F .text	00000038 alt_putstr
00011df4 g     O .rwdata	00000004 FLATHIGH
00011e10 g     O .rwdata	00000004 jtag_uart
00011b24 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00011638 g     F .text	00000060 times
000106a4 g     F .text	0000000c is_flat
000117b8 g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
00011ffc g     O .bss	00000004 errno
00012008 g     O .bss	00000004 alt_argv
00019df4 g       *ABS*	00000000 _gp
00011698 g     F .text	00000004 usleep
00011d9c g     O .rwdata	00000030 alt_fd_list
000119c0 g     F .text	00000074 alt_find_dev
00010b54 g     F .text	00000014 puts
00011b2c g     F .text	00000074 alt_exception_cause_generated_bad_addr
00010a4c g     F .text	0000003c _printf_r
0001137c g     F .text	00000064 .hidden __udivsi3
00011fe0 g     O .bss	00000004 length
00011df8 g     O .rwdata	00000004 FLATLOW
00011e14 g     O .rwdata	00000004 alt_max_fd
00011460 g     F .text	00000094 alt_irq_register
00011e00 g     O .rwdata	00000004 _global_impure_ptr
0001241c g       *ABS*	00000000 __bss_end
00011a6c g     F .text	000000b8 alt_tick
00011fe4 g     O .bss	00000004 static_flag
00011a38 g     F .text	00000034 alt_alarm_stop
00012000 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
00011dcc g     O .rwdata	00000028 alt_dev_null
00011fe8 g     O .bss	00000004 serverdata
0001023c g     F .text	00000060 initializeDisplay
00011948 g     F .text	00000004 alt_dcache_flush_all
00011e34 g       *ABS*	00000000 __ram_rwdata_end
000106b0 g     F .text	00000070 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00010534 g     F .text	000000f8 print_letters
00011e18 g     O .rwdata	00000008 alt_dev_list
0001201c g     O .bss	00000200 text
0001169c g     F .text	00000060 write
00011c90 g       *ABS*	00000000 __ram_rodata_end
00010b68 g     F .text	0000003c strcat
00011fec g     O .bss	00000001 led
000113e0 g     F .text	00000058 .hidden __umodsi3
0001241c g       *ABS*	00000000 end
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
0001172c g     F .text	00000034 altera_avalon_jtag_uart_write
00010c2c g     F .text	0000052c ___vfprintf_internal_r
00010180 g     F .text	0000003c _start
00011ff0 g     O .bss	00000004 level
00012014 g     O .bss	00000004 _alt_tick_rate
00012010 g     O .bss	00000004 _alt_nticks
0001171c g     F .text	00000010 alt_sys_init
00011768 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
00011438 g     F .text	00000028 .hidden __mulsi3
00011c90 g       *ABS*	00000000 __ram_rwdata_start
00011bd0 g       *ABS*	00000000 __ram_rodata_start
000118c0 g     F .text	00000088 alt_busy_sleep
00011810 g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
00011ba0 g     F .text	00000030 memcmp
0001241c g       *ABS*	00000000 __alt_stack_base
000104d0 g     F .text	00000010 getBinaryLetter
00011954 g     F .text	0000006c alt_dev_llist_insert
0001221c g     O .bss	00000100 enteredText
00011174 g     F .text	000000b8 __sfvwrite_small_dev
00011fd8 g       *ABS*	00000000 __bss_start
00010a2c g     F .text	00000020 memset
00010720 g     F .text	0000030c main
00012004 g     O .bss	00000004 alt_envp
00011e0c g     O .rwdata	00000004 uart_0
00011e28 g     O .rwdata	00000004 alt_errno
00011284 g     F .text	00000084 .hidden __divsi3
00010494 g     F .text	00000008 updateTimer
00011bd0 g       *ABS*	00000000 __flash_rodata_start
00011ff4 g     O .bss	00000004 admin_flag
000116fc g     F .text	00000020 alt_irq_init
0001049c g     F .text	00000008 updateLocation
0001122c g     F .text	00000058 _write_r
00010640 g     F .text	00000030 led_response
00011e04 g     O .rwdata	00000004 _impure_ptr
0001200c g     O .bss	00000004 alt_argc
00011ff8 g     O .bss	00000001 prevserverdata
00010020 g       .exceptions	00000000 alt_irq_entry
00011fd8 g     O .bss	00000001 pwm
00011e20 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00011760 g     F .text	00000008 alt_up_accelerometer_spi_open_dev
00011e34 g       *ABS*	00000000 _edata
0001241c g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
00011308 g     F .text	00000074 .hidden __modsi3
00011868 g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010670 g     F .text	00000034 convert_read
0001000c g       .entry	00000000 _exit
0001177c g     F .text	00000020 alt_up_accelerometer_spi_read
0001179c g     F .text	0000001c alt_up_accelerometer_spi_write
000104a4 g     F .text	0000002c getBin
00010ba4 g     F .text	0000001c strlen
00011a34 g     F .text	00000004 alt_icache_flush_all
0001033c g     F .text	00000158 updateText
00011e08 g     O .rwdata	00000004 alt_priority_mask
00011158 g     F .text	0000001c __vfprintf_internal
00011e2c g     O .rwdata	00000008 alt_alarm_list
000114f4 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1010c:	04000074 	movhi	r16,1
   10110:	8408c704 	addi	r16,r16,8988

  active = alt_irq_pending ();

  do
  {
    i = 0;
   10114:	000b883a 	mov	r5,zero
    mask = 1;
   10118:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	1888703a 	and	r4,r3,r2
   10120:	20000b26 	beq	r4,zero,10150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   10124:	280490fa 	slli	r2,r5,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	183ff51e 	bne	r3,zero,10114 <__alt_data_end+0xffff0114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10150:	1085883a 	add	r2,r2,r2
      i++;
   10154:	29400044 	addi	r5,r5,1

    } while (1);
   10158:	003ff006 	br	1011c <__alt_data_end+0xffff011c>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a08917 	ldw	r2,-32220(gp)
   10160:	10000426 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10164:	200b883a 	mov	r5,r4
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1018c:	d6a77d14 	ori	gp,gp,40436
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	1087f614 	ori	r2,r2,8152

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18c90714 	ori	r3,r3,9244

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <__alt_data_end+0xffff01a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	00114f40 	call	114f4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	00115d40 	call	115d4 <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <__alt_data_end+0xffff01b8>

000101bc <sys_timer_isr>:
}

////////////////////////////////////////////////

void sys_timer_isr() {
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   101bc:	008000b4 	movhi	r2,2
   101c0:	10840804 	addi	r2,r2,4128
   101c4:	10000035 	stwio	zero,0(r2)

    if (pwm < abs(level)) {
   101c8:	d0a07f17 	ldw	r2,-32260(gp)
   101cc:	d1607907 	ldb	r5,-32284(gp)
   101d0:	1009883a 	mov	r4,r2
   101d4:	1000010e 	bge	r2,zero,101dc <sys_timer_isr+0x20>
   101d8:	0089c83a 	sub	r4,zero,r2
   101dc:	00c000b4 	movhi	r3,2
   101e0:	18c43004 	addi	r3,r3,4288
   101e4:	2900080e 	bge	r5,r4,10208 <sys_timer_isr+0x4c>

        if (level < 0) {
   101e8:	1000040e 	bge	r2,zero,101fc <sys_timer_isr+0x40>
alt_8 pwm = 0;
alt_u8 led;
int level;

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   101ec:	d0a07e03 	ldbu	r2,-32264(gp)
   101f0:	1085883a 	add	r2,r2,r2
   101f4:	10803fcc 	andi	r2,r2,255
   101f8:	00000406 	br	1020c <sys_timer_isr+0x50>
   101fc:	d0a07e03 	ldbu	r2,-32264(gp)
   10200:	1004d07a 	srli	r2,r2,1
   10204:	00000106 	br	1020c <sys_timer_isr+0x50>
   10208:	d0a07e03 	ldbu	r2,-32264(gp)
   1020c:	18800035 	stwio	r2,0(r3)

    } else {
        led_write(led);
    }

    if (pwm > PWM_PERIOD) {
   10210:	d0a07903 	ldbu	r2,-32284(gp)
   10214:	01000404 	movi	r4,16
   10218:	10c03fcc 	andi	r3,r2,255
   1021c:	18c0201c 	xori	r3,r3,128
   10220:	18ffe004 	addi	r3,r3,-128
   10224:	20c0020e 	bge	r4,r3,10230 <sys_timer_isr+0x74>
        pwm = 0;
   10228:	d0207905 	stb	zero,-32284(gp)
   1022c:	f800283a 	ret
    } else {
        pwm++;
   10230:	10800044 	addi	r2,r2,1
   10234:	d0a07905 	stb	r2,-32284(gp)
   10238:	f800283a 	ret

0001023c <initializeDisplay>:
/////DISPLAY FUNCTIONS///////

//Does initial setup of display
void initializeDisplay(){
	//These controls determine what functions the display is executing:
	prevserverdata = '0';
   1023c:	00800c04 	movi	r2,48
   10240:	d0a08105 	stb	r2,-32252(gp)
	return let;
}
//Prints each of the letters out to the screen
void print(int let5, int let4, int let3, int let2, int let1, int let0){
	//Takes the binary value for each letter and places it on each of the six 7-segment displays
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, let5);
   10244:	00c000b4 	movhi	r3,2

//Does initial setup of display
void initializeDisplay(){
	//These controls determine what functions the display is executing:
	prevserverdata = '0';
	serverdata = 5;   //random number to set server data not eqaualling any of the below...
   10248:	00800144 	movi	r2,5
   1024c:	d0a07d15 	stw	r2,-32268(gp)
	return let;
}
//Prints each of the letters out to the screen
void print(int let5, int let4, int let3, int let2, int let1, int let0){
	//Takes the binary value for each letter and places it on each of the six 7-segment displays
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, let5);
   10250:	18c41004 	addi	r3,r3,4160
   10254:	00801fc4 	movi	r2,127
   10258:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, let4);
   1025c:	00c000b4 	movhi	r3,2
   10260:	18c41404 	addi	r3,r3,4176
   10264:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, let3);
   10268:	00c000b4 	movhi	r3,2
   1026c:	18c41804 	addi	r3,r3,4192
   10270:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, let2);
   10274:	00c000b4 	movhi	r3,2
   10278:	18c41c04 	addi	r3,r3,4208
   1027c:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, let1);
   10280:	00c000b4 	movhi	r3,2
   10284:	18c42004 	addi	r3,r3,4224
   10288:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, let0);
   1028c:	00c000b4 	movhi	r3,2
   10290:	18c42404 	addi	r3,r3,4240
   10294:	18800035 	stwio	r2,0(r3)
   10298:	f800283a 	ret

0001029c <getActualText>:

int getActualText(){
	int idx = 0;	//We need two indicies because the entered and actual text sequences need not be aligned
	char currentLetter; //Keeps track of the character we are wanting to add
	//Go through each letter in the entered text
	for (int i = 0; i <= length; i++){
   1029c:	d2607b17 	ldw	r9,-32276(gp)
		currentLetter = enteredText[i];
   102a0:	02800074 	movhi	r10,1
   102a4:	01400074 	movhi	r5,1

int getActualText(){
	int idx = 0;	//We need two indicies because the entered and actual text sequences need not be aligned
	char currentLetter; //Keeps track of the character we are wanting to add
	//Go through each letter in the entered text
	for (int i = 0; i <= length; i++){
   102a8:	0009883a 	mov	r4,zero
	}
	return &enteredText[0];
}

int getActualText(){
	int idx = 0;	//We need two indicies because the entered and actual text sequences need not be aligned
   102ac:	0005883a 	mov	r2,zero
	char currentLetter; //Keeps track of the character we are wanting to add
	//Go through each letter in the entered text
	for (int i = 0; i <= length; i++){
		currentLetter = enteredText[i];
   102b0:	52888704 	addi	r10,r10,8732
		if (currentLetter > 96){
   102b4:	02c01804 	movi	r11,96
			//Gets only the uppercase letter
			currentLetter -= 32;
		}
		switch(currentLetter){
   102b8:	03001344 	movi	r12,77
   102bc:	29480704 	addi	r5,r5,8220
		case 'M':
			//We build the letter "M" from two "n's," so we need to change the index twice in the actual text
			text[idx] = 'N';
   102c0:	01801384 	movi	r6,78
		currentLetter = enteredText[i];
		if (currentLetter > 96){
			//Gets only the uppercase letter
			currentLetter -= 32;
		}
		switch(currentLetter){
   102c4:	034015c4 	movi	r13,87
			text[idx + 1] = 'N';
			idx += 2;
			break;
		case 'W':
			//We build the letter "W" from two "v's," so we need to change the index twice in the actual text
			text[idx] = 'V';
   102c8:	01c01584 	movi	r7,86

int getActualText(){
	int idx = 0;	//We need two indicies because the entered and actual text sequences need not be aligned
	char currentLetter; //Keeps track of the character we are wanting to add
	//Go through each letter in the entered text
	for (int i = 0; i <= length; i++){
   102cc:	49001a16 	blt	r9,r4,10338 <getActualText+0x9c>
		currentLetter = enteredText[i];
   102d0:	2287883a 	add	r3,r4,r10
   102d4:	18c00003 	ldbu	r3,0(r3)
		if (currentLetter > 96){
   102d8:	1a003fcc 	andi	r8,r3,255
   102dc:	4200201c 	xori	r8,r8,128
   102e0:	423fe004 	addi	r8,r8,-128
   102e4:	5a00010e 	bge	r11,r8,102ec <getActualText+0x50>
			//Gets only the uppercase letter
			currentLetter -= 32;
   102e8:	18fff804 	addi	r3,r3,-32
		}
		switch(currentLetter){
   102ec:	1a003fcc 	andi	r8,r3,255
   102f0:	4200201c 	xori	r8,r8,128
   102f4:	423fe004 	addi	r8,r8,-128
   102f8:	43000526 	beq	r8,r12,10310 <getActualText+0x74>
   102fc:	4340091e 	bne	r8,r13,10324 <getActualText+0x88>
			text[idx + 1] = 'N';
			idx += 2;
			break;
		case 'W':
			//We build the letter "W" from two "v's," so we need to change the index twice in the actual text
			text[idx] = 'V';
   10300:	2887883a 	add	r3,r5,r2
   10304:	19c00005 	stb	r7,0(r3)
			text[idx + 1] = 'V';
   10308:	19c00045 	stb	r7,1(r3)
   1030c:	00000306 	br	1031c <getActualText+0x80>
			currentLetter -= 32;
		}
		switch(currentLetter){
		case 'M':
			//We build the letter "M" from two "n's," so we need to change the index twice in the actual text
			text[idx] = 'N';
   10310:	2887883a 	add	r3,r5,r2
   10314:	19800005 	stb	r6,0(r3)
			text[idx + 1] = 'N';
   10318:	19800045 	stb	r6,1(r3)
			break;
		case 'W':
			//We build the letter "W" from two "v's," so we need to change the index twice in the actual text
			text[idx] = 'V';
			text[idx + 1] = 'V';
			idx += 2;
   1031c:	10800084 	addi	r2,r2,2
			break;
   10320:	00000306 	br	10330 <getActualText+0x94>
		default:
			//Copy the new letter into the actual text
			text[idx] = currentLetter;
   10324:	2891883a 	add	r8,r5,r2
   10328:	40c00005 	stb	r3,0(r8)
			idx++;
   1032c:	10800044 	addi	r2,r2,1

int getActualText(){
	int idx = 0;	//We need two indicies because the entered and actual text sequences need not be aligned
	char currentLetter; //Keeps track of the character we are wanting to add
	//Go through each letter in the entered text
	for (int i = 0; i <= length; i++){
   10330:	21000044 	addi	r4,r4,1
   10334:	003fe506 	br	102cc <__alt_data_end+0xffff02cc>
			text[idx] = currentLetter;
			idx++;
		}
	}
	return idx;
}
   10338:	f800283a 	ret

0001033c <updateText>:
	serverdata = 5;   //random number to set server data not eqaualling any of the below...
	//First Turn all six of the seven segment displays off
	print(getBin('!'), getBin('!'), getBin('!'), getBin('!'), getBin('!'), getBin('!'));
}

char updateText(int serverdata){ // in FPGA change this to if there is any new input
   1033c:	defffd04 	addi	sp,sp,-12
   10340:	dc000015 	stw	r16,0(sp)
   10344:	dfc00215 	stw	ra,8(sp)
   10348:	04000074 	movhi	r16,1
   1034c:	dc400115 	stw	r17,4(sp)

	if (serverdata == 'q'){ // q is server code which tells the fpga to play
   10350:	00801c44 	movi	r2,113
   10354:	84088704 	addi	r16,r16,8732
   10358:	2080331e 	bne	r4,r2,10428 <updateText+0xec>
			alt_putstr("here q \n");
   1035c:	01000074 	movhi	r4,1
   10360:	2106f404 	addi	r4,r4,7120
   10364:	00116000 	call	11600 <alt_putstr>
			static_flag = 0; //play scrolls through
			enteredText[0] = 'p';
   10368:	00801c04 	movi	r2,112

char updateText(int serverdata){ // in FPGA change this to if there is any new input

	if (serverdata == 'q'){ // q is server code which tells the fpga to play
			alt_putstr("here q \n");
			static_flag = 0; //play scrolls through
   1036c:	d0207c15 	stw	zero,-32272(gp)
			enteredText[0] = 'p';
   10370:	80800005 	stb	r2,0(r16)
			length = getActualText();
   10374:	001029c0 	call	1029c <getActualText>
   10378:	d0a07b15 	stw	r2,-32276(gp)
			enteredText[1] = 'l';
   1037c:	00801b04 	movi	r2,108
   10380:	80800045 	stb	r2,1(r16)
			length = getActualText();
   10384:	001029c0 	call	1029c <getActualText>
   10388:	d0a07b15 	stw	r2,-32276(gp)
			enteredText[2] = 'a';
   1038c:	00801844 	movi	r2,97
   10390:	80800085 	stb	r2,2(r16)
			length = getActualText();
   10394:	001029c0 	call	1029c <getActualText>
   10398:	d0a07b15 	stw	r2,-32276(gp)
			enteredText[3] = 'y';
   1039c:	00801e44 	movi	r2,121
   103a0:	808000c5 	stb	r2,3(r16)
			length = getActualText();
   103a4:	001029c0 	call	1029c <getActualText>
   103a8:	d0a07b15 	stw	r2,-32276(gp)
			enteredText[4] = ' ';
   103ac:	04400804 	movi	r17,32
   103b0:	00001006 	br	103f4 <updateText+0xb8>
			enteredText[5] = ' ';
			length = getActualText();
		}
		else{ //when leds don't show play, if player is not admin, show player number
			//alt_putstr("here :) \n"); for testing
			static_flag = 1;
   103b4:	d0a07c15 	stw	r2,-32272(gp)
			enteredText[0] = 'p';
   103b8:	00801c04 	movi	r2,112
   103bc:	80800005 	stb	r2,0(r16)
			length = getActualText();
   103c0:	001029c0 	call	1029c <getActualText>
   103c4:	d0a07b15 	stw	r2,-32276(gp)
			enteredText[1] = '1';
   103c8:	00800c44 	movi	r2,49
			length = getActualText();
			enteredText[2] = ' ';
   103cc:	04400804 	movi	r17,32
		else{ //when leds don't show play, if player is not admin, show player number
			//alt_putstr("here :) \n"); for testing
			static_flag = 1;
			enteredText[0] = 'p';
			length = getActualText();
			enteredText[1] = '1';
   103d0:	80800045 	stb	r2,1(r16)
			length = getActualText();
   103d4:	001029c0 	call	1029c <getActualText>
   103d8:	d0a07b15 	stw	r2,-32276(gp)
			enteredText[2] = ' ';
   103dc:	84400085 	stb	r17,2(r16)
			length = getActualText();
   103e0:	001029c0 	call	1029c <getActualText>
   103e4:	d0a07b15 	stw	r2,-32276(gp)
			enteredText[3] = ' ';
   103e8:	844000c5 	stb	r17,3(r16)
			length = getActualText();
   103ec:	001029c0 	call	1029c <getActualText>
   103f0:	d0a07b15 	stw	r2,-32276(gp)
			enteredText[4] = ' ';
   103f4:	84400105 	stb	r17,4(r16)
			length = getActualText();
   103f8:	001029c0 	call	1029c <getActualText>
   103fc:	d0a07b15 	stw	r2,-32276(gp)
			enteredText[5] = ' ';
   10400:	84400145 	stb	r17,5(r16)
			length = getActualText();
   10404:	001029c0 	call	1029c <getActualText>
   10408:	d0a07b15 	stw	r2,-32276(gp)
		}
	}
	return &enteredText[0];
}
   1040c:	00800074 	movhi	r2,1
   10410:	10888704 	addi	r2,r2,8732
   10414:	dfc00217 	ldw	ra,8(sp)
   10418:	dc400117 	ldw	r17,4(sp)
   1041c:	dc000017 	ldw	r16,0(sp)
   10420:	dec00304 	addi	sp,sp,12
   10424:	f800283a 	ret
			length = getActualText();
			enteredText[5] = ' ';
			length = getActualText();
	}
	if(serverdata != 'q'){ //if the server isn't telling fpga to play and fpga is the admin, show word "ADMIN"
		if(admin_flag){
   10428:	d0e08017 	ldw	r3,-32256(gp)
   1042c:	00800044 	movi	r2,1
   10430:	183fe026 	beq	r3,zero,103b4 <__alt_data_end+0xffff03b4>
			static_flag = 1; //admin is shown statically
   10434:	d0a07c15 	stw	r2,-32272(gp)
			enteredText[0] = 'a';
   10438:	00801844 	movi	r2,97
   1043c:	80800005 	stb	r2,0(r16)
			length = getActualText();
   10440:	001029c0 	call	1029c <getActualText>
   10444:	d0a07b15 	stw	r2,-32276(gp)
			enteredText[1] = 'd';
   10448:	00801904 	movi	r2,100
   1044c:	80800045 	stb	r2,1(r16)
			length = getActualText();
   10450:	001029c0 	call	1029c <getActualText>
   10454:	d0a07b15 	stw	r2,-32276(gp)
			enteredText[2] = 'm';
   10458:	00801b44 	movi	r2,109
   1045c:	80800085 	stb	r2,2(r16)
			length = getActualText();
   10460:	001029c0 	call	1029c <getActualText>
   10464:	d0a07b15 	stw	r2,-32276(gp)
			enteredText[3] = 'i';
   10468:	00801a44 	movi	r2,105
   1046c:	808000c5 	stb	r2,3(r16)
			length = getActualText();
   10470:	001029c0 	call	1029c <getActualText>
   10474:	d0a07b15 	stw	r2,-32276(gp)
			enteredText[4] = 'n';
   10478:	00801b84 	movi	r2,110
   1047c:	80800105 	stb	r2,4(r16)
			length = getActualText();
   10480:	001029c0 	call	1029c <getActualText>
   10484:	d0a07b15 	stw	r2,-32276(gp)
			enteredText[5] = ' ';
   10488:	00800804 	movi	r2,32
   1048c:	80800145 	stb	r2,5(r16)
   10490:	003fdc06 	br	10404 <__alt_data_end+0xffff0404>

00010494 <updateTimer>:


//This function updates the timer based on whether the user has toggled a speedup or slowdown
int updateTimer(int tmr){
		return tmr;
}
   10494:	2005883a 	mov	r2,r4
   10498:	f800283a 	ret

0001049c <updateLocation>:

//This function returns a new Location based on the previous one.
int updateLocation(int loc, int len){
	loc++;   //Move the display forwards if the backwards button is NOT toggled (KEY2)
	return loc;
}
   1049c:	20800044 	addi	r2,r4,1
   104a0:	f800283a 	ret

000104a4 <getBin>:

//Gets the binary representation of the character
int getBin(char letter){
   104a4:	213ff404 	addi	r4,r4,-48
   104a8:	21003fcc 	andi	r4,r4,255
   104ac:	00800a84 	movi	r2,42
   104b0:	11000536 	bltu	r2,r4,104c8 <getBin+0x24>
   104b4:	00800074 	movhi	r2,1
   104b8:	10871584 	addi	r2,r2,7254
   104bc:	1109883a 	add	r4,r2,r4
   104c0:	20800007 	ldb	r2,0(r4)
   104c4:	f800283a 	ret
	/*Based on the character entered, we convert to binary so the 7-segment knows which lights to turn on.
	The 7-segment has inverted logic so a 0 means the light is on and a 1 means the light is off.
	The rightmost bit starts the index at HEX#[0], and the leftmost bit is HEX#[6], the pattern
	for the 7-segment is shown in the DE0_C5 User Manual*/
	switch(letter){
   104c8:	00801fc4 	movi	r2,127
	case 'Z':
		return 0b0100100;
	default:
		return 0b1111111;
	}
}
   104cc:	f800283a 	ret

000104d0 <getBinaryLetter>:

//Returns the letter or the upsideDown version of the letter
int getBinaryLetter(char letter){
	int let = getBin(letter);
   104d0:	21003fcc 	andi	r4,r4,255
   104d4:	2100201c 	xori	r4,r4,128
   104d8:	213fe004 	addi	r4,r4,-128
   104dc:	00104a41 	jmpi	104a4 <getBin>

000104e0 <print>:
	return let;
}
//Prints each of the letters out to the screen
void print(int let5, int let4, int let3, int let2, int let1, int let0){
	//Takes the binary value for each letter and places it on each of the six 7-segment displays
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, let5);
   104e0:	008000b4 	movhi	r2,2
   104e4:	10841004 	addi	r2,r2,4160
   104e8:	11000035 	stwio	r4,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, let4);
   104ec:	008000b4 	movhi	r2,2
   104f0:	10841404 	addi	r2,r2,4176
   104f4:	11400035 	stwio	r5,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, let3);
   104f8:	008000b4 	movhi	r2,2
   104fc:	10841804 	addi	r2,r2,4192
   10500:	11800035 	stwio	r6,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, let2);
   10504:	008000b4 	movhi	r2,2
   10508:	10841c04 	addi	r2,r2,4208
   1050c:	11c00035 	stwio	r7,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, let1);
   10510:	d8c00017 	ldw	r3,0(sp)
   10514:	008000b4 	movhi	r2,2
   10518:	10842004 	addi	r2,r2,4224
   1051c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, let0);
   10520:	d8c00117 	ldw	r3,4(sp)
   10524:	008000b4 	movhi	r2,2
   10528:	10842404 	addi	r2,r2,4240
   1052c:	10c00035 	stwio	r3,0(r2)
   10530:	f800283a 	ret

00010534 <print_letters>:
	}
}

//Returns the letter or the upsideDown version of the letter
int getBinaryLetter(char letter){
	int let = getBin(letter);
   10534:	21003fcc 	andi	r4,r4,255
   10538:	2100201c 	xori	r4,r4,128
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, let1);
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, let0);
	return;
}
//Prints each of the letters out to the screen; takes into account the dancing letters
void print_letters(char let5, char let4, char let3, char let2, char let1, char let0){
   1053c:	defffa04 	addi	sp,sp,-24
	}
}

//Returns the letter or the upsideDown version of the letter
int getBinaryLetter(char letter){
	int let = getBin(letter);
   10540:	213fe004 	addi	r4,r4,-128
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, let1);
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, let0);
	return;
}
//Prints each of the letters out to the screen; takes into account the dancing letters
void print_letters(char let5, char let4, char let3, char let2, char let1, char let0){
   10544:	dd000415 	stw	r20,16(sp)
   10548:	dcc00315 	stw	r19,12(sp)
   1054c:	dc800215 	stw	r18,8(sp)
   10550:	dc400115 	stw	r17,4(sp)
   10554:	dc000015 	stw	r16,0(sp)
   10558:	dfc00515 	stw	ra,20(sp)
   1055c:	2829883a 	mov	r20,r5
   10560:	3027883a 	mov	r19,r6
   10564:	3825883a 	mov	r18,r7
   10568:	dc400617 	ldw	r17,24(sp)
	}
}

//Returns the letter or the upsideDown version of the letter
int getBinaryLetter(char letter){
	int let = getBin(letter);
   1056c:	00104a40 	call	104a4 <getBin>
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, let1);
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, let0);
	return;
}
//Prints each of the letters out to the screen; takes into account the dancing letters
void print_letters(char let5, char let4, char let3, char let2, char let1, char let0){
   10570:	dc000717 	ldw	r16,28(sp)

	//This is the "main" case, where the full letters are displayed on the display
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, getBinaryLetter(let5));
   10574:	00c000b4 	movhi	r3,2
   10578:	18c41004 	addi	r3,r3,4160
   1057c:	18800035 	stwio	r2,0(r3)
	}
}

//Returns the letter or the upsideDown version of the letter
int getBinaryLetter(char letter){
	int let = getBin(letter);
   10580:	a1003fcc 	andi	r4,r20,255
   10584:	2100201c 	xori	r4,r4,128
   10588:	213fe004 	addi	r4,r4,-128
   1058c:	00104a40 	call	104a4 <getBin>
//Prints each of the letters out to the screen; takes into account the dancing letters
void print_letters(char let5, char let4, char let3, char let2, char let1, char let0){

	//This is the "main" case, where the full letters are displayed on the display
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, getBinaryLetter(let5));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, getBinaryLetter(let4));
   10590:	00c000b4 	movhi	r3,2
   10594:	18c41404 	addi	r3,r3,4176
   10598:	18800035 	stwio	r2,0(r3)
	}
}

//Returns the letter or the upsideDown version of the letter
int getBinaryLetter(char letter){
	int let = getBin(letter);
   1059c:	99003fcc 	andi	r4,r19,255
   105a0:	2100201c 	xori	r4,r4,128
   105a4:	213fe004 	addi	r4,r4,-128
   105a8:	00104a40 	call	104a4 <getBin>
void print_letters(char let5, char let4, char let3, char let2, char let1, char let0){

	//This is the "main" case, where the full letters are displayed on the display
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, getBinaryLetter(let5));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, getBinaryLetter(let4));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, getBinaryLetter(let3));
   105ac:	00c000b4 	movhi	r3,2
   105b0:	18c41804 	addi	r3,r3,4192
   105b4:	18800035 	stwio	r2,0(r3)
	}
}

//Returns the letter or the upsideDown version of the letter
int getBinaryLetter(char letter){
	int let = getBin(letter);
   105b8:	91003fcc 	andi	r4,r18,255
   105bc:	2100201c 	xori	r4,r4,128
   105c0:	213fe004 	addi	r4,r4,-128
   105c4:	00104a40 	call	104a4 <getBin>

	//This is the "main" case, where the full letters are displayed on the display
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, getBinaryLetter(let5));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, getBinaryLetter(let4));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, getBinaryLetter(let3));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, getBinaryLetter(let2));
   105c8:	00c000b4 	movhi	r3,2
   105cc:	18c41c04 	addi	r3,r3,4208
   105d0:	18800035 	stwio	r2,0(r3)
	}
}

//Returns the letter or the upsideDown version of the letter
int getBinaryLetter(char letter){
	int let = getBin(letter);
   105d4:	89003fcc 	andi	r4,r17,255
   105d8:	2100201c 	xori	r4,r4,128
   105dc:	213fe004 	addi	r4,r4,-128
   105e0:	00104a40 	call	104a4 <getBin>
	//This is the "main" case, where the full letters are displayed on the display
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, getBinaryLetter(let5));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, getBinaryLetter(let4));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, getBinaryLetter(let3));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, getBinaryLetter(let2));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, getBinaryLetter(let1));
   105e4:	00c000b4 	movhi	r3,2
   105e8:	18c42004 	addi	r3,r3,4224
   105ec:	18800035 	stwio	r2,0(r3)
	}
}

//Returns the letter or the upsideDown version of the letter
int getBinaryLetter(char letter){
	int let = getBin(letter);
   105f0:	81003fcc 	andi	r4,r16,255
   105f4:	2100201c 	xori	r4,r4,128
   105f8:	213fe004 	addi	r4,r4,-128
   105fc:	00104a40 	call	104a4 <getBin>
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, getBinaryLetter(let5));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, getBinaryLetter(let4));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, getBinaryLetter(let3));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, getBinaryLetter(let2));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, getBinaryLetter(let1));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, getBinaryLetter(let0));
   10600:	00c000b4 	movhi	r3,2
   10604:	18c42404 	addi	r3,r3,4240
   10608:	18800035 	stwio	r2,0(r3)

	return;

}
   1060c:	dfc00517 	ldw	ra,20(sp)
   10610:	dd000417 	ldw	r20,16(sp)
   10614:	dcc00317 	ldw	r19,12(sp)
   10618:	dc800217 	ldw	r18,8(sp)
   1061c:	dc400117 	ldw	r17,4(sp)
   10620:	dc000017 	ldw	r16,0(sp)
   10624:	dec00604 	addi	sp,sp,24
   10628:	f800283a 	ret

0001062c <led_write>:
alt_8 pwm = 0;
alt_u8 led;
int level;

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   1062c:	008000b4 	movhi	r2,2
   10630:	21003fcc 	andi	r4,r4,255
   10634:	10843004 	addi	r2,r2,4288
   10638:	11000035 	stwio	r4,0(r2)
   1063c:	f800283a 	ret

00010640 <led_response>:
}

void led_response(char check){
    if(check == 'y'){
   10640:	21003fcc 	andi	r4,r4,255
   10644:	2100201c 	xori	r4,r4,128
   10648:	008000b4 	movhi	r2,2
   1064c:	213fe004 	addi	r4,r4,-128
   10650:	00c01e44 	movi	r3,121
   10654:	10843004 	addi	r2,r2,4288
   10658:	20c0021e 	bne	r4,r3,10664 <led_response+0x24>
        IOWR(LED_BASE, 0, 256);
   1065c:	00c04004 	movi	r3,256
   10660:	00000106 	br	10668 <led_response+0x28>
    }else{
        IOWR(LED_BASE, 0, 16);
   10664:	00c00404 	movi	r3,16
   10668:	10c00035 	stwio	r3,0(r2)
   1066c:	f800283a 	ret

00010670 <convert_read>:
}



void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
   10670:	213ff804 	addi	r4,r4,-32
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   10674:	2005d1ba 	srai	r2,r4,6
    * level = (acc_read >> 1) & 0x1f;
   10678:	2009d07a 	srai	r4,r4,1


void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   1067c:	10c001cc 	andi	r3,r2,7
   10680:	00800204 	movi	r2,8
   10684:	10cfc83a 	sub	r7,r2,r3
   10688:	11ce983a 	sll	r7,r2,r7
   1068c:	10c5d83a 	sra	r2,r2,r3
    * level = (acc_read >> 1) & 0x1f;
   10690:	210007cc 	andi	r4,r4,31


void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   10694:	3884b03a 	or	r2,r7,r2
   10698:	30800005 	stb	r2,0(r6)
    * level = (acc_read >> 1) & 0x1f;
   1069c:	29000015 	stw	r4,0(r5)
   106a0:	f800283a 	ret

000106a4 <is_flat>:
///////////Accelerometer reading DIRECTIONS/////////

const int FLATLOW = {-60};
const int FLATHIGH = {60};

int is_flat(alt_32 reading){
   106a4:	21000f04 	addi	r4,r4,60
   106a8:	20801e70 	cmpltui	r2,r4,121
    if((reading < -60) || (reading > 60)){
        return 0;
    }else{
        return 1;
    }
}
   106ac:	f800283a 	ret

000106b0 <timer_init>:
        pwm++;
    }

}

void timer_init(void * isr) {
   106b0:	defffe04 	addi	sp,sp,-8
   106b4:	dc000015 	stw	r16,0(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   106b8:	040000b4 	movhi	r16,2
        pwm++;
    }

}

void timer_init(void * isr) {
   106bc:	dfc00115 	stw	ra,4(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   106c0:	84040904 	addi	r16,r16,4132
   106c4:	008000c4 	movi	r2,3
   106c8:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   106cc:	00c000b4 	movhi	r3,2
   106d0:	0005883a 	mov	r2,zero
   106d4:	18c40804 	addi	r3,r3,4128
   106d8:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
   106dc:	00c000b4 	movhi	r3,2
   106e0:	18c40a04 	addi	r3,r3,4136
   106e4:	01424004 	movi	r5,2304
   106e8:	19400035 	stwio	r5,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
   106ec:	00c000b4 	movhi	r3,2
   106f0:	18c40b04 	addi	r3,r3,4140
   106f4:	18800035 	stwio	r2,0(r3)
    alt_irq_register(TIMER_IRQ, 0, isr);
   106f8:	200d883a 	mov	r6,r4
   106fc:	000b883a 	mov	r5,zero
   10700:	01000044 	movi	r4,1
   10704:	00114600 	call	11460 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   10708:	008001c4 	movi	r2,7
   1070c:	80800035 	stwio	r2,0(r16)

}
   10710:	dfc00117 	ldw	ra,4(sp)
   10714:	dc000017 	ldw	r16,0(sp)
   10718:	dec00204 	addi	sp,sp,8
   1071c:	f800283a 	ret

00010720 <main>:

///////////////////////////////
////////////MAIN///////////////
///////////////////////////////

int main() {
   10720:	deffdd04 	addi	sp,sp,-140
   10724:	dfc02215 	stw	ra,136(sp)
   10728:	dd802115 	stw	r22,132(sp)
   1072c:	dd402015 	stw	r21,128(sp)
   10730:	dd001f15 	stw	r20,124(sp)
   10734:	dcc01e15 	stw	r19,120(sp)
   10738:	dc801d15 	stw	r18,116(sp)
   1073c:	dc401c15 	stw	r17,112(sp)
   10740:	dc001b15 	stw	r16,108(sp)

	//Display initialisation//
	initializeDisplay();
   10744:	001023c0 	call	1023c <initializeDisplay>
	///%Accelerometer initialisations%///
    alt_32 x_read;
    alt_32 y_read;
    alt_32 z_read;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10748:	01000074 	movhi	r4,1
   1074c:	2106f704 	addi	r4,r4,7132
   10750:	00117600 	call	11760 <alt_up_accelerometer_spi_open_dev>
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   10754:	1000aa26 	beq	r2,zero,10a00 <main+0x2e0>
        return 1;
    }

    ///%switches and buttons initialisation%///
    timer_init(sys_timer_isr);
   10758:	01000074 	movhi	r4,1
   1075c:	21006f04 	addi	r4,r4,444

    ///Code///
    while (1) {

    	///Switches code///
     	switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   10760:	048000b4 	movhi	r18,2
        }

        ////////////////////////
        //////send button///////
        int pressed=0;
        button_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   10764:	04c000b4 	movhi	r19,2
		if((button_datain &= 0b0000000001) && (pressed == 0)){
			pressed = 1;
			strcat(response, "\n");
			int i = 0;
			while (response[i] != '\0'){
				IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, response[i]);
   10768:	050000b4 	movhi	r20,2


        /////////////////////
		///receiving shit////
		int received;
		received = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE); //watch out this is IORD not IOWR...
   1076c:	054000b4 	movhi	r21,2
   10770:	1023883a 	mov	r17,r2

    ///Code///
    while (1) {

    	///Switches code///
     	switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   10774:	94842804 	addi	r18,r18,4256
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
        return 1;
    }

    ///%switches and buttons initialisation%///
    timer_init(sys_timer_isr);
   10778:	00106b00 	call	106b0 <timer_init>
        }

        ////////////////////////
        //////send button///////
        int pressed=0;
        button_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   1077c:	9cc42c04 	addi	r19,r19,4272
		if((button_datain &= 0b0000000001) && (pressed == 0)){
			pressed = 1;
			strcat(response, "\n");
			int i = 0;
			while (response[i] != '\0'){
				IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, response[i]);
   10780:	a5040104 	addi	r20,r20,4100


        /////////////////////
		///receiving shit////
		int received;
		received = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE); //watch out this is IORD not IOWR...
   10784:	ad440004 	addi	r21,r21,4096

    ///Code///
    while (1) {

    	///Switches code///
     	switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   10788:	90800037 	ldwio	r2,0(r18)
   1078c:	010000b4 	movhi	r4,2
    	switch_datain &= (0b1111111111);
   10790:	1080ffcc 	andi	r2,r2,1023
   10794:	21042804 	addi	r4,r4,4256

    	if(switch_datain != 0){
   10798:	10001726 	beq	r2,zero,107f8 <main+0xd8>
			flicked_switch = switch_datain;
			while(switch_datain != 0){
				//printf("here \n");
				switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   1079c:	20c00037 	ldwio	r3,0(r4)
     	switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
    	switch_datain &= (0b1111111111);

    	if(switch_datain != 0){
			flicked_switch = switch_datain;
			while(switch_datain != 0){
   107a0:	18c0ffcc 	andi	r3,r3,1023
   107a4:	183ffd1e 	bne	r3,zero,1079c <__alt_data_end+0xffff079c>
				//printf("here \n");
				switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
				switch_datain &= (0b1111111111);
			}

			if(flicked_switch == 1){
   107a8:	00c00044 	movi	r3,1
   107ac:	10c0031e 	bne	r2,r3,107bc <main+0x9c>
				strcat(response,"1");
   107b0:	01400074 	movhi	r5,1
   107b4:	2946fd04 	addi	r5,r5,7156
   107b8:	00000906 	br	107e0 <main+0xc0>
				printf("\nResponse: %s\n", response);
			}
			else if(flicked_switch == 2){
   107bc:	00c00084 	movi	r3,2
   107c0:	10c0031e 	bne	r2,r3,107d0 <main+0xb0>
				strcat(response,"2");
   107c4:	01400074 	movhi	r5,1
   107c8:	29470204 	addi	r5,r5,7176
   107cc:	00000406 	br	107e0 <main+0xc0>
				printf("\nResponse: %s\n", response);
			}
			else if(flicked_switch == 4){
   107d0:	00c00104 	movi	r3,4
   107d4:	10c0081e 	bne	r2,r3,107f8 <main+0xd8>
				strcat(response,"3");
   107d8:	01400074 	movhi	r5,1
   107dc:	29470304 	addi	r5,r5,7180
   107e0:	d809883a 	mov	r4,sp
   107e4:	0010b680 	call	10b68 <strcat>
				printf("\nResponse: %s\n", response);
   107e8:	01000074 	movhi	r4,1
   107ec:	d80b883a 	mov	r5,sp
   107f0:	2106fe04 	addi	r4,r4,7160
   107f4:	0010a880 	call	10a88 <printf>

    	////////////////////////////
    	////Accelerometer code//////

    	clock_t exec_t1, exec_t2;
    	exec_t1 = times(NULL);
   107f8:	0009883a 	mov	r4,zero
   107fc:	00116380 	call	11638 <times>

        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   10800:	d9401a04 	addi	r5,sp,104
   10804:	8809883a 	mov	r4,r17
   10808:	00117b80 	call	117b8 <alt_up_accelerometer_spi_read_x_axis>
        alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
   1080c:	d9401904 	addi	r5,sp,100
   10810:	8809883a 	mov	r4,r17
   10814:	00118100 	call	11810 <alt_up_accelerometer_spi_read_y_axis>
        // alt_up_accelerometer_spi_read_z_axis(acc_dev, & z_read);
        alt_32 FIR_out[3];
        FIR_out[0] = x_read;
   10818:	d8801a17 	ldw	r2,104(sp)
        //printf("FIR out x = %d \n", FIR_out[0]);
        //printf("FIR out y = %d \n", FIR_out[1]);
        //////////////////

        //Left & Right//
        if(FIR_out[0] < RIGHTLIM){
   1081c:	00ffdd04 	movi	r3,-140
        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
        alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
        // alt_up_accelerometer_spi_read_z_axis(acc_dev, & z_read);
        alt_32 FIR_out[3];
        FIR_out[0] = x_read;
        FIR_out[1] = y_read;
   10820:	dc001917 	ldw	r16,100(sp)
        //printf("FIR out x = %d \n", FIR_out[0]);
        //printf("FIR out y = %d \n", FIR_out[1]);
        //////////////////

        //Left & Right//
        if(FIR_out[0] < RIGHTLIM){
   10824:	10c0060e 	bge	r2,r3,10840 <main+0x120>

const int FLATLOW = {-60};
const int FLATHIGH = {60};

int is_flat(alt_32 reading){
    if((reading < -60) || (reading > 60)){
   10828:	05801e04 	movi	r22,120
   1082c:	10800f04 	addi	r2,r2,60
   10830:	b0805f36 	bltu	r22,r2,109b0 <main+0x290>
        if(FIR_out[0] < RIGHTLIM){
            while(is_flat(FIR_out[0]) == 0){
            	alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
            	FIR_out[0] = x_read;
            }
            strcat(response, "R");
   10834:	01400074 	movhi	r5,1
   10838:	29471204 	addi	r5,r5,7240
   1083c:	00000706 	br	1085c <main+0x13c>
            printf("\nResponse: %s\n", response);

        }else if(FIR_out[0] > LEFTLIM){
   10840:	00c02304 	movi	r3,140
   10844:	18800b0e 	bge	r3,r2,10874 <main+0x154>

const int FLATLOW = {-60};
const int FLATHIGH = {60};

int is_flat(alt_32 reading){
    if((reading < -60) || (reading > 60)){
   10848:	05801e04 	movi	r22,120
   1084c:	10800f04 	addi	r2,r2,60
   10850:	b0805c36 	bltu	r22,r2,109c4 <main+0x2a4>
        }else if(FIR_out[0] > LEFTLIM){
            while(is_flat(FIR_out[0]) == 0){
            	alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
            	FIR_out[0] = x_read;
            }
            strcat(response, "L");
   10854:	01400074 	movhi	r5,1
   10858:	29471304 	addi	r5,r5,7244
   1085c:	d809883a 	mov	r4,sp
   10860:	0010b680 	call	10b68 <strcat>
            printf("\nResponse: %s\n", response);
   10864:	01000074 	movhi	r4,1
   10868:	d80b883a 	mov	r5,sp
   1086c:	2106fe04 	addi	r4,r4,7160
   10870:	0010a880 	call	10a88 <printf>
        }

        //Forward & Backward//
        if(FIR_out[1] < FORWARDLIM){
   10874:	00bfdf84 	movi	r2,-130
   10878:	8080060e 	bge	r16,r2,10894 <main+0x174>

const int FLATLOW = {-60};
const int FLATHIGH = {60};

int is_flat(alt_32 reading){
    if((reading < -60) || (reading > 60)){
   1087c:	05801e04 	movi	r22,120
   10880:	84000f04 	addi	r16,r16,60
   10884:	b4005436 	bltu	r22,r16,109d8 <main+0x2b8>
        if(FIR_out[1] < FORWARDLIM){
			while(is_flat(FIR_out[1]) == 0){
				alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
				FIR_out[1] = y_read;
			}
			strcat(response, "F");
   10888:	01400074 	movhi	r5,1
   1088c:	29471404 	addi	r5,r5,7248
   10890:	00000706 	br	108b0 <main+0x190>
            printf("\nResponse: %s\n", response);

		}else if(FIR_out[1] > BACKWARDLIM){
   10894:	00802084 	movi	r2,130
   10898:	14000b0e 	bge	r2,r16,108c8 <main+0x1a8>

const int FLATLOW = {-60};
const int FLATHIGH = {60};

int is_flat(alt_32 reading){
    if((reading < -60) || (reading > 60)){
   1089c:	05801e04 	movi	r22,120
   108a0:	84000f04 	addi	r16,r16,60
   108a4:	b4005136 	bltu	r22,r16,109ec <main+0x2cc>
		}else if(FIR_out[1] > BACKWARDLIM){
			while(is_flat(FIR_out[1]) == 0){
				alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
				FIR_out[1] = y_read;
			}
			strcat(response, "B");
   108a8:	01400074 	movhi	r5,1
   108ac:	29471504 	addi	r5,r5,7252
   108b0:	d809883a 	mov	r4,sp
   108b4:	0010b680 	call	10b68 <strcat>
            printf("\nResponse: %s\n", response);
   108b8:	01000074 	movhi	r4,1
   108bc:	d80b883a 	mov	r5,sp
   108c0:	2106fe04 	addi	r4,r4,7160
   108c4:	0010a880 	call	10a88 <printf>
        }

        ////////////////////////
        //////send button///////
        int pressed=0;
        button_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   108c8:	98800037 	ldwio	r2,0(r19)
   108cc:	0084303a 	nor	r2,zero,r2
		if((button_datain &= 0b0000000001) && (pressed == 0)){
   108d0:	1080004c 	andi	r2,r2,1
   108d4:	10001926 	beq	r2,zero,1093c <main+0x21c>
			pressed = 1;
			strcat(response, "\n");
   108d8:	01400074 	movhi	r5,1
   108dc:	29470704 	addi	r5,r5,7196
   108e0:	d809883a 	mov	r4,sp
   108e4:	0010b680 	call	10b68 <strcat>
			int i = 0;
   108e8:	0021883a 	mov	r16,zero
			while (response[i] != '\0'){
   108ec:	dc05883a 	add	r2,sp,r16
   108f0:	10800007 	ldb	r2,0(r2)
   108f4:	10000526 	beq	r2,zero,1090c <main+0x1ec>
				IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, response[i]);
   108f8:	a0800035 	stwio	r2,0(r20)
				i++;
				usleep(10000) ;
   108fc:	0109c404 	movi	r4,10000
			pressed = 1;
			strcat(response, "\n");
			int i = 0;
			while (response[i] != '\0'){
				IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, response[i]);
				i++;
   10900:	84000044 	addi	r16,r16,1
				usleep(10000) ;
   10904:	00116980 	call	11698 <usleep>
   10908:	003ff806 	br	108ec <__alt_data_end+0xffff08ec>
			}
			printf("\nSending: %s\n", response);
   1090c:	01000074 	movhi	r4,1
   10910:	d80b883a 	mov	r5,sp
   10914:	21070404 	addi	r4,r4,7184
   10918:	0010a880 	call	10a88 <printf>
			memset(response,0,strlen(response));
   1091c:	d809883a 	mov	r4,sp
   10920:	0010ba40 	call	10ba4 <strlen>
   10924:	100d883a 	mov	r6,r2
   10928:	000b883a 	mov	r5,zero
   1092c:	d809883a 	mov	r4,sp
   10930:	0010a2c0 	call	10a2c <memset>
        ////////////////////////
        //////send button///////
        int pressed=0;
        button_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
		if((button_datain &= 0b0000000001) && (pressed == 0)){
			pressed = 1;
   10934:	00c00044 	movi	r3,1
   10938:	00000106 	br	10940 <main+0x220>
            printf("\nResponse: %s\n", response);
        }

        ////////////////////////
        //////send button///////
        int pressed=0;
   1093c:	0007883a 	mov	r3,zero
			}
			printf("\nSending: %s\n", response);
			memset(response,0,strlen(response));
		}
		//reset button
		button_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   10940:	008000b4 	movhi	r2,2
   10944:	10842c04 	addi	r2,r2,4272
   10948:	10800037 	ldwio	r2,0(r2)
   1094c:	0084303a 	nor	r2,zero,r2
		if((button_datain &= 0b0000000010) && (pressed==0)){
   10950:	1080008c 	andi	r2,r2,2
   10954:	10000b26 	beq	r2,zero,10984 <main+0x264>
   10958:	18000a1e 	bne	r3,zero,10984 <main+0x264>
			pressed = 1;
			//reset response
			memset(response,0,strlen(response));
   1095c:	d809883a 	mov	r4,sp
   10960:	0010ba40 	call	10ba4 <strlen>
   10964:	d809883a 	mov	r4,sp
   10968:	100d883a 	mov	r6,r2
   1096c:	000b883a 	mov	r5,zero
   10970:	0010a2c0 	call	10a2c <memset>
			printf("Resetting...\n");
   10974:	01000074 	movhi	r4,1
   10978:	21070804 	addi	r4,r4,7200
   1097c:	0010b540 	call	10b54 <puts>
   10980:	00000206 	br	1098c <main+0x26c>
		}
		else {
			usleep(50000);
   10984:	0130d414 	movui	r4,50000
   10988:	00116980 	call	11698 <usleep>
		}

        //printf("<-> %c <->", response[100]);
        convert_read(x_read, & level, & led);
   1098c:	d9001a17 	ldw	r4,104(sp)
   10990:	d1a07e04 	addi	r6,gp,-32264
   10994:	d1607f04 	addi	r5,gp,-32260
   10998:	00106700 	call	10670 <convert_read>

        /////////////////////
		///receiving shit////
		int received;
		received = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE); //watch out this is IORD not IOWR...
		printf("Received character: %d", received);
   1099c:	a9400037 	ldwio	r5,0(r21)
   109a0:	01000074 	movhi	r4,1
   109a4:	21070c04 	addi	r4,r4,7216
   109a8:	0010a880 	call	10a88 <printf>




    }
   109ac:	003f7606 	br	10788 <__alt_data_end+0xffff0788>
        //////////////////

        //Left & Right//
        if(FIR_out[0] < RIGHTLIM){
            while(is_flat(FIR_out[0]) == 0){
            	alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   109b0:	d9401a04 	addi	r5,sp,104
   109b4:	8809883a 	mov	r4,r17
   109b8:	00117b80 	call	117b8 <alt_up_accelerometer_spi_read_x_axis>
            	FIR_out[0] = x_read;
   109bc:	d8801a17 	ldw	r2,104(sp)
   109c0:	003f9a06 	br	1082c <__alt_data_end+0xffff082c>
            strcat(response, "R");
            printf("\nResponse: %s\n", response);

        }else if(FIR_out[0] > LEFTLIM){
            while(is_flat(FIR_out[0]) == 0){
            	alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   109c4:	d9401a04 	addi	r5,sp,104
   109c8:	8809883a 	mov	r4,r17
   109cc:	00117b80 	call	117b8 <alt_up_accelerometer_spi_read_x_axis>
            	FIR_out[0] = x_read;
   109d0:	d8801a17 	ldw	r2,104(sp)
   109d4:	003f9d06 	br	1084c <__alt_data_end+0xffff084c>
        }

        //Forward & Backward//
        if(FIR_out[1] < FORWARDLIM){
			while(is_flat(FIR_out[1]) == 0){
				alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
   109d8:	d9401904 	addi	r5,sp,100
   109dc:	8809883a 	mov	r4,r17
   109e0:	00118100 	call	11810 <alt_up_accelerometer_spi_read_y_axis>
				FIR_out[1] = y_read;
   109e4:	dc001917 	ldw	r16,100(sp)
   109e8:	003fa506 	br	10880 <__alt_data_end+0xffff0880>
			strcat(response, "F");
            printf("\nResponse: %s\n", response);

		}else if(FIR_out[1] > BACKWARDLIM){
			while(is_flat(FIR_out[1]) == 0){
				alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
   109ec:	d9401904 	addi	r5,sp,100
   109f0:	8809883a 	mov	r4,r17
   109f4:	00118100 	call	11810 <alt_up_accelerometer_spi_read_y_axis>
				FIR_out[1] = y_read;
   109f8:	dc001917 	ldw	r16,100(sp)
   109fc:	003fa806 	br	108a0 <__alt_data_end+0xffff08a0>


    }

    return 0;
}
   10a00:	00800044 	movi	r2,1
   10a04:	dfc02217 	ldw	ra,136(sp)
   10a08:	dd802117 	ldw	r22,132(sp)
   10a0c:	dd402017 	ldw	r21,128(sp)
   10a10:	dd001f17 	ldw	r20,124(sp)
   10a14:	dcc01e17 	ldw	r19,120(sp)
   10a18:	dc801d17 	ldw	r18,116(sp)
   10a1c:	dc401c17 	ldw	r17,112(sp)
   10a20:	dc001b17 	ldw	r16,108(sp)
   10a24:	dec02304 	addi	sp,sp,140
   10a28:	f800283a 	ret

00010a2c <memset>:
   10a2c:	2005883a 	mov	r2,r4
   10a30:	2007883a 	mov	r3,r4
   10a34:	218d883a 	add	r6,r4,r6
   10a38:	19800326 	beq	r3,r6,10a48 <memset+0x1c>
   10a3c:	19400005 	stb	r5,0(r3)
   10a40:	18c00044 	addi	r3,r3,1
   10a44:	003ffc06 	br	10a38 <__alt_data_end+0xffff0a38>
   10a48:	f800283a 	ret

00010a4c <_printf_r>:
   10a4c:	defffd04 	addi	sp,sp,-12
   10a50:	dfc00015 	stw	ra,0(sp)
   10a54:	d9800115 	stw	r6,4(sp)
   10a58:	d9c00215 	stw	r7,8(sp)
   10a5c:	20c00217 	ldw	r3,8(r4)
   10a60:	01800074 	movhi	r6,1
   10a64:	31845d04 	addi	r6,r6,4468
   10a68:	19800115 	stw	r6,4(r3)
   10a6c:	280d883a 	mov	r6,r5
   10a70:	21400217 	ldw	r5,8(r4)
   10a74:	d9c00104 	addi	r7,sp,4
   10a78:	0010c2c0 	call	10c2c <___vfprintf_internal_r>
   10a7c:	dfc00017 	ldw	ra,0(sp)
   10a80:	dec00304 	addi	sp,sp,12
   10a84:	f800283a 	ret

00010a88 <printf>:
   10a88:	defffc04 	addi	sp,sp,-16
   10a8c:	dfc00015 	stw	ra,0(sp)
   10a90:	d9400115 	stw	r5,4(sp)
   10a94:	d9800215 	stw	r6,8(sp)
   10a98:	d9c00315 	stw	r7,12(sp)
   10a9c:	00800074 	movhi	r2,1
   10aa0:	10878104 	addi	r2,r2,7684
   10aa4:	10800017 	ldw	r2,0(r2)
   10aa8:	01400074 	movhi	r5,1
   10aac:	29445d04 	addi	r5,r5,4468
   10ab0:	10c00217 	ldw	r3,8(r2)
   10ab4:	d9800104 	addi	r6,sp,4
   10ab8:	19400115 	stw	r5,4(r3)
   10abc:	200b883a 	mov	r5,r4
   10ac0:	11000217 	ldw	r4,8(r2)
   10ac4:	00111580 	call	11158 <__vfprintf_internal>
   10ac8:	dfc00017 	ldw	ra,0(sp)
   10acc:	dec00404 	addi	sp,sp,16
   10ad0:	f800283a 	ret

00010ad4 <_puts_r>:
   10ad4:	defffd04 	addi	sp,sp,-12
   10ad8:	dc000015 	stw	r16,0(sp)
   10adc:	2021883a 	mov	r16,r4
   10ae0:	2809883a 	mov	r4,r5
   10ae4:	dfc00215 	stw	ra,8(sp)
   10ae8:	dc400115 	stw	r17,4(sp)
   10aec:	2823883a 	mov	r17,r5
   10af0:	0010ba40 	call	10ba4 <strlen>
   10af4:	81400217 	ldw	r5,8(r16)
   10af8:	01000074 	movhi	r4,1
   10afc:	21045d04 	addi	r4,r4,4468
   10b00:	29000115 	stw	r4,4(r5)
   10b04:	100f883a 	mov	r7,r2
   10b08:	880d883a 	mov	r6,r17
   10b0c:	8009883a 	mov	r4,r16
   10b10:	00111740 	call	11174 <__sfvwrite_small_dev>
   10b14:	00ffffc4 	movi	r3,-1
   10b18:	10c00926 	beq	r2,r3,10b40 <_puts_r+0x6c>
   10b1c:	81400217 	ldw	r5,8(r16)
   10b20:	01800074 	movhi	r6,1
   10b24:	01c00044 	movi	r7,1
   10b28:	28800117 	ldw	r2,4(r5)
   10b2c:	31870704 	addi	r6,r6,7196
   10b30:	8009883a 	mov	r4,r16
   10b34:	103ee83a 	callr	r2
   10b38:	10bfffe0 	cmpeqi	r2,r2,-1
   10b3c:	0085c83a 	sub	r2,zero,r2
   10b40:	dfc00217 	ldw	ra,8(sp)
   10b44:	dc400117 	ldw	r17,4(sp)
   10b48:	dc000017 	ldw	r16,0(sp)
   10b4c:	dec00304 	addi	sp,sp,12
   10b50:	f800283a 	ret

00010b54 <puts>:
   10b54:	00800074 	movhi	r2,1
   10b58:	10878104 	addi	r2,r2,7684
   10b5c:	200b883a 	mov	r5,r4
   10b60:	11000017 	ldw	r4,0(r2)
   10b64:	0010ad41 	jmpi	10ad4 <_puts_r>

00010b68 <strcat>:
   10b68:	2005883a 	mov	r2,r4
   10b6c:	2007883a 	mov	r3,r4
   10b70:	19000007 	ldb	r4,0(r3)
   10b74:	20000226 	beq	r4,zero,10b80 <strcat+0x18>
   10b78:	18c00044 	addi	r3,r3,1
   10b7c:	003ffc06 	br	10b70 <__alt_data_end+0xffff0b70>
   10b80:	29800003 	ldbu	r6,0(r5)
   10b84:	18c00044 	addi	r3,r3,1
   10b88:	29400044 	addi	r5,r5,1
   10b8c:	19bfffc5 	stb	r6,-1(r3)
   10b90:	31803fcc 	andi	r6,r6,255
   10b94:	3180201c 	xori	r6,r6,128
   10b98:	31bfe004 	addi	r6,r6,-128
   10b9c:	303ff81e 	bne	r6,zero,10b80 <__alt_data_end+0xffff0b80>
   10ba0:	f800283a 	ret

00010ba4 <strlen>:
   10ba4:	2005883a 	mov	r2,r4
   10ba8:	10c00007 	ldb	r3,0(r2)
   10bac:	18000226 	beq	r3,zero,10bb8 <strlen+0x14>
   10bb0:	10800044 	addi	r2,r2,1
   10bb4:	003ffc06 	br	10ba8 <__alt_data_end+0xffff0ba8>
   10bb8:	1105c83a 	sub	r2,r2,r4
   10bbc:	f800283a 	ret

00010bc0 <print_repeat>:
   10bc0:	defffb04 	addi	sp,sp,-20
   10bc4:	dc800315 	stw	r18,12(sp)
   10bc8:	dc400215 	stw	r17,8(sp)
   10bcc:	dc000115 	stw	r16,4(sp)
   10bd0:	dfc00415 	stw	ra,16(sp)
   10bd4:	2025883a 	mov	r18,r4
   10bd8:	2823883a 	mov	r17,r5
   10bdc:	d9800005 	stb	r6,0(sp)
   10be0:	3821883a 	mov	r16,r7
   10be4:	04000a0e 	bge	zero,r16,10c10 <print_repeat+0x50>
   10be8:	88800117 	ldw	r2,4(r17)
   10bec:	01c00044 	movi	r7,1
   10bf0:	d80d883a 	mov	r6,sp
   10bf4:	880b883a 	mov	r5,r17
   10bf8:	9009883a 	mov	r4,r18
   10bfc:	103ee83a 	callr	r2
   10c00:	843fffc4 	addi	r16,r16,-1
   10c04:	103ff726 	beq	r2,zero,10be4 <__alt_data_end+0xffff0be4>
   10c08:	00bfffc4 	movi	r2,-1
   10c0c:	00000106 	br	10c14 <print_repeat+0x54>
   10c10:	0005883a 	mov	r2,zero
   10c14:	dfc00417 	ldw	ra,16(sp)
   10c18:	dc800317 	ldw	r18,12(sp)
   10c1c:	dc400217 	ldw	r17,8(sp)
   10c20:	dc000117 	ldw	r16,4(sp)
   10c24:	dec00504 	addi	sp,sp,20
   10c28:	f800283a 	ret

00010c2c <___vfprintf_internal_r>:
   10c2c:	deffe504 	addi	sp,sp,-108
   10c30:	d8c00804 	addi	r3,sp,32
   10c34:	ddc01815 	stw	r23,96(sp)
   10c38:	dd801715 	stw	r22,92(sp)
   10c3c:	dd401615 	stw	r21,88(sp)
   10c40:	dd001515 	stw	r20,84(sp)
   10c44:	dcc01415 	stw	r19,80(sp)
   10c48:	dc801315 	stw	r18,76(sp)
   10c4c:	dc401215 	stw	r17,72(sp)
   10c50:	dc001115 	stw	r16,68(sp)
   10c54:	dfc01a15 	stw	ra,104(sp)
   10c58:	df001915 	stw	fp,100(sp)
   10c5c:	2029883a 	mov	r20,r4
   10c60:	2823883a 	mov	r17,r5
   10c64:	382d883a 	mov	r22,r7
   10c68:	d9800f15 	stw	r6,60(sp)
   10c6c:	0021883a 	mov	r16,zero
   10c70:	d8000e15 	stw	zero,56(sp)
   10c74:	d8000a15 	stw	zero,40(sp)
   10c78:	002b883a 	mov	r21,zero
   10c7c:	0027883a 	mov	r19,zero
   10c80:	0025883a 	mov	r18,zero
   10c84:	d8000c15 	stw	zero,48(sp)
   10c88:	d8000b15 	stw	zero,44(sp)
   10c8c:	002f883a 	mov	r23,zero
   10c90:	d8c00915 	stw	r3,36(sp)
   10c94:	d8c00f17 	ldw	r3,60(sp)
   10c98:	19000003 	ldbu	r4,0(r3)
   10c9c:	20803fcc 	andi	r2,r4,255
   10ca0:	1080201c 	xori	r2,r2,128
   10ca4:	10bfe004 	addi	r2,r2,-128
   10ca8:	10011e26 	beq	r2,zero,11124 <___vfprintf_internal_r+0x4f8>
   10cac:	00c00044 	movi	r3,1
   10cb0:	b8c01426 	beq	r23,r3,10d04 <___vfprintf_internal_r+0xd8>
   10cb4:	1dc00216 	blt	r3,r23,10cc0 <___vfprintf_internal_r+0x94>
   10cb8:	b8000626 	beq	r23,zero,10cd4 <___vfprintf_internal_r+0xa8>
   10cbc:	00011506 	br	11114 <___vfprintf_internal_r+0x4e8>
   10cc0:	01400084 	movi	r5,2
   10cc4:	b9401d26 	beq	r23,r5,10d3c <___vfprintf_internal_r+0x110>
   10cc8:	014000c4 	movi	r5,3
   10ccc:	b9402b26 	beq	r23,r5,10d7c <___vfprintf_internal_r+0x150>
   10cd0:	00011006 	br	11114 <___vfprintf_internal_r+0x4e8>
   10cd4:	01400944 	movi	r5,37
   10cd8:	1140fc26 	beq	r2,r5,110cc <___vfprintf_internal_r+0x4a0>
   10cdc:	88800117 	ldw	r2,4(r17)
   10ce0:	d9000005 	stb	r4,0(sp)
   10ce4:	01c00044 	movi	r7,1
   10ce8:	d80d883a 	mov	r6,sp
   10cec:	880b883a 	mov	r5,r17
   10cf0:	a009883a 	mov	r4,r20
   10cf4:	103ee83a 	callr	r2
   10cf8:	1000d81e 	bne	r2,zero,1105c <___vfprintf_internal_r+0x430>
   10cfc:	84000044 	addi	r16,r16,1
   10d00:	00010406 	br	11114 <___vfprintf_internal_r+0x4e8>
   10d04:	01400c04 	movi	r5,48
   10d08:	1140fa26 	beq	r2,r5,110f4 <___vfprintf_internal_r+0x4c8>
   10d0c:	01400944 	movi	r5,37
   10d10:	11400a1e 	bne	r2,r5,10d3c <___vfprintf_internal_r+0x110>
   10d14:	d8800005 	stb	r2,0(sp)
   10d18:	88800117 	ldw	r2,4(r17)
   10d1c:	b80f883a 	mov	r7,r23
   10d20:	d80d883a 	mov	r6,sp
   10d24:	880b883a 	mov	r5,r17
   10d28:	a009883a 	mov	r4,r20
   10d2c:	103ee83a 	callr	r2
   10d30:	1000ca1e 	bne	r2,zero,1105c <___vfprintf_internal_r+0x430>
   10d34:	84000044 	addi	r16,r16,1
   10d38:	0000f506 	br	11110 <___vfprintf_internal_r+0x4e4>
   10d3c:	25fff404 	addi	r23,r4,-48
   10d40:	bdc03fcc 	andi	r23,r23,255
   10d44:	00c00244 	movi	r3,9
   10d48:	1dc00936 	bltu	r3,r23,10d70 <___vfprintf_internal_r+0x144>
   10d4c:	00bfffc4 	movi	r2,-1
   10d50:	90800426 	beq	r18,r2,10d64 <___vfprintf_internal_r+0x138>
   10d54:	01400284 	movi	r5,10
   10d58:	9009883a 	mov	r4,r18
   10d5c:	00114380 	call	11438 <__mulsi3>
   10d60:	00000106 	br	10d68 <___vfprintf_internal_r+0x13c>
   10d64:	0005883a 	mov	r2,zero
   10d68:	b8a5883a 	add	r18,r23,r2
   10d6c:	0000e206 	br	110f8 <___vfprintf_internal_r+0x4cc>
   10d70:	01400b84 	movi	r5,46
   10d74:	1140e426 	beq	r2,r5,11108 <___vfprintf_internal_r+0x4dc>
   10d78:	05c00084 	movi	r23,2
   10d7c:	213ff404 	addi	r4,r4,-48
   10d80:	27003fcc 	andi	fp,r4,255
   10d84:	00c00244 	movi	r3,9
   10d88:	1f000936 	bltu	r3,fp,10db0 <___vfprintf_internal_r+0x184>
   10d8c:	00bfffc4 	movi	r2,-1
   10d90:	98800426 	beq	r19,r2,10da4 <___vfprintf_internal_r+0x178>
   10d94:	01400284 	movi	r5,10
   10d98:	9809883a 	mov	r4,r19
   10d9c:	00114380 	call	11438 <__mulsi3>
   10da0:	00000106 	br	10da8 <___vfprintf_internal_r+0x17c>
   10da4:	0005883a 	mov	r2,zero
   10da8:	e0a7883a 	add	r19,fp,r2
   10dac:	0000d906 	br	11114 <___vfprintf_internal_r+0x4e8>
   10db0:	00c01b04 	movi	r3,108
   10db4:	10c0d226 	beq	r2,r3,11100 <___vfprintf_internal_r+0x4d4>
   10db8:	013fffc4 	movi	r4,-1
   10dbc:	99000226 	beq	r19,r4,10dc8 <___vfprintf_internal_r+0x19c>
   10dc0:	d8000b15 	stw	zero,44(sp)
   10dc4:	00000106 	br	10dcc <___vfprintf_internal_r+0x1a0>
   10dc8:	04c00044 	movi	r19,1
   10dcc:	01001a44 	movi	r4,105
   10dd0:	11001626 	beq	r2,r4,10e2c <___vfprintf_internal_r+0x200>
   10dd4:	20800916 	blt	r4,r2,10dfc <___vfprintf_internal_r+0x1d0>
   10dd8:	010018c4 	movi	r4,99
   10ddc:	11008826 	beq	r2,r4,11000 <___vfprintf_internal_r+0x3d4>
   10de0:	01001904 	movi	r4,100
   10de4:	11001126 	beq	r2,r4,10e2c <___vfprintf_internal_r+0x200>
   10de8:	01001604 	movi	r4,88
   10dec:	1100c81e 	bne	r2,r4,11110 <___vfprintf_internal_r+0x4e4>
   10df0:	00c00044 	movi	r3,1
   10df4:	d8c00e15 	stw	r3,56(sp)
   10df8:	00001506 	br	10e50 <___vfprintf_internal_r+0x224>
   10dfc:	01001cc4 	movi	r4,115
   10e00:	11009826 	beq	r2,r4,11064 <___vfprintf_internal_r+0x438>
   10e04:	20800416 	blt	r4,r2,10e18 <___vfprintf_internal_r+0x1ec>
   10e08:	01001bc4 	movi	r4,111
   10e0c:	1100c01e 	bne	r2,r4,11110 <___vfprintf_internal_r+0x4e4>
   10e10:	05400204 	movi	r21,8
   10e14:	00000f06 	br	10e54 <___vfprintf_internal_r+0x228>
   10e18:	01001d44 	movi	r4,117
   10e1c:	11000d26 	beq	r2,r4,10e54 <___vfprintf_internal_r+0x228>
   10e20:	01001e04 	movi	r4,120
   10e24:	11000a26 	beq	r2,r4,10e50 <___vfprintf_internal_r+0x224>
   10e28:	0000b906 	br	11110 <___vfprintf_internal_r+0x4e4>
   10e2c:	d8c00a17 	ldw	r3,40(sp)
   10e30:	b7000104 	addi	fp,r22,4
   10e34:	18000726 	beq	r3,zero,10e54 <___vfprintf_internal_r+0x228>
   10e38:	df000d15 	stw	fp,52(sp)
   10e3c:	b5c00017 	ldw	r23,0(r22)
   10e40:	b800080e 	bge	r23,zero,10e64 <___vfprintf_internal_r+0x238>
   10e44:	05efc83a 	sub	r23,zero,r23
   10e48:	02400044 	movi	r9,1
   10e4c:	00000606 	br	10e68 <___vfprintf_internal_r+0x23c>
   10e50:	05400404 	movi	r21,16
   10e54:	b0c00104 	addi	r3,r22,4
   10e58:	d8c00d15 	stw	r3,52(sp)
   10e5c:	b5c00017 	ldw	r23,0(r22)
   10e60:	d8000a15 	stw	zero,40(sp)
   10e64:	0013883a 	mov	r9,zero
   10e68:	d839883a 	mov	fp,sp
   10e6c:	b8001726 	beq	r23,zero,10ecc <___vfprintf_internal_r+0x2a0>
   10e70:	a80b883a 	mov	r5,r21
   10e74:	b809883a 	mov	r4,r23
   10e78:	da401015 	stw	r9,64(sp)
   10e7c:	001137c0 	call	1137c <__udivsi3>
   10e80:	a80b883a 	mov	r5,r21
   10e84:	1009883a 	mov	r4,r2
   10e88:	102d883a 	mov	r22,r2
   10e8c:	00114380 	call	11438 <__mulsi3>
   10e90:	b885c83a 	sub	r2,r23,r2
   10e94:	00c00244 	movi	r3,9
   10e98:	da401017 	ldw	r9,64(sp)
   10e9c:	18800216 	blt	r3,r2,10ea8 <___vfprintf_internal_r+0x27c>
   10ea0:	10800c04 	addi	r2,r2,48
   10ea4:	00000506 	br	10ebc <___vfprintf_internal_r+0x290>
   10ea8:	d8c00e17 	ldw	r3,56(sp)
   10eac:	18000226 	beq	r3,zero,10eb8 <___vfprintf_internal_r+0x28c>
   10eb0:	10800dc4 	addi	r2,r2,55
   10eb4:	00000106 	br	10ebc <___vfprintf_internal_r+0x290>
   10eb8:	108015c4 	addi	r2,r2,87
   10ebc:	e0800005 	stb	r2,0(fp)
   10ec0:	b02f883a 	mov	r23,r22
   10ec4:	e7000044 	addi	fp,fp,1
   10ec8:	003fe806 	br	10e6c <__alt_data_end+0xffff0e6c>
   10ecc:	e6efc83a 	sub	r23,fp,sp
   10ed0:	9dc5c83a 	sub	r2,r19,r23
   10ed4:	0080090e 	bge	zero,r2,10efc <___vfprintf_internal_r+0x2d0>
   10ed8:	e085883a 	add	r2,fp,r2
   10edc:	01400c04 	movi	r5,48
   10ee0:	d8c00917 	ldw	r3,36(sp)
   10ee4:	e009883a 	mov	r4,fp
   10ee8:	e0c0032e 	bgeu	fp,r3,10ef8 <___vfprintf_internal_r+0x2cc>
   10eec:	e7000044 	addi	fp,fp,1
   10ef0:	21400005 	stb	r5,0(r4)
   10ef4:	e0bffa1e 	bne	fp,r2,10ee0 <__alt_data_end+0xffff0ee0>
   10ef8:	e6efc83a 	sub	r23,fp,sp
   10efc:	d8c00b17 	ldw	r3,44(sp)
   10f00:	4dd1883a 	add	r8,r9,r23
   10f04:	922dc83a 	sub	r22,r18,r8
   10f08:	18001626 	beq	r3,zero,10f64 <___vfprintf_internal_r+0x338>
   10f0c:	48000a26 	beq	r9,zero,10f38 <___vfprintf_internal_r+0x30c>
   10f10:	00800b44 	movi	r2,45
   10f14:	d8800805 	stb	r2,32(sp)
   10f18:	88800117 	ldw	r2,4(r17)
   10f1c:	01c00044 	movi	r7,1
   10f20:	d9800804 	addi	r6,sp,32
   10f24:	880b883a 	mov	r5,r17
   10f28:	a009883a 	mov	r4,r20
   10f2c:	103ee83a 	callr	r2
   10f30:	10004a1e 	bne	r2,zero,1105c <___vfprintf_internal_r+0x430>
   10f34:	84000044 	addi	r16,r16,1
   10f38:	0580070e 	bge	zero,r22,10f58 <___vfprintf_internal_r+0x32c>
   10f3c:	b00f883a 	mov	r7,r22
   10f40:	01800c04 	movi	r6,48
   10f44:	880b883a 	mov	r5,r17
   10f48:	a009883a 	mov	r4,r20
   10f4c:	0010bc00 	call	10bc0 <print_repeat>
   10f50:	1000421e 	bne	r2,zero,1105c <___vfprintf_internal_r+0x430>
   10f54:	85a1883a 	add	r16,r16,r22
   10f58:	e02d883a 	mov	r22,fp
   10f5c:	bf2fc83a 	sub	r23,r23,fp
   10f60:	00002006 	br	10fe4 <___vfprintf_internal_r+0x3b8>
   10f64:	0580090e 	bge	zero,r22,10f8c <___vfprintf_internal_r+0x360>
   10f68:	b00f883a 	mov	r7,r22
   10f6c:	01800804 	movi	r6,32
   10f70:	880b883a 	mov	r5,r17
   10f74:	a009883a 	mov	r4,r20
   10f78:	da401015 	stw	r9,64(sp)
   10f7c:	0010bc00 	call	10bc0 <print_repeat>
   10f80:	da401017 	ldw	r9,64(sp)
   10f84:	1000351e 	bne	r2,zero,1105c <___vfprintf_internal_r+0x430>
   10f88:	85a1883a 	add	r16,r16,r22
   10f8c:	483ff226 	beq	r9,zero,10f58 <__alt_data_end+0xffff0f58>
   10f90:	00800b44 	movi	r2,45
   10f94:	d8800805 	stb	r2,32(sp)
   10f98:	88800117 	ldw	r2,4(r17)
   10f9c:	01c00044 	movi	r7,1
   10fa0:	d9800804 	addi	r6,sp,32
   10fa4:	880b883a 	mov	r5,r17
   10fa8:	a009883a 	mov	r4,r20
   10fac:	103ee83a 	callr	r2
   10fb0:	10002a1e 	bne	r2,zero,1105c <___vfprintf_internal_r+0x430>
   10fb4:	84000044 	addi	r16,r16,1
   10fb8:	003fe706 	br	10f58 <__alt_data_end+0xffff0f58>
   10fbc:	b5bfffc4 	addi	r22,r22,-1
   10fc0:	b0800003 	ldbu	r2,0(r22)
   10fc4:	01c00044 	movi	r7,1
   10fc8:	d9800804 	addi	r6,sp,32
   10fcc:	d8800805 	stb	r2,32(sp)
   10fd0:	88800117 	ldw	r2,4(r17)
   10fd4:	880b883a 	mov	r5,r17
   10fd8:	a009883a 	mov	r4,r20
   10fdc:	103ee83a 	callr	r2
   10fe0:	10001e1e 	bne	r2,zero,1105c <___vfprintf_internal_r+0x430>
   10fe4:	8585c83a 	sub	r2,r16,r22
   10fe8:	b5c9883a 	add	r4,r22,r23
   10fec:	e085883a 	add	r2,fp,r2
   10ff0:	013ff216 	blt	zero,r4,10fbc <__alt_data_end+0xffff0fbc>
   10ff4:	1021883a 	mov	r16,r2
   10ff8:	dd800d17 	ldw	r22,52(sp)
   10ffc:	00004406 	br	11110 <___vfprintf_internal_r+0x4e4>
   11000:	00800044 	movi	r2,1
   11004:	1480080e 	bge	r2,r18,11028 <___vfprintf_internal_r+0x3fc>
   11008:	95ffffc4 	addi	r23,r18,-1
   1100c:	b80f883a 	mov	r7,r23
   11010:	01800804 	movi	r6,32
   11014:	880b883a 	mov	r5,r17
   11018:	a009883a 	mov	r4,r20
   1101c:	0010bc00 	call	10bc0 <print_repeat>
   11020:	10000e1e 	bne	r2,zero,1105c <___vfprintf_internal_r+0x430>
   11024:	85e1883a 	add	r16,r16,r23
   11028:	b0800017 	ldw	r2,0(r22)
   1102c:	01c00044 	movi	r7,1
   11030:	d80d883a 	mov	r6,sp
   11034:	d8800005 	stb	r2,0(sp)
   11038:	88800117 	ldw	r2,4(r17)
   1103c:	880b883a 	mov	r5,r17
   11040:	a009883a 	mov	r4,r20
   11044:	b5c00104 	addi	r23,r22,4
   11048:	103ee83a 	callr	r2
   1104c:	1000031e 	bne	r2,zero,1105c <___vfprintf_internal_r+0x430>
   11050:	84000044 	addi	r16,r16,1
   11054:	b82d883a 	mov	r22,r23
   11058:	00002d06 	br	11110 <___vfprintf_internal_r+0x4e4>
   1105c:	00bfffc4 	movi	r2,-1
   11060:	00003106 	br	11128 <___vfprintf_internal_r+0x4fc>
   11064:	b5c00017 	ldw	r23,0(r22)
   11068:	b7000104 	addi	fp,r22,4
   1106c:	b809883a 	mov	r4,r23
   11070:	0010ba40 	call	10ba4 <strlen>
   11074:	9091c83a 	sub	r8,r18,r2
   11078:	102d883a 	mov	r22,r2
   1107c:	0200090e 	bge	zero,r8,110a4 <___vfprintf_internal_r+0x478>
   11080:	400f883a 	mov	r7,r8
   11084:	01800804 	movi	r6,32
   11088:	880b883a 	mov	r5,r17
   1108c:	a009883a 	mov	r4,r20
   11090:	da001015 	stw	r8,64(sp)
   11094:	0010bc00 	call	10bc0 <print_repeat>
   11098:	da001017 	ldw	r8,64(sp)
   1109c:	103fef1e 	bne	r2,zero,1105c <__alt_data_end+0xffff105c>
   110a0:	8221883a 	add	r16,r16,r8
   110a4:	88800117 	ldw	r2,4(r17)
   110a8:	b00f883a 	mov	r7,r22
   110ac:	b80d883a 	mov	r6,r23
   110b0:	880b883a 	mov	r5,r17
   110b4:	a009883a 	mov	r4,r20
   110b8:	103ee83a 	callr	r2
   110bc:	103fe71e 	bne	r2,zero,1105c <__alt_data_end+0xffff105c>
   110c0:	85a1883a 	add	r16,r16,r22
   110c4:	e02d883a 	mov	r22,fp
   110c8:	00001106 	br	11110 <___vfprintf_internal_r+0x4e4>
   110cc:	00c00044 	movi	r3,1
   110d0:	04ffffc4 	movi	r19,-1
   110d4:	d8000e15 	stw	zero,56(sp)
   110d8:	d8c00a15 	stw	r3,40(sp)
   110dc:	05400284 	movi	r21,10
   110e0:	9825883a 	mov	r18,r19
   110e4:	d8000c15 	stw	zero,48(sp)
   110e8:	d8000b15 	stw	zero,44(sp)
   110ec:	182f883a 	mov	r23,r3
   110f0:	00000806 	br	11114 <___vfprintf_internal_r+0x4e8>
   110f4:	ddc00b15 	stw	r23,44(sp)
   110f8:	05c00084 	movi	r23,2
   110fc:	00000506 	br	11114 <___vfprintf_internal_r+0x4e8>
   11100:	00c00044 	movi	r3,1
   11104:	d8c00c15 	stw	r3,48(sp)
   11108:	05c000c4 	movi	r23,3
   1110c:	00000106 	br	11114 <___vfprintf_internal_r+0x4e8>
   11110:	002f883a 	mov	r23,zero
   11114:	d8c00f17 	ldw	r3,60(sp)
   11118:	18c00044 	addi	r3,r3,1
   1111c:	d8c00f15 	stw	r3,60(sp)
   11120:	003edc06 	br	10c94 <__alt_data_end+0xffff0c94>
   11124:	8005883a 	mov	r2,r16
   11128:	dfc01a17 	ldw	ra,104(sp)
   1112c:	df001917 	ldw	fp,100(sp)
   11130:	ddc01817 	ldw	r23,96(sp)
   11134:	dd801717 	ldw	r22,92(sp)
   11138:	dd401617 	ldw	r21,88(sp)
   1113c:	dd001517 	ldw	r20,84(sp)
   11140:	dcc01417 	ldw	r19,80(sp)
   11144:	dc801317 	ldw	r18,76(sp)
   11148:	dc401217 	ldw	r17,72(sp)
   1114c:	dc001117 	ldw	r16,68(sp)
   11150:	dec01b04 	addi	sp,sp,108
   11154:	f800283a 	ret

00011158 <__vfprintf_internal>:
   11158:	00800074 	movhi	r2,1
   1115c:	10878104 	addi	r2,r2,7684
   11160:	300f883a 	mov	r7,r6
   11164:	280d883a 	mov	r6,r5
   11168:	200b883a 	mov	r5,r4
   1116c:	11000017 	ldw	r4,0(r2)
   11170:	0010c2c1 	jmpi	10c2c <___vfprintf_internal_r>

00011174 <__sfvwrite_small_dev>:
   11174:	2880000b 	ldhu	r2,0(r5)
   11178:	1080020c 	andi	r2,r2,8
   1117c:	10002126 	beq	r2,zero,11204 <__sfvwrite_small_dev+0x90>
   11180:	2880008f 	ldh	r2,2(r5)
   11184:	defffa04 	addi	sp,sp,-24
   11188:	dc000015 	stw	r16,0(sp)
   1118c:	dfc00515 	stw	ra,20(sp)
   11190:	dd000415 	stw	r20,16(sp)
   11194:	dcc00315 	stw	r19,12(sp)
   11198:	dc800215 	stw	r18,8(sp)
   1119c:	dc400115 	stw	r17,4(sp)
   111a0:	2821883a 	mov	r16,r5
   111a4:	10001216 	blt	r2,zero,111f0 <__sfvwrite_small_dev+0x7c>
   111a8:	2027883a 	mov	r19,r4
   111ac:	3025883a 	mov	r18,r6
   111b0:	3823883a 	mov	r17,r7
   111b4:	05010004 	movi	r20,1024
   111b8:	04400b0e 	bge	zero,r17,111e8 <__sfvwrite_small_dev+0x74>
   111bc:	880f883a 	mov	r7,r17
   111c0:	a440010e 	bge	r20,r17,111c8 <__sfvwrite_small_dev+0x54>
   111c4:	01c10004 	movi	r7,1024
   111c8:	8140008f 	ldh	r5,2(r16)
   111cc:	900d883a 	mov	r6,r18
   111d0:	9809883a 	mov	r4,r19
   111d4:	001122c0 	call	1122c <_write_r>
   111d8:	0080050e 	bge	zero,r2,111f0 <__sfvwrite_small_dev+0x7c>
   111dc:	88a3c83a 	sub	r17,r17,r2
   111e0:	90a5883a 	add	r18,r18,r2
   111e4:	003ff406 	br	111b8 <__alt_data_end+0xffff11b8>
   111e8:	0005883a 	mov	r2,zero
   111ec:	00000706 	br	1120c <__sfvwrite_small_dev+0x98>
   111f0:	8080000b 	ldhu	r2,0(r16)
   111f4:	10801014 	ori	r2,r2,64
   111f8:	8080000d 	sth	r2,0(r16)
   111fc:	00bfffc4 	movi	r2,-1
   11200:	00000206 	br	1120c <__sfvwrite_small_dev+0x98>
   11204:	00bfffc4 	movi	r2,-1
   11208:	f800283a 	ret
   1120c:	dfc00517 	ldw	ra,20(sp)
   11210:	dd000417 	ldw	r20,16(sp)
   11214:	dcc00317 	ldw	r19,12(sp)
   11218:	dc800217 	ldw	r18,8(sp)
   1121c:	dc400117 	ldw	r17,4(sp)
   11220:	dc000017 	ldw	r16,0(sp)
   11224:	dec00604 	addi	sp,sp,24
   11228:	f800283a 	ret

0001122c <_write_r>:
   1122c:	defffd04 	addi	sp,sp,-12
   11230:	dc000015 	stw	r16,0(sp)
   11234:	04000074 	movhi	r16,1
   11238:	dc400115 	stw	r17,4(sp)
   1123c:	8407ff04 	addi	r16,r16,8188
   11240:	2023883a 	mov	r17,r4
   11244:	2809883a 	mov	r4,r5
   11248:	300b883a 	mov	r5,r6
   1124c:	380d883a 	mov	r6,r7
   11250:	dfc00215 	stw	ra,8(sp)
   11254:	80000015 	stw	zero,0(r16)
   11258:	001169c0 	call	1169c <write>
   1125c:	00ffffc4 	movi	r3,-1
   11260:	10c0031e 	bne	r2,r3,11270 <_write_r+0x44>
   11264:	80c00017 	ldw	r3,0(r16)
   11268:	18000126 	beq	r3,zero,11270 <_write_r+0x44>
   1126c:	88c00015 	stw	r3,0(r17)
   11270:	dfc00217 	ldw	ra,8(sp)
   11274:	dc400117 	ldw	r17,4(sp)
   11278:	dc000017 	ldw	r16,0(sp)
   1127c:	dec00304 	addi	sp,sp,12
   11280:	f800283a 	ret

00011284 <__divsi3>:
   11284:	20001b16 	blt	r4,zero,112f4 <__divsi3+0x70>
   11288:	000f883a 	mov	r7,zero
   1128c:	28001616 	blt	r5,zero,112e8 <__divsi3+0x64>
   11290:	200d883a 	mov	r6,r4
   11294:	29001a2e 	bgeu	r5,r4,11300 <__divsi3+0x7c>
   11298:	00800804 	movi	r2,32
   1129c:	00c00044 	movi	r3,1
   112a0:	00000106 	br	112a8 <__divsi3+0x24>
   112a4:	10000d26 	beq	r2,zero,112dc <__divsi3+0x58>
   112a8:	294b883a 	add	r5,r5,r5
   112ac:	10bfffc4 	addi	r2,r2,-1
   112b0:	18c7883a 	add	r3,r3,r3
   112b4:	293ffb36 	bltu	r5,r4,112a4 <__alt_data_end+0xffff12a4>
   112b8:	0005883a 	mov	r2,zero
   112bc:	18000726 	beq	r3,zero,112dc <__divsi3+0x58>
   112c0:	0005883a 	mov	r2,zero
   112c4:	31400236 	bltu	r6,r5,112d0 <__divsi3+0x4c>
   112c8:	314dc83a 	sub	r6,r6,r5
   112cc:	10c4b03a 	or	r2,r2,r3
   112d0:	1806d07a 	srli	r3,r3,1
   112d4:	280ad07a 	srli	r5,r5,1
   112d8:	183ffa1e 	bne	r3,zero,112c4 <__alt_data_end+0xffff12c4>
   112dc:	38000126 	beq	r7,zero,112e4 <__divsi3+0x60>
   112e0:	0085c83a 	sub	r2,zero,r2
   112e4:	f800283a 	ret
   112e8:	014bc83a 	sub	r5,zero,r5
   112ec:	39c0005c 	xori	r7,r7,1
   112f0:	003fe706 	br	11290 <__alt_data_end+0xffff1290>
   112f4:	0109c83a 	sub	r4,zero,r4
   112f8:	01c00044 	movi	r7,1
   112fc:	003fe306 	br	1128c <__alt_data_end+0xffff128c>
   11300:	00c00044 	movi	r3,1
   11304:	003fee06 	br	112c0 <__alt_data_end+0xffff12c0>

00011308 <__modsi3>:
   11308:	20001716 	blt	r4,zero,11368 <__modsi3+0x60>
   1130c:	000f883a 	mov	r7,zero
   11310:	2005883a 	mov	r2,r4
   11314:	28001216 	blt	r5,zero,11360 <__modsi3+0x58>
   11318:	2900162e 	bgeu	r5,r4,11374 <__modsi3+0x6c>
   1131c:	01800804 	movi	r6,32
   11320:	00c00044 	movi	r3,1
   11324:	00000106 	br	1132c <__modsi3+0x24>
   11328:	30000a26 	beq	r6,zero,11354 <__modsi3+0x4c>
   1132c:	294b883a 	add	r5,r5,r5
   11330:	31bfffc4 	addi	r6,r6,-1
   11334:	18c7883a 	add	r3,r3,r3
   11338:	293ffb36 	bltu	r5,r4,11328 <__alt_data_end+0xffff1328>
   1133c:	18000526 	beq	r3,zero,11354 <__modsi3+0x4c>
   11340:	1806d07a 	srli	r3,r3,1
   11344:	11400136 	bltu	r2,r5,1134c <__modsi3+0x44>
   11348:	1145c83a 	sub	r2,r2,r5
   1134c:	280ad07a 	srli	r5,r5,1
   11350:	183ffb1e 	bne	r3,zero,11340 <__alt_data_end+0xffff1340>
   11354:	38000126 	beq	r7,zero,1135c <__modsi3+0x54>
   11358:	0085c83a 	sub	r2,zero,r2
   1135c:	f800283a 	ret
   11360:	014bc83a 	sub	r5,zero,r5
   11364:	003fec06 	br	11318 <__alt_data_end+0xffff1318>
   11368:	0109c83a 	sub	r4,zero,r4
   1136c:	01c00044 	movi	r7,1
   11370:	003fe706 	br	11310 <__alt_data_end+0xffff1310>
   11374:	00c00044 	movi	r3,1
   11378:	003ff106 	br	11340 <__alt_data_end+0xffff1340>

0001137c <__udivsi3>:
   1137c:	200d883a 	mov	r6,r4
   11380:	2900152e 	bgeu	r5,r4,113d8 <__udivsi3+0x5c>
   11384:	28001416 	blt	r5,zero,113d8 <__udivsi3+0x5c>
   11388:	00800804 	movi	r2,32
   1138c:	00c00044 	movi	r3,1
   11390:	00000206 	br	1139c <__udivsi3+0x20>
   11394:	10000e26 	beq	r2,zero,113d0 <__udivsi3+0x54>
   11398:	28000516 	blt	r5,zero,113b0 <__udivsi3+0x34>
   1139c:	294b883a 	add	r5,r5,r5
   113a0:	10bfffc4 	addi	r2,r2,-1
   113a4:	18c7883a 	add	r3,r3,r3
   113a8:	293ffa36 	bltu	r5,r4,11394 <__alt_data_end+0xffff1394>
   113ac:	18000826 	beq	r3,zero,113d0 <__udivsi3+0x54>
   113b0:	0005883a 	mov	r2,zero
   113b4:	31400236 	bltu	r6,r5,113c0 <__udivsi3+0x44>
   113b8:	314dc83a 	sub	r6,r6,r5
   113bc:	10c4b03a 	or	r2,r2,r3
   113c0:	1806d07a 	srli	r3,r3,1
   113c4:	280ad07a 	srli	r5,r5,1
   113c8:	183ffa1e 	bne	r3,zero,113b4 <__alt_data_end+0xffff13b4>
   113cc:	f800283a 	ret
   113d0:	0005883a 	mov	r2,zero
   113d4:	f800283a 	ret
   113d8:	00c00044 	movi	r3,1
   113dc:	003ff406 	br	113b0 <__alt_data_end+0xffff13b0>

000113e0 <__umodsi3>:
   113e0:	2005883a 	mov	r2,r4
   113e4:	2900122e 	bgeu	r5,r4,11430 <__umodsi3+0x50>
   113e8:	28001116 	blt	r5,zero,11430 <__umodsi3+0x50>
   113ec:	01800804 	movi	r6,32
   113f0:	00c00044 	movi	r3,1
   113f4:	00000206 	br	11400 <__umodsi3+0x20>
   113f8:	30000c26 	beq	r6,zero,1142c <__umodsi3+0x4c>
   113fc:	28000516 	blt	r5,zero,11414 <__umodsi3+0x34>
   11400:	294b883a 	add	r5,r5,r5
   11404:	31bfffc4 	addi	r6,r6,-1
   11408:	18c7883a 	add	r3,r3,r3
   1140c:	293ffa36 	bltu	r5,r4,113f8 <__alt_data_end+0xffff13f8>
   11410:	18000626 	beq	r3,zero,1142c <__umodsi3+0x4c>
   11414:	1806d07a 	srli	r3,r3,1
   11418:	11400136 	bltu	r2,r5,11420 <__umodsi3+0x40>
   1141c:	1145c83a 	sub	r2,r2,r5
   11420:	280ad07a 	srli	r5,r5,1
   11424:	183ffb1e 	bne	r3,zero,11414 <__alt_data_end+0xffff1414>
   11428:	f800283a 	ret
   1142c:	f800283a 	ret
   11430:	00c00044 	movi	r3,1
   11434:	003ff706 	br	11414 <__alt_data_end+0xffff1414>

00011438 <__mulsi3>:
   11438:	0005883a 	mov	r2,zero
   1143c:	20000726 	beq	r4,zero,1145c <__mulsi3+0x24>
   11440:	20c0004c 	andi	r3,r4,1
   11444:	2008d07a 	srli	r4,r4,1
   11448:	18000126 	beq	r3,zero,11450 <__mulsi3+0x18>
   1144c:	1145883a 	add	r2,r2,r5
   11450:	294b883a 	add	r5,r5,r5
   11454:	203ffa1e 	bne	r4,zero,11440 <__alt_data_end+0xffff1440>
   11458:	f800283a 	ret
   1145c:	f800283a 	ret

00011460 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11460:	008007c4 	movi	r2,31
   11464:	11002136 	bltu	r2,r4,114ec <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11468:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1146c:	00ffff84 	movi	r3,-2
   11470:	38c4703a 	and	r2,r7,r3
   11474:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   11478:	200490fa 	slli	r2,r4,3
   1147c:	02000074 	movhi	r8,1
   11480:	4208c704 	addi	r8,r8,8988
   11484:	4085883a 	add	r2,r8,r2
   11488:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
   1148c:	11400115 	stw	r5,4(r2)
   11490:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   11494:	30000726 	beq	r6,zero,114b4 <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11498:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1149c:	28c6703a 	and	r3,r5,r3
   114a0:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   114a4:	d0e08317 	ldw	r3,-32244(gp)
   114a8:	1104983a 	sll	r2,r2,r4
   114ac:	10c4b03a 	or	r2,r2,r3
   114b0:	00000706 	br	114d0 <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   114b4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   114b8:	28c6703a 	and	r3,r5,r3
   114bc:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   114c0:	1104983a 	sll	r2,r2,r4
   114c4:	d0e08317 	ldw	r3,-32244(gp)
   114c8:	0084303a 	nor	r2,zero,r2
   114cc:	10c4703a 	and	r2,r2,r3
   114d0:	d0a08315 	stw	r2,-32244(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   114d4:	d0a08317 	ldw	r2,-32244(gp)
   114d8:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   114dc:	2801703a 	wrctl	status,r5
   114e0:	3801703a 	wrctl	status,r7
   114e4:	0005883a 	mov	r2,zero
   114e8:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
   114ec:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
   114f0:	f800283a 	ret

000114f4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   114f4:	deffff04 	addi	sp,sp,-4
   114f8:	01000074 	movhi	r4,1
   114fc:	01400074 	movhi	r5,1
   11500:	dfc00015 	stw	ra,0(sp)
   11504:	21072404 	addi	r4,r4,7312
   11508:	29478d04 	addi	r5,r5,7732

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   1150c:	2140061e 	bne	r4,r5,11528 <alt_load+0x34>
   11510:	01000074 	movhi	r4,1
   11514:	01400074 	movhi	r5,1
   11518:	21000804 	addi	r4,r4,32
   1151c:	29400804 	addi	r5,r5,32
   11520:	2140121e 	bne	r4,r5,1156c <alt_load+0x78>
   11524:	00000b06 	br	11554 <alt_load+0x60>
   11528:	00c00074 	movhi	r3,1
   1152c:	18c78d04 	addi	r3,r3,7732
   11530:	1907c83a 	sub	r3,r3,r4
   11534:	0005883a 	mov	r2,zero
  {
    while( to != end )
   11538:	10fff526 	beq	r2,r3,11510 <__alt_data_end+0xffff1510>
    {
      *to++ = *from++;
   1153c:	114f883a 	add	r7,r2,r5
   11540:	39c00017 	ldw	r7,0(r7)
   11544:	110d883a 	add	r6,r2,r4
   11548:	10800104 	addi	r2,r2,4
   1154c:	31c00015 	stw	r7,0(r6)
   11550:	003ff906 	br	11538 <__alt_data_end+0xffff1538>
   11554:	01000074 	movhi	r4,1
   11558:	01400074 	movhi	r5,1
   1155c:	2106f404 	addi	r4,r4,7120
   11560:	2946f404 	addi	r5,r5,7120

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   11564:	2140101e 	bne	r4,r5,115a8 <alt_load+0xb4>
   11568:	00000b06 	br	11598 <alt_load+0xa4>
   1156c:	00c00074 	movhi	r3,1
   11570:	18c06004 	addi	r3,r3,384
   11574:	1907c83a 	sub	r3,r3,r4
   11578:	0005883a 	mov	r2,zero
  {
    while( to != end )
   1157c:	10fff526 	beq	r2,r3,11554 <__alt_data_end+0xffff1554>
    {
      *to++ = *from++;
   11580:	114f883a 	add	r7,r2,r5
   11584:	39c00017 	ldw	r7,0(r7)
   11588:	110d883a 	add	r6,r2,r4
   1158c:	10800104 	addi	r2,r2,4
   11590:	31c00015 	stw	r7,0(r6)
   11594:	003ff906 	br	1157c <__alt_data_end+0xffff157c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   11598:	00119480 	call	11948 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   1159c:	dfc00017 	ldw	ra,0(sp)
   115a0:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   115a4:	0011a341 	jmpi	11a34 <alt_icache_flush_all>
   115a8:	00c00074 	movhi	r3,1
   115ac:	18c72404 	addi	r3,r3,7312
   115b0:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   115b4:	0005883a 	mov	r2,zero
  {
    while( to != end )
   115b8:	18bff726 	beq	r3,r2,11598 <__alt_data_end+0xffff1598>
    {
      *to++ = *from++;
   115bc:	114f883a 	add	r7,r2,r5
   115c0:	39c00017 	ldw	r7,0(r7)
   115c4:	110d883a 	add	r6,r2,r4
   115c8:	10800104 	addi	r2,r2,4
   115cc:	31c00015 	stw	r7,0(r6)
   115d0:	003ff906 	br	115b8 <__alt_data_end+0xffff15b8>

000115d4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   115d4:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   115d8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   115dc:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   115e0:	00116fc0 	call	116fc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   115e4:	001171c0 	call	1171c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   115e8:	d1a08417 	ldw	r6,-32240(gp)
   115ec:	d1608517 	ldw	r5,-32236(gp)
   115f0:	d1208617 	ldw	r4,-32232(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   115f4:	dfc00017 	ldw	ra,0(sp)
   115f8:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   115fc:	00107201 	jmpi	10720 <main>

00011600 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   11600:	defffe04 	addi	sp,sp,-8
   11604:	dc000015 	stw	r16,0(sp)
   11608:	dfc00115 	stw	ra,4(sp)
   1160c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   11610:	0010ba40 	call	10ba4 <strlen>
   11614:	01000074 	movhi	r4,1
   11618:	000f883a 	mov	r7,zero
   1161c:	100d883a 	mov	r6,r2
   11620:	800b883a 	mov	r5,r16
   11624:	21078404 	addi	r4,r4,7696
#else
    return fputs(str, stdout);
#endif
#endif
}
   11628:	dfc00117 	ldw	ra,4(sp)
   1162c:	dc000017 	ldw	r16,0(sp)
   11630:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   11634:	001172c1 	jmpi	1172c <altera_avalon_jtag_uart_write>

00011638 <times>:
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   11638:	d0e08817 	ldw	r3,-32224(gp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1163c:	d0a08717 	ldw	r2,-32228(gp)
{
  clock_t ticks = alt_nticks(); 

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   11640:	1800101e 	bne	r3,zero,11684 <times+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   11644:	d0a00d17 	ldw	r2,-32716(gp)
   11648:	10000926 	beq	r2,zero,11670 <times+0x38>
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   1164c:	deffff04 	addi	sp,sp,-4
   11650:	dfc00015 	stw	ra,0(sp)
   11654:	103ee83a 	callr	r2

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  {
    ALT_ERRNO = ENOSYS;
   11658:	00c01604 	movi	r3,88
   1165c:	10c00015 	stw	r3,0(r2)
    return 0;
   11660:	0005883a 	mov	r2,zero
  buf->tms_stime  = ticks;
  buf->tms_cutime = 0;
  buf->tms_cstime = 0;

  return ticks;
}
   11664:	dfc00017 	ldw	ra,0(sp)
   11668:	dec00104 	addi	sp,sp,4
   1166c:	f800283a 	ret
   11670:	d0a08204 	addi	r2,gp,-32248

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  {
    ALT_ERRNO = ENOSYS;
   11674:	00c01604 	movi	r3,88
   11678:	10c00015 	stw	r3,0(r2)
    return 0;
   1167c:	0005883a 	mov	r2,zero
  buf->tms_stime  = ticks;
  buf->tms_cutime = 0;
  buf->tms_cstime = 0;

  return ticks;
}
   11680:	f800283a 	ret
    return 0;
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   11684:	20000015 	stw	zero,0(r4)
  buf->tms_stime  = ticks;
   11688:	20800115 	stw	r2,4(r4)
  buf->tms_cutime = 0;
   1168c:	20000215 	stw	zero,8(r4)
  buf->tms_cstime = 0;
   11690:	20000315 	stw	zero,12(r4)

  return ticks;
   11694:	f800283a 	ret

00011698 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
   11698:	00118c01 	jmpi	118c0 <alt_busy_sleep>

0001169c <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   1169c:	00800044 	movi	r2,1
   116a0:	20800226 	beq	r4,r2,116ac <write+0x10>
   116a4:	00800084 	movi	r2,2
   116a8:	2080041e 	bne	r4,r2,116bc <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   116ac:	01000074 	movhi	r4,1
   116b0:	000f883a 	mov	r7,zero
   116b4:	21078404 	addi	r4,r4,7696
   116b8:	001172c1 	jmpi	1172c <altera_avalon_jtag_uart_write>
   116bc:	d0a00d17 	ldw	r2,-32716(gp)
   116c0:	10000926 	beq	r2,zero,116e8 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   116c4:	deffff04 	addi	sp,sp,-4
   116c8:	dfc00015 	stw	ra,0(sp)
   116cc:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   116d0:	00c01444 	movi	r3,81
   116d4:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   116d8:	00bfffc4 	movi	r2,-1
   116dc:	dfc00017 	ldw	ra,0(sp)
   116e0:	dec00104 	addi	sp,sp,4
   116e4:	f800283a 	ret
   116e8:	d0a08204 	addi	r2,gp,-32248
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   116ec:	00c01444 	movi	r3,81
   116f0:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   116f4:	00bfffc4 	movi	r2,-1
   116f8:	f800283a 	ret

000116fc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   116fc:	deffff04 	addi	sp,sp,-4
   11700:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   11704:	0011b240 	call	11b24 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   11708:	00800044 	movi	r2,1
   1170c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   11710:	dfc00017 	ldw	ra,0(sp)
   11714:	dec00104 	addi	sp,sp,4
   11718:	f800283a 	ret

0001171c <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1171c:	01000074 	movhi	r4,1
   11720:	d1600904 	addi	r5,gp,-32732
   11724:	21075c04 	addi	r4,r4,7536
   11728:	00119541 	jmpi	11954 <alt_dev_llist_insert>

0001172c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   1172c:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   11730:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   11734:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   11738:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   1173c:	2980072e 	bgeu	r5,r6,1175c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   11740:	38c00037 	ldwio	r3,0(r7)
   11744:	18ffffec 	andhi	r3,r3,65535
   11748:	183ffc26 	beq	r3,zero,1173c <__alt_data_end+0xffff173c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   1174c:	28c00007 	ldb	r3,0(r5)
   11750:	20c00035 	stwio	r3,0(r4)
   11754:	29400044 	addi	r5,r5,1
   11758:	003ff806 	br	1173c <__alt_data_end+0xffff173c>

  return count;
}
   1175c:	f800283a 	ret

00011760 <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   11760:	d1600904 	addi	r5,gp,-32732
   11764:	00119c01 	jmpi	119c0 <alt_find_dev>

00011768 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   11768:	20800a17 	ldw	r2,40(r4)
   1176c:	10800023 	ldbuio	r2,0(r2)
   11770:	28800005 	stb	r2,0(r5)

	return 0;
}
   11774:	0005883a 	mov	r2,zero
   11778:	f800283a 	ret

0001177c <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1177c:	20800a17 	ldw	r2,40(r4)
   11780:	29400fcc 	andi	r5,r5,63
   11784:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11788:	20800a17 	ldw	r2,40(r4)
   1178c:	10800063 	ldbuio	r2,1(r2)
   11790:	30800005 	stb	r2,0(r6)

	return 0;
}
   11794:	0005883a 	mov	r2,zero
   11798:	f800283a 	ret

0001179c <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1179c:	20800a17 	ldw	r2,40(r4)
   117a0:	29400fcc 	andi	r5,r5,63
   117a4:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   117a8:	20800a17 	ldw	r2,40(r4)
   117ac:	11800065 	stbio	r6,1(r2)

	return 0;
}
   117b0:	0005883a 	mov	r2,zero
   117b4:	f800283a 	ret

000117b8 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   117b8:	20800a17 	ldw	r2,40(r4)
   117bc:	00c00c84 	movi	r3,50
   117c0:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   117c4:	20800a17 	ldw	r2,40(r4)
   117c8:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   117cc:	00c00cc4 	movi	r3,51
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   117d0:	10803fcc 	andi	r2,r2,255
   117d4:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   117d8:	20800a17 	ldw	r2,40(r4)
   117dc:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   117e0:	20800a17 	ldw	r2,40(r4)
   117e4:	10800063 	ldbuio	r2,1(r2)
   117e8:	10803fcc 	andi	r2,r2,255
   117ec:	1006923a 	slli	r3,r2,8
   117f0:	28800017 	ldw	r2,0(r5)
   117f4:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
   117f8:	10e0000c 	andi	r3,r2,32768
   117fc:	18000126 	beq	r3,zero,11804 <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
   11800:	10bffff4 	orhi	r2,r2,65535
   11804:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   11808:	0005883a 	mov	r2,zero
   1180c:	f800283a 	ret

00011810 <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11810:	20800a17 	ldw	r2,40(r4)
   11814:	00c00d04 	movi	r3,52
   11818:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1181c:	20800a17 	ldw	r2,40(r4)
   11820:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11824:	00c00d44 	movi	r3,53
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11828:	10803fcc 	andi	r2,r2,255
   1182c:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11830:	20800a17 	ldw	r2,40(r4)
   11834:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11838:	20800a17 	ldw	r2,40(r4)
   1183c:	10800063 	ldbuio	r2,1(r2)
   11840:	10803fcc 	andi	r2,r2,255
   11844:	1006923a 	slli	r3,r2,8
   11848:	28800017 	ldw	r2,0(r5)
   1184c:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
   11850:	10e0000c 	andi	r3,r2,32768
   11854:	18000126 	beq	r3,zero,1185c <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
   11858:	10bffff4 	orhi	r2,r2,65535
   1185c:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   11860:	0005883a 	mov	r2,zero
   11864:	f800283a 	ret

00011868 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11868:	20800a17 	ldw	r2,40(r4)
   1186c:	00c00d84 	movi	r3,54
   11870:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11874:	20800a17 	ldw	r2,40(r4)
   11878:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1187c:	00c00dc4 	movi	r3,55
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11880:	10803fcc 	andi	r2,r2,255
   11884:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11888:	20800a17 	ldw	r2,40(r4)
   1188c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11890:	20800a17 	ldw	r2,40(r4)
   11894:	10800063 	ldbuio	r2,1(r2)
   11898:	10803fcc 	andi	r2,r2,255
   1189c:	1006923a 	slli	r3,r2,8
   118a0:	28800017 	ldw	r2,0(r5)
   118a4:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
   118a8:	10e0000c 	andi	r3,r2,32768
   118ac:	18000126 	beq	r3,zero,118b4 <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
   118b0:	10bffff4 	orhi	r2,r2,65535
   118b4:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   118b8:	0005883a 	mov	r2,zero
   118bc:	f800283a 	ret

000118c0 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   118c0:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   118c4:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   118c8:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   118cc:	dc000015 	stw	r16,0(sp)
   118d0:	dfc00115 	stw	ra,4(sp)
   118d4:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   118d8:	001137c0 	call	1137c <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   118dc:	10001026 	beq	r2,zero,11920 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   118e0:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   118e4:	013999b4 	movhi	r4,58982
   118e8:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   118ec:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   118f0:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   118f4:	297fffc4 	addi	r5,r5,-1
   118f8:	283ffe1e 	bne	r5,zero,118f4 <__alt_data_end+0xffff18f4>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   118fc:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   11900:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   11904:	18bffb16 	blt	r3,r2,118f4 <__alt_data_end+0xffff18f4>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11908:	01400144 	movi	r5,5
   1190c:	8009883a 	mov	r4,r16
   11910:	00114380 	call	11438 <__mulsi3>
   11914:	10bfffc4 	addi	r2,r2,-1
   11918:	103ffe1e 	bne	r2,zero,11914 <__alt_data_end+0xffff1914>
   1191c:	00000506 	br	11934 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11920:	01400144 	movi	r5,5
   11924:	8009883a 	mov	r4,r16
   11928:	00114380 	call	11438 <__mulsi3>
   1192c:	10bfffc4 	addi	r2,r2,-1
   11930:	00bffe16 	blt	zero,r2,1192c <__alt_data_end+0xffff192c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   11934:	0005883a 	mov	r2,zero
   11938:	dfc00117 	ldw	ra,4(sp)
   1193c:	dc000017 	ldw	r16,0(sp)
   11940:	dec00204 	addi	sp,sp,8
   11944:	f800283a 	ret

00011948 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11948:	f800283a 	ret

0001194c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   1194c:	3005883a 	mov	r2,r6
   11950:	f800283a 	ret

00011954 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11954:	20000226 	beq	r4,zero,11960 <alt_dev_llist_insert+0xc>
   11958:	20800217 	ldw	r2,8(r4)
   1195c:	1000101e 	bne	r2,zero,119a0 <alt_dev_llist_insert+0x4c>
   11960:	d0a00d17 	ldw	r2,-32716(gp)
   11964:	10000926 	beq	r2,zero,1198c <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   11968:	deffff04 	addi	sp,sp,-4
   1196c:	dfc00015 	stw	ra,0(sp)
   11970:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   11974:	00c00584 	movi	r3,22
   11978:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   1197c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   11980:	dfc00017 	ldw	ra,0(sp)
   11984:	dec00104 	addi	sp,sp,4
   11988:	f800283a 	ret
   1198c:	d0a08204 	addi	r2,gp,-32248
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   11990:	00c00584 	movi	r3,22
   11994:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   11998:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   1199c:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   119a0:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   119a4:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   119a8:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   119ac:	28800017 	ldw	r2,0(r5)
   119b0:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   119b4:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   119b8:	0005883a 	mov	r2,zero
   119bc:	f800283a 	ret

000119c0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   119c0:	defffb04 	addi	sp,sp,-20
   119c4:	dcc00315 	stw	r19,12(sp)
   119c8:	dc800215 	stw	r18,8(sp)
   119cc:	dc400115 	stw	r17,4(sp)
   119d0:	dc000015 	stw	r16,0(sp)
   119d4:	dfc00415 	stw	ra,16(sp)
   119d8:	2027883a 	mov	r19,r4
   119dc:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   119e0:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   119e4:	0010ba40 	call	10ba4 <strlen>
   119e8:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   119ec:	84400726 	beq	r16,r17,11a0c <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   119f0:	81000217 	ldw	r4,8(r16)
   119f4:	900d883a 	mov	r6,r18
   119f8:	980b883a 	mov	r5,r19
   119fc:	0011ba00 	call	11ba0 <memcmp>
   11a00:	10000426 	beq	r2,zero,11a14 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   11a04:	84000017 	ldw	r16,0(r16)
   11a08:	003ff806 	br	119ec <__alt_data_end+0xffff19ec>
  }
  
  /* No match found */
  
  return NULL;
   11a0c:	0005883a 	mov	r2,zero
   11a10:	00000106 	br	11a18 <alt_find_dev+0x58>
   11a14:	8005883a 	mov	r2,r16
}
   11a18:	dfc00417 	ldw	ra,16(sp)
   11a1c:	dcc00317 	ldw	r19,12(sp)
   11a20:	dc800217 	ldw	r18,8(sp)
   11a24:	dc400117 	ldw	r17,4(sp)
   11a28:	dc000017 	ldw	r16,0(sp)
   11a2c:	dec00504 	addi	sp,sp,20
   11a30:	f800283a 	ret

00011a34 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11a34:	f800283a 	ret

00011a38 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11a38:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11a3c:	00bfff84 	movi	r2,-2
   11a40:	1884703a 	and	r2,r3,r2
   11a44:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   11a48:	21400117 	ldw	r5,4(r4)
   11a4c:	20800017 	ldw	r2,0(r4)
   11a50:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
   11a54:	21400117 	ldw	r5,4(r4)
   11a58:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   11a5c:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
   11a60:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11a64:	1801703a 	wrctl	status,r3
   11a68:	f800283a 	ret

00011a6c <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11a6c:	d0a08717 	ldw	r2,-32228(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11a70:	defffb04 	addi	sp,sp,-20
   11a74:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   11a78:	d4200e17 	ldw	r16,-32712(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11a7c:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11a80:	dc800215 	stw	r18,8(sp)
   11a84:	dc400115 	stw	r17,4(sp)
   11a88:	dfc00415 	stw	ra,16(sp)
   11a8c:	dcc00315 	stw	r19,12(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11a90:	d0a08715 	stw	r2,-32228(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11a94:	d4600e04 	addi	r17,gp,-32712
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
   11a98:	04800044 	movi	r18,1

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11a9c:	84401a26 	beq	r16,r17,11b08 <alt_tick+0x9c>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11aa0:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
   11aa4:	84c00017 	ldw	r19,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11aa8:	10000326 	beq	r2,zero,11ab8 <alt_tick+0x4c>
   11aac:	d0a08717 	ldw	r2,-32228(gp)
   11ab0:	1000011e 	bne	r2,zero,11ab8 <alt_tick+0x4c>
    {
      alarm->rollover = 0;
   11ab4:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   11ab8:	d0e08717 	ldw	r3,-32228(gp)
   11abc:	80800217 	ldw	r2,8(r16)
   11ac0:	18800f36 	bltu	r3,r2,11b00 <alt_tick+0x94>
   11ac4:	80800403 	ldbu	r2,16(r16)
   11ac8:	10000d1e 	bne	r2,zero,11b00 <alt_tick+0x94>
    {
      next_callback = alarm->callback (alarm->context);
   11acc:	80800317 	ldw	r2,12(r16)
   11ad0:	81000517 	ldw	r4,20(r16)
   11ad4:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   11ad8:	1000031e 	bne	r2,zero,11ae8 <alt_tick+0x7c>
      {
        alt_alarm_stop (alarm);
   11adc:	8009883a 	mov	r4,r16
   11ae0:	0011a380 	call	11a38 <alt_alarm_stop>
   11ae4:	00000606 	br	11b00 <alt_tick+0x94>
      }
      else
      {
        alarm->time += next_callback;
   11ae8:	80c00217 	ldw	r3,8(r16)
   11aec:	10c5883a 	add	r2,r2,r3
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11af0:	d0e08717 	ldw	r3,-32228(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
   11af4:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11af8:	10c0012e 	bgeu	r2,r3,11b00 <alt_tick+0x94>
        {
          alarm->rollover = 1;
   11afc:	84800405 	stb	r18,16(r16)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11b00:	9821883a 	mov	r16,r19
   11b04:	003fe506 	br	11a9c <__alt_data_end+0xffff1a9c>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   11b08:	dfc00417 	ldw	ra,16(sp)
   11b0c:	dcc00317 	ldw	r19,12(sp)
   11b10:	dc800217 	ldw	r18,8(sp)
   11b14:	dc400117 	ldw	r17,4(sp)
   11b18:	dc000017 	ldw	r16,0(sp)
   11b1c:	dec00504 	addi	sp,sp,20
   11b20:	f800283a 	ret

00011b24 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   11b24:	000170fa 	wrctl	ienable,zero
   11b28:	f800283a 	ret

00011b2c <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   11b2c:	213ffe84 	addi	r4,r4,-6
   11b30:	008003c4 	movi	r2,15
   11b34:	11001636 	bltu	r2,r4,11b90 <alt_exception_cause_generated_bad_addr+0x64>
   11b38:	200890ba 	slli	r4,r4,2
   11b3c:	00800074 	movhi	r2,1
   11b40:	1086d404 	addi	r2,r2,6992
   11b44:	2089883a 	add	r4,r4,r2
   11b48:	20800017 	ldw	r2,0(r4)
   11b4c:	1000683a 	jmp	r2
   11b50:	00011b98 	cmpnei	zero,zero,1134
   11b54:	00011b98 	cmpnei	zero,zero,1134
   11b58:	00011b90 	cmplti	zero,zero,1134
   11b5c:	00011b90 	cmplti	zero,zero,1134
   11b60:	00011b90 	cmplti	zero,zero,1134
   11b64:	00011b98 	cmpnei	zero,zero,1134
   11b68:	00011b90 	cmplti	zero,zero,1134
   11b6c:	00011b90 	cmplti	zero,zero,1134
   11b70:	00011b98 	cmpnei	zero,zero,1134
   11b74:	00011b98 	cmpnei	zero,zero,1134
   11b78:	00011b90 	cmplti	zero,zero,1134
   11b7c:	00011b98 	cmpnei	zero,zero,1134
   11b80:	00011b90 	cmplti	zero,zero,1134
   11b84:	00011b90 	cmplti	zero,zero,1134
   11b88:	00011b90 	cmplti	zero,zero,1134
   11b8c:	00011b98 	cmpnei	zero,zero,1134
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11b90:	0005883a 	mov	r2,zero
   11b94:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11b98:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   11b9c:	f800283a 	ret

00011ba0 <memcmp>:
   11ba0:	218d883a 	add	r6,r4,r6
   11ba4:	21800826 	beq	r4,r6,11bc8 <memcmp+0x28>
   11ba8:	20800003 	ldbu	r2,0(r4)
   11bac:	28c00003 	ldbu	r3,0(r5)
   11bb0:	10c00226 	beq	r2,r3,11bbc <memcmp+0x1c>
   11bb4:	10c5c83a 	sub	r2,r2,r3
   11bb8:	f800283a 	ret
   11bbc:	21000044 	addi	r4,r4,1
   11bc0:	29400044 	addi	r5,r5,1
   11bc4:	003ff706 	br	11ba4 <__alt_data_end+0xffff1ba4>
   11bc8:	0005883a 	mov	r2,zero
   11bcc:	f800283a 	ret
