
board2.elf:     file format elf32-littlenios2
board2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00001f98 memsz 0x00001f98 flags r-x
    LOAD off    0x00002fb8 vaddr 0x00011fb8 paddr 0x0001215c align 2**12
         filesz 0x000001a4 memsz 0x000001a4 flags rw-
    LOAD off    0x00003300 vaddr 0x00012300 paddr 0x00012300 align 2**12
         filesz 0x00000000 memsz 0x000004ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001d7c  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000bc  00011efc  00011efc  00002efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000001a4  00011fb8  0001215c  00002fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000004ac  00012300  00012300  00003300  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  000127ac  000127ac  0000315c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000315c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000500  00000000  00000000  00003180  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00006f35  00000000  00000000  00003680  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000257a  00000000  00000000  0000a5b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002a9c  00000000  00000000  0000cb2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000810  00000000  00000000  0000f5cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001d74  00000000  00000000  0000fddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002171  00000000  00000000  00011b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00013cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000003c8  00000000  00000000  00013d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00015c6a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00015c6d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00015c70  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00015c71  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00015c72  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00015c76  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00015c7a  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00015c7e  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00015c87  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00015c90  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00015c99  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000005a  00000000  00000000  00015ca4  2**0
                  CONTENTS, READONLY
 29 .jdi          00004920  00000000  00000000  00015cfe  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00078340  00000000  00000000  0001a61e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
00011efc l    d  .rodata	00000000 .rodata
00011fb8 l    d  .rwdata	00000000 .rwdata
00012300 l    d  .bss	00000000 .bss
000127ac l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../board2_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00011f7e l     O .rodata	0000002b CSWTCH.44
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000110d8 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00011fb8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_times.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00012098 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00011c78 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
00012344 g     O .bss	00000004 alt_instruction_exception_handler
00011938 g     F .text	0000002c alt_main
0001061c g     F .text	00000014 led_write
00010fec g     F .text	00000080 _puts_r
000126ac g     O .bss	00000100 alt_irq
00012304 g     O .bss	00000004 location
0001215c g       *ABS*	00000000 __flash_rwdata_start
000104d0 g     F .text	00000054 print
00010fa0 g     F .text	0000004c printf
00010294 g     F .text	000000a0 getActualText
00012124 g     O .rwdata	00000004 timer
000101bc g     F .text	00000080 sys_timer_isr
0001211c g     O .rwdata	00000004 FLATHIGH
00012138 g     O .rwdata	00000004 jtag_uart
00011e50 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00011964 g     F .text	00000060 times
00010694 g     F .text	0000000c is_flat
00011ae4 g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
00012328 g     O .bss	00000004 errno
00012334 g     O .bss	00000004 alt_argv
0001a11c g       *ABS*	00000000 _gp
000119c4 g     F .text	00000004 usleep
000120c4 g     O .rwdata	00000030 alt_fd_list
00011cec g     F .text	00000074 alt_find_dev
0001106c g     F .text	00000014 puts
00011e58 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00010f64 g     F .text	0000003c _printf_r
00010e88 g     F .text	00000064 .hidden __udivsi3
00012308 g     O .bss	00000004 length
00012120 g     O .rwdata	00000004 FLATLOW
0001213c g     O .rwdata	00000004 alt_max_fd
000117c4 g     F .text	00000094 alt_irq_register
00012128 g     O .rwdata	00000004 _global_impure_ptr
000127ac g       *ABS*	00000000 __bss_end
00011d98 g     F .text	000000b8 alt_tick
0001230c g     O .bss	00000004 static_flag
00011d64 g     F .text	00000034 alt_alarm_stop
0001232c g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
000120f4 g     O .rwdata	00000028 alt_dev_null
00012310 g     O .bss	00000004 serverdata
00010710 g     F .text	000002fc start_game
0001023c g     F .text	00000058 initializeDisplay
00011c74 g     F .text	00000004 alt_dcache_flush_all
0001215c g       *ABS*	00000000 __ram_rwdata_end
000106a0 g     F .text	00000070 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00010524 g     F .text	000000f8 print_letters
00012140 g     O .rwdata	00000008 alt_dev_list
00012348 g     O .bss	00000200 text
000119c8 g     F .text	00000060 write
00011fb8 g       *ABS*	00000000 __ram_rodata_end
00011080 g     F .text	0000003c strcat
00012314 g     O .bss	00000001 led
00010eec g     F .text	00000058 .hidden __umodsi3
000127ac g       *ABS*	00000000 end
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
00011a58 g     F .text	00000034 altera_avalon_jtag_uart_write
00011144 g     F .text	0000052c ___vfprintf_internal_r
00010180 g     F .text	0000003c _start
00012318 g     O .bss	00000004 level
00012340 g     O .bss	00000004 _alt_tick_rate
00012548 g     O .bss	00000064 game_response
0001233c g     O .bss	00000004 _alt_nticks
00011a48 g     F .text	00000010 alt_sys_init
00011a94 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
0001231c g     O .bss	00000003 admin_response
00010a0c g     F .text	00000220 admin_actions
0001179c g     F .text	00000028 .hidden __mulsi3
00011fb8 g       *ABS*	00000000 __ram_rwdata_start
00011efc g       *ABS*	00000000 __ram_rodata_start
00011bec g     F .text	00000088 alt_busy_sleep
00011b3c g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
00011ecc g     F .text	00000030 memcmp
000127ac g       *ABS*	00000000 __alt_stack_base
000104c0 g     F .text	00000010 getBinaryLetter
00011c80 g     F .text	0000006c alt_dev_llist_insert
000125ac g     O .bss	00000100 enteredText
0001168c g     F .text	000000b8 __sfvwrite_small_dev
00012300 g       *ABS*	00000000 __bss_start
00010f44 g     F .text	00000020 memset
00010c2c g     F .text	00000164 main
00012330 g     O .bss	00000004 alt_envp
00012134 g     O .rwdata	00000004 uart_0
00012150 g     O .rwdata	00000004 alt_errno
00010d90 g     F .text	00000084 .hidden __divsi3
00010484 g     F .text	00000008 updateTimer
00011efc g       *ABS*	00000000 __flash_rodata_start
00012320 g     O .bss	00000004 admin_flag
00011a28 g     F .text	00000020 alt_irq_init
0001048c g     F .text	00000008 updateLocation
00011744 g     F .text	00000058 _write_r
00010630 g     F .text	00000030 led_response
0001212c g     O .rwdata	00000004 _impure_ptr
00012338 g     O .bss	00000004 alt_argc
00012324 g     O .bss	00000004 prevserverdata
00010020 g       .exceptions	00000000 alt_irq_entry
00012300 g     O .bss	00000001 pwm
00012148 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00011a8c g     F .text	00000008 alt_up_accelerometer_spi_open_dev
0001215c g       *ABS*	00000000 _edata
000127ac g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
00010e14 g     F .text	00000074 .hidden __modsi3
00011b94 g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010660 g     F .text	00000034 convert_read
0001000c g       .entry	00000000 _exit
00011aa8 g     F .text	00000020 alt_up_accelerometer_spi_read
00011ac8 g     F .text	0000001c alt_up_accelerometer_spi_write
00010494 g     F .text	0000002c getBin
000110bc g     F .text	0000001c strlen
00011d60 g     F .text	00000004 alt_icache_flush_all
00010334 g     F .text	00000150 updateText
00012130 g     O .rwdata	00000004 alt_priority_mask
00011670 g     F .text	0000001c __vfprintf_internal
00012154 g     O .rwdata	00000008 alt_alarm_list
00011858 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1010c:	04000074 	movhi	r16,1
   10110:	8409ab04 	addi	r16,r16,9900

  active = alt_irq_pending ();

  do
  {
    i = 0;
   10114:	000b883a 	mov	r5,zero
    mask = 1;
   10118:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	1888703a 	and	r4,r3,r2
   10120:	20000b26 	beq	r4,zero,10150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   10124:	280490fa 	slli	r2,r5,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	183ff51e 	bne	r3,zero,10114 <__alt_data_end+0xffff0114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10150:	1085883a 	add	r2,r2,r2
      i++;
   10154:	29400044 	addi	r5,r5,1

    } while (1);
   10158:	003ff006 	br	1011c <__alt_data_end+0xffff011c>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a08a17 	ldw	r2,-32216(gp)
   10160:	10000426 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10164:	200b883a 	mov	r5,r4
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1018c:	d6a84714 	ori	gp,gp,41244
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	1088c014 	ori	r2,r2,8960

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18c9eb14 	ori	r3,r3,10156

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <__alt_data_end+0xffff01a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	00118580 	call	11858 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	00119380 	call	11938 <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <__alt_data_end+0xffff01b8>

000101bc <sys_timer_isr>:
}

////////////////////////////////////////////////

void sys_timer_isr() {
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   101bc:	008000b4 	movhi	r2,2
   101c0:	10840804 	addi	r2,r2,4128
   101c4:	10000035 	stwio	zero,0(r2)

    if (pwm < abs(level)) {
   101c8:	d0a07f17 	ldw	r2,-32260(gp)
   101cc:	d1607907 	ldb	r5,-32284(gp)
   101d0:	1009883a 	mov	r4,r2
   101d4:	1000010e 	bge	r2,zero,101dc <sys_timer_isr+0x20>
   101d8:	0089c83a 	sub	r4,zero,r2
   101dc:	00c000b4 	movhi	r3,2
   101e0:	18c43004 	addi	r3,r3,4288
   101e4:	2900080e 	bge	r5,r4,10208 <sys_timer_isr+0x4c>

        if (level < 0) {
   101e8:	1000040e 	bge	r2,zero,101fc <sys_timer_isr+0x40>
alt_8 pwm = 0;
alt_u8 led;
int level;

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   101ec:	d0a07e03 	ldbu	r2,-32264(gp)
   101f0:	1085883a 	add	r2,r2,r2
   101f4:	10803fcc 	andi	r2,r2,255
   101f8:	00000406 	br	1020c <sys_timer_isr+0x50>
   101fc:	d0a07e03 	ldbu	r2,-32264(gp)
   10200:	1004d07a 	srli	r2,r2,1
   10204:	00000106 	br	1020c <sys_timer_isr+0x50>
   10208:	d0a07e03 	ldbu	r2,-32264(gp)
   1020c:	18800035 	stwio	r2,0(r3)

    } else {
        led_write(led);
    }

    if (pwm > PWM_PERIOD) {
   10210:	d0a07903 	ldbu	r2,-32284(gp)
   10214:	01000404 	movi	r4,16
   10218:	10c03fcc 	andi	r3,r2,255
   1021c:	18c0201c 	xori	r3,r3,128
   10220:	18ffe004 	addi	r3,r3,-128
   10224:	20c0020e 	bge	r4,r3,10230 <sys_timer_isr+0x74>
        pwm = 0;
   10228:	d0207905 	stb	zero,-32284(gp)
   1022c:	f800283a 	ret
    } else {
        pwm++;
   10230:	10800044 	addi	r2,r2,1
   10234:	d0a07905 	stb	r2,-32284(gp)
   10238:	f800283a 	ret

0001023c <initializeDisplay>:
/////DISPLAY FUNCTIONS///////

//Does initial setup of display
void initializeDisplay(){
	//These controls determine what functions the display is executing:
	prevserverdata = 20;
   1023c:	00800504 	movi	r2,20
}

//Prints each of the letters out to the screen
void print(int let5, int let4, int let3, int let2, int let1, int let0){
	//Takes the binary value for each letter and places it on each of the six 7-segment displays
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, let5);
   10240:	00c000b4 	movhi	r3,2
/////DISPLAY FUNCTIONS///////

//Does initial setup of display
void initializeDisplay(){
	//These controls determine what functions the display is executing:
	prevserverdata = 20;
   10244:	d0a08215 	stw	r2,-32248(gp)
}

//Prints each of the letters out to the screen
void print(int let5, int let4, int let3, int let2, int let1, int let0){
	//Takes the binary value for each letter and places it on each of the six 7-segment displays
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, let5);
   10248:	18c41004 	addi	r3,r3,4160
   1024c:	00801fc4 	movi	r2,127
   10250:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, let4);
   10254:	00c000b4 	movhi	r3,2
   10258:	18c41404 	addi	r3,r3,4176
   1025c:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, let3);
   10260:	00c000b4 	movhi	r3,2
   10264:	18c41804 	addi	r3,r3,4192
   10268:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, let2);
   1026c:	00c000b4 	movhi	r3,2
   10270:	18c41c04 	addi	r3,r3,4208
   10274:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, let1);
   10278:	00c000b4 	movhi	r3,2
   1027c:	18c42004 	addi	r3,r3,4224
   10280:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, let0);
   10284:	00c000b4 	movhi	r3,2
   10288:	18c42404 	addi	r3,r3,4240
   1028c:	18800035 	stwio	r2,0(r3)
   10290:	f800283a 	ret

00010294 <getActualText>:

int getActualText(){
	int idx = 0;	//We need two indicies because the entered and actual text sequences need not be aligned
	char currentLetter; //Keeps track of the character we are wanting to add
	//Go through each letter in the entered text
	for (int i = 0; i <= length; i++){
   10294:	d2607b17 	ldw	r9,-32276(gp)
		currentLetter = enteredText[i];
   10298:	02800074 	movhi	r10,1
   1029c:	01400074 	movhi	r5,1

int getActualText(){
	int idx = 0;	//We need two indicies because the entered and actual text sequences need not be aligned
	char currentLetter; //Keeps track of the character we are wanting to add
	//Go through each letter in the entered text
	for (int i = 0; i <= length; i++){
   102a0:	0009883a 	mov	r4,zero
		}
	return &enteredText[0];
}

int getActualText(){
	int idx = 0;	//We need two indicies because the entered and actual text sequences need not be aligned
   102a4:	0005883a 	mov	r2,zero
	char currentLetter; //Keeps track of the character we are wanting to add
	//Go through each letter in the entered text
	for (int i = 0; i <= length; i++){
		currentLetter = enteredText[i];
   102a8:	52896b04 	addi	r10,r10,9644
		if (currentLetter > 96){
   102ac:	02c01804 	movi	r11,96
			//Gets only the uppercase letter
			currentLetter -= 32;
		}
		switch(currentLetter){
   102b0:	03001344 	movi	r12,77
   102b4:	2948d204 	addi	r5,r5,9032
		case 'M':
			//We build the letter "M" from two "n's," so we need to change the index twice in the actual text
			text[idx] = 'N';
   102b8:	01801384 	movi	r6,78
		currentLetter = enteredText[i];
		if (currentLetter > 96){
			//Gets only the uppercase letter
			currentLetter -= 32;
		}
		switch(currentLetter){
   102bc:	034015c4 	movi	r13,87
			text[idx + 1] = 'N';
			idx += 2;
			break;
		case 'W':
			//We build the letter "W" from two "v's," so we need to change the index twice in the actual text
			text[idx] = 'V';
   102c0:	01c01584 	movi	r7,86

int getActualText(){
	int idx = 0;	//We need two indicies because the entered and actual text sequences need not be aligned
	char currentLetter; //Keeps track of the character we are wanting to add
	//Go through each letter in the entered text
	for (int i = 0; i <= length; i++){
   102c4:	49001a16 	blt	r9,r4,10330 <getActualText+0x9c>
		currentLetter = enteredText[i];
   102c8:	2287883a 	add	r3,r4,r10
   102cc:	18c00003 	ldbu	r3,0(r3)
		if (currentLetter > 96){
   102d0:	1a003fcc 	andi	r8,r3,255
   102d4:	4200201c 	xori	r8,r8,128
   102d8:	423fe004 	addi	r8,r8,-128
   102dc:	5a00010e 	bge	r11,r8,102e4 <getActualText+0x50>
			//Gets only the uppercase letter
			currentLetter -= 32;
   102e0:	18fff804 	addi	r3,r3,-32
		}
		switch(currentLetter){
   102e4:	1a003fcc 	andi	r8,r3,255
   102e8:	4200201c 	xori	r8,r8,128
   102ec:	423fe004 	addi	r8,r8,-128
   102f0:	43000526 	beq	r8,r12,10308 <getActualText+0x74>
   102f4:	4340091e 	bne	r8,r13,1031c <getActualText+0x88>
			text[idx + 1] = 'N';
			idx += 2;
			break;
		case 'W':
			//We build the letter "W" from two "v's," so we need to change the index twice in the actual text
			text[idx] = 'V';
   102f8:	2887883a 	add	r3,r5,r2
   102fc:	19c00005 	stb	r7,0(r3)
			text[idx + 1] = 'V';
   10300:	19c00045 	stb	r7,1(r3)
   10304:	00000306 	br	10314 <getActualText+0x80>
			currentLetter -= 32;
		}
		switch(currentLetter){
		case 'M':
			//We build the letter "M" from two "n's," so we need to change the index twice in the actual text
			text[idx] = 'N';
   10308:	2887883a 	add	r3,r5,r2
   1030c:	19800005 	stb	r6,0(r3)
			text[idx + 1] = 'N';
   10310:	19800045 	stb	r6,1(r3)
			break;
		case 'W':
			//We build the letter "W" from two "v's," so we need to change the index twice in the actual text
			text[idx] = 'V';
			text[idx + 1] = 'V';
			idx += 2;
   10314:	10800084 	addi	r2,r2,2
			break;
   10318:	00000306 	br	10328 <getActualText+0x94>
		default:
			//Copy the new letter into the actual text
			text[idx] = currentLetter;
   1031c:	2891883a 	add	r8,r5,r2
   10320:	40c00005 	stb	r3,0(r8)
			idx++;
   10324:	10800044 	addi	r2,r2,1

int getActualText(){
	int idx = 0;	//We need two indicies because the entered and actual text sequences need not be aligned
	char currentLetter; //Keeps track of the character we are wanting to add
	//Go through each letter in the entered text
	for (int i = 0; i <= length; i++){
   10328:	21000044 	addi	r4,r4,1
   1032c:	003fe506 	br	102c4 <__alt_data_end+0xffff02c4>
			text[idx] = currentLetter;
			idx++;
		}
	}
	return idx;
}
   10330:	f800283a 	ret

00010334 <updateText>:
	prevserverdata = 20;
	//First Turn all six of the seven segment displays off
	print(getBin('!'), getBin('!'), getBin('!'), getBin('!'), getBin('!'), getBin('!'));
}

char updateText(int serverdata){ // in FPGA change this to if there is any new input
   10334:	defffd04 	addi	sp,sp,-12
   10338:	dc000015 	stw	r16,0(sp)
   1033c:	dfc00215 	stw	ra,8(sp)
   10340:	04000074 	movhi	r16,1
   10344:	dc400115 	stw	r17,4(sp)

	if (serverdata == 2){ // 2 is the code when "your turn" is sent by the server
   10348:	00800084 	movi	r2,2
   1034c:	84096b04 	addi	r16,r16,9644
   10350:	2080141e 	bne	r4,r2,103a4 <updateText+0x70>
		static_flag = 0; //play scrolls through
		admin_flag = 0;
		enteredText[0] = 'p';
   10354:	00801c04 	movi	r2,112
}

char updateText(int serverdata){ // in FPGA change this to if there is any new input

	if (serverdata == 2){ // 2 is the code when "your turn" is sent by the server
		static_flag = 0; //play scrolls through
   10358:	d0207c15 	stw	zero,-32272(gp)
		admin_flag = 0;
   1035c:	d0208115 	stw	zero,-32252(gp)
		enteredText[0] = 'p';
   10360:	80800005 	stb	r2,0(r16)
		length = getActualText();
   10364:	00102940 	call	10294 <getActualText>
   10368:	d0a07b15 	stw	r2,-32276(gp)
		enteredText[1] = 'l';
   1036c:	00801b04 	movi	r2,108
   10370:	80800045 	stb	r2,1(r16)
		length = getActualText();
   10374:	00102940 	call	10294 <getActualText>
   10378:	d0a07b15 	stw	r2,-32276(gp)
		enteredText[2] = 'a';
   1037c:	00801844 	movi	r2,97
   10380:	80800085 	stb	r2,2(r16)
		length = getActualText();
   10384:	00102940 	call	10294 <getActualText>
   10388:	d0a07b15 	stw	r2,-32276(gp)
		enteredText[3] = 'y';
   1038c:	00801e44 	movi	r2,121
   10390:	808000c5 	stb	r2,3(r16)
		length = getActualText();
   10394:	00102940 	call	10294 <getActualText>
   10398:	d0a07b15 	stw	r2,-32276(gp)
		enteredText[4] = ' ';
   1039c:	04400804 	movi	r17,32
   103a0:	00002c06 	br	10454 <updateText+0x120>
		length = getActualText();
		enteredText[5] = ' ';
		length = getActualText();
	}
	else if(serverdata == 1){ //if the server isn't telling fpga to play and fpga is the admin, show word "ADMIN"
   103a4:	00800044 	movi	r2,1
   103a8:	2080191e 	bne	r4,r2,10410 <updateText+0xdc>
		static_flag = 1; //admin is shown statically
		admin_flag = 1;
		enteredText[0] = 'a';
   103ac:	00801844 	movi	r2,97
		length = getActualText();
		enteredText[5] = ' ';
		length = getActualText();
	}
	else if(serverdata == 1){ //if the server isn't telling fpga to play and fpga is the admin, show word "ADMIN"
		static_flag = 1; //admin is shown statically
   103b0:	d1207c15 	stw	r4,-32272(gp)
		admin_flag = 1;
   103b4:	d1208115 	stw	r4,-32252(gp)
		enteredText[0] = 'a';
   103b8:	80800005 	stb	r2,0(r16)
		length = getActualText();
   103bc:	00102940 	call	10294 <getActualText>
   103c0:	d0a07b15 	stw	r2,-32276(gp)
		enteredText[1] = 'd';
   103c4:	00801904 	movi	r2,100
   103c8:	80800045 	stb	r2,1(r16)
		length = getActualText();
   103cc:	00102940 	call	10294 <getActualText>
   103d0:	d0a07b15 	stw	r2,-32276(gp)
		enteredText[2] = 'm';
   103d4:	00801b44 	movi	r2,109
   103d8:	80800085 	stb	r2,2(r16)
		length = getActualText();
   103dc:	00102940 	call	10294 <getActualText>
   103e0:	d0a07b15 	stw	r2,-32276(gp)
		enteredText[3] = 'i';
   103e4:	00801a44 	movi	r2,105
   103e8:	808000c5 	stb	r2,3(r16)
		length = getActualText();
   103ec:	00102940 	call	10294 <getActualText>
   103f0:	d0a07b15 	stw	r2,-32276(gp)
		enteredText[4] = 'n';
   103f4:	00801b84 	movi	r2,110
   103f8:	80800105 	stb	r2,4(r16)
		length = getActualText();
   103fc:	00102940 	call	10294 <getActualText>
   10400:	d0a07b15 	stw	r2,-32276(gp)
		enteredText[5] = ' ';
   10404:	00800804 	movi	r2,32
   10408:	80800145 	stb	r2,5(r16)
   1040c:	00001506 	br	10464 <updateText+0x130>
	}
	else{ //when leds don't show play, if player is not admin, show player number
		//alt_putstr("here :) \n"); for testing
		static_flag = 0;
		admin_flag = 0;
		enteredText[0] = 'p';
   10410:	00801c04 	movi	r2,112
		enteredText[5] = ' ';
		length = getActualText();
	}
	else{ //when leds don't show play, if player is not admin, show player number
		//alt_putstr("here :) \n"); for testing
		static_flag = 0;
   10414:	d0207c15 	stw	zero,-32272(gp)
		admin_flag = 0;
   10418:	d0208115 	stw	zero,-32252(gp)
		enteredText[0] = 'p';
   1041c:	80800005 	stb	r2,0(r16)
		length = getActualText();
   10420:	00102940 	call	10294 <getActualText>
   10424:	d0a07b15 	stw	r2,-32276(gp)
		enteredText[1] = '2';
   10428:	00800c84 	movi	r2,50
		length = getActualText();
		enteredText[2] = ' ';
   1042c:	04400804 	movi	r17,32
		//alt_putstr("here :) \n"); for testing
		static_flag = 0;
		admin_flag = 0;
		enteredText[0] = 'p';
		length = getActualText();
		enteredText[1] = '2';
   10430:	80800045 	stb	r2,1(r16)
		length = getActualText();
   10434:	00102940 	call	10294 <getActualText>
   10438:	d0a07b15 	stw	r2,-32276(gp)
		enteredText[2] = ' ';
   1043c:	84400085 	stb	r17,2(r16)
		length = getActualText();
   10440:	00102940 	call	10294 <getActualText>
   10444:	d0a07b15 	stw	r2,-32276(gp)
		enteredText[3] = ' ';
   10448:	844000c5 	stb	r17,3(r16)
		length = getActualText();
   1044c:	00102940 	call	10294 <getActualText>
   10450:	d0a07b15 	stw	r2,-32276(gp)
		enteredText[4] = ' ';
   10454:	84400105 	stb	r17,4(r16)
		length = getActualText();
   10458:	00102940 	call	10294 <getActualText>
   1045c:	d0a07b15 	stw	r2,-32276(gp)
		enteredText[5] = ' ';
   10460:	84400145 	stb	r17,5(r16)
		length = getActualText();
   10464:	00102940 	call	10294 <getActualText>
   10468:	d0a07b15 	stw	r2,-32276(gp)
		}
	return &enteredText[0];
}
   1046c:	8005883a 	mov	r2,r16
   10470:	dfc00217 	ldw	ra,8(sp)
   10474:	dc400117 	ldw	r17,4(sp)
   10478:	dc000017 	ldw	r16,0(sp)
   1047c:	dec00304 	addi	sp,sp,12
   10480:	f800283a 	ret

00010484 <updateTimer>:


//This function updates the timer based on whether the user has toggled a speedup or slowdown
int updateTimer(int tmr){
		return tmr;
}
   10484:	2005883a 	mov	r2,r4
   10488:	f800283a 	ret

0001048c <updateLocation>:

//This function returns a new Location based on the previous one.
int updateLocation(int loc, int len){
	loc++;   //Move the display forwards if the backwards button is NOT toggled (KEY2)
	return loc;
}
   1048c:	20800044 	addi	r2,r4,1
   10490:	f800283a 	ret

00010494 <getBin>:

//Gets the binary representation of the character
int getBin(char letter){
   10494:	213ff404 	addi	r4,r4,-48
   10498:	21003fcc 	andi	r4,r4,255
   1049c:	00800a84 	movi	r2,42
   104a0:	11000536 	bltu	r2,r4,104b8 <getBin+0x24>
   104a4:	00800074 	movhi	r2,1
   104a8:	1087df84 	addi	r2,r2,8062
   104ac:	1109883a 	add	r4,r2,r4
   104b0:	20800007 	ldb	r2,0(r4)
   104b4:	f800283a 	ret
	/*Based on the character entered, we convert to binary so the 7-segment knows which lights to turn on.
	The 7-segment has inverted logic so a 0 means the light is on and a 1 means the light is off.
	The rightmost bit starts the index at HEX#[0], and the leftmost bit is HEX#[6], the pattern
	for the 7-segment is shown in the DE0_C5 User Manual*/
	switch(letter){
   104b8:	00801fc4 	movi	r2,127
	case 'Z':
		return 0b0100100;
	default:
		return 0b1111111;
	}
}
   104bc:	f800283a 	ret

000104c0 <getBinaryLetter>:

//Returns the letter or the upsideDown version of the letter
int getBinaryLetter(char letter){
	int let = getBin(letter);
   104c0:	21003fcc 	andi	r4,r4,255
   104c4:	2100201c 	xori	r4,r4,128
   104c8:	213fe004 	addi	r4,r4,-128
   104cc:	00104941 	jmpi	10494 <getBin>

000104d0 <print>:
}

//Prints each of the letters out to the screen
void print(int let5, int let4, int let3, int let2, int let1, int let0){
	//Takes the binary value for each letter and places it on each of the six 7-segment displays
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, let5);
   104d0:	008000b4 	movhi	r2,2
   104d4:	10841004 	addi	r2,r2,4160
   104d8:	11000035 	stwio	r4,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, let4);
   104dc:	008000b4 	movhi	r2,2
   104e0:	10841404 	addi	r2,r2,4176
   104e4:	11400035 	stwio	r5,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, let3);
   104e8:	008000b4 	movhi	r2,2
   104ec:	10841804 	addi	r2,r2,4192
   104f0:	11800035 	stwio	r6,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, let2);
   104f4:	008000b4 	movhi	r2,2
   104f8:	10841c04 	addi	r2,r2,4208
   104fc:	11c00035 	stwio	r7,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, let1);
   10500:	d8c00017 	ldw	r3,0(sp)
   10504:	008000b4 	movhi	r2,2
   10508:	10842004 	addi	r2,r2,4224
   1050c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, let0);
   10510:	d8c00117 	ldw	r3,4(sp)
   10514:	008000b4 	movhi	r2,2
   10518:	10842404 	addi	r2,r2,4240
   1051c:	10c00035 	stwio	r3,0(r2)
   10520:	f800283a 	ret

00010524 <print_letters>:
	}
}

//Returns the letter or the upsideDown version of the letter
int getBinaryLetter(char letter){
	int let = getBin(letter);
   10524:	21003fcc 	andi	r4,r4,255
   10528:	2100201c 	xori	r4,r4,128
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, let1);
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, let0);
	return;
}
//Prints each of the letters out to the screen; takes into account the dancing letters
void print_letters(char let5, char let4, char let3, char let2, char let1, char let0){
   1052c:	defffa04 	addi	sp,sp,-24
	}
}

//Returns the letter or the upsideDown version of the letter
int getBinaryLetter(char letter){
	int let = getBin(letter);
   10530:	213fe004 	addi	r4,r4,-128
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, let1);
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, let0);
	return;
}
//Prints each of the letters out to the screen; takes into account the dancing letters
void print_letters(char let5, char let4, char let3, char let2, char let1, char let0){
   10534:	dd000415 	stw	r20,16(sp)
   10538:	dcc00315 	stw	r19,12(sp)
   1053c:	dc800215 	stw	r18,8(sp)
   10540:	dc400115 	stw	r17,4(sp)
   10544:	dc000015 	stw	r16,0(sp)
   10548:	dfc00515 	stw	ra,20(sp)
   1054c:	2829883a 	mov	r20,r5
   10550:	3027883a 	mov	r19,r6
   10554:	3825883a 	mov	r18,r7
   10558:	dc400617 	ldw	r17,24(sp)
	}
}

//Returns the letter or the upsideDown version of the letter
int getBinaryLetter(char letter){
	int let = getBin(letter);
   1055c:	00104940 	call	10494 <getBin>
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, let1);
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, let0);
	return;
}
//Prints each of the letters out to the screen; takes into account the dancing letters
void print_letters(char let5, char let4, char let3, char let2, char let1, char let0){
   10560:	dc000717 	ldw	r16,28(sp)

	//This is the "main" case, where the full letters are displayed on the display
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, getBinaryLetter(let5));
   10564:	00c000b4 	movhi	r3,2
   10568:	18c41004 	addi	r3,r3,4160
   1056c:	18800035 	stwio	r2,0(r3)
	}
}

//Returns the letter or the upsideDown version of the letter
int getBinaryLetter(char letter){
	int let = getBin(letter);
   10570:	a1003fcc 	andi	r4,r20,255
   10574:	2100201c 	xori	r4,r4,128
   10578:	213fe004 	addi	r4,r4,-128
   1057c:	00104940 	call	10494 <getBin>
//Prints each of the letters out to the screen; takes into account the dancing letters
void print_letters(char let5, char let4, char let3, char let2, char let1, char let0){

	//This is the "main" case, where the full letters are displayed on the display
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, getBinaryLetter(let5));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, getBinaryLetter(let4));
   10580:	00c000b4 	movhi	r3,2
   10584:	18c41404 	addi	r3,r3,4176
   10588:	18800035 	stwio	r2,0(r3)
	}
}

//Returns the letter or the upsideDown version of the letter
int getBinaryLetter(char letter){
	int let = getBin(letter);
   1058c:	99003fcc 	andi	r4,r19,255
   10590:	2100201c 	xori	r4,r4,128
   10594:	213fe004 	addi	r4,r4,-128
   10598:	00104940 	call	10494 <getBin>
void print_letters(char let5, char let4, char let3, char let2, char let1, char let0){

	//This is the "main" case, where the full letters are displayed on the display
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, getBinaryLetter(let5));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, getBinaryLetter(let4));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, getBinaryLetter(let3));
   1059c:	00c000b4 	movhi	r3,2
   105a0:	18c41804 	addi	r3,r3,4192
   105a4:	18800035 	stwio	r2,0(r3)
	}
}

//Returns the letter or the upsideDown version of the letter
int getBinaryLetter(char letter){
	int let = getBin(letter);
   105a8:	91003fcc 	andi	r4,r18,255
   105ac:	2100201c 	xori	r4,r4,128
   105b0:	213fe004 	addi	r4,r4,-128
   105b4:	00104940 	call	10494 <getBin>

	//This is the "main" case, where the full letters are displayed on the display
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, getBinaryLetter(let5));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, getBinaryLetter(let4));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, getBinaryLetter(let3));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, getBinaryLetter(let2));
   105b8:	00c000b4 	movhi	r3,2
   105bc:	18c41c04 	addi	r3,r3,4208
   105c0:	18800035 	stwio	r2,0(r3)
	}
}

//Returns the letter or the upsideDown version of the letter
int getBinaryLetter(char letter){
	int let = getBin(letter);
   105c4:	89003fcc 	andi	r4,r17,255
   105c8:	2100201c 	xori	r4,r4,128
   105cc:	213fe004 	addi	r4,r4,-128
   105d0:	00104940 	call	10494 <getBin>
	//This is the "main" case, where the full letters are displayed on the display
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, getBinaryLetter(let5));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, getBinaryLetter(let4));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, getBinaryLetter(let3));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, getBinaryLetter(let2));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, getBinaryLetter(let1));
   105d4:	00c000b4 	movhi	r3,2
   105d8:	18c42004 	addi	r3,r3,4224
   105dc:	18800035 	stwio	r2,0(r3)
	}
}

//Returns the letter or the upsideDown version of the letter
int getBinaryLetter(char letter){
	int let = getBin(letter);
   105e0:	81003fcc 	andi	r4,r16,255
   105e4:	2100201c 	xori	r4,r4,128
   105e8:	213fe004 	addi	r4,r4,-128
   105ec:	00104940 	call	10494 <getBin>
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, getBinaryLetter(let5));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, getBinaryLetter(let4));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, getBinaryLetter(let3));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, getBinaryLetter(let2));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, getBinaryLetter(let1));
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, getBinaryLetter(let0));
   105f0:	00c000b4 	movhi	r3,2
   105f4:	18c42404 	addi	r3,r3,4240
   105f8:	18800035 	stwio	r2,0(r3)

	return;

}
   105fc:	dfc00517 	ldw	ra,20(sp)
   10600:	dd000417 	ldw	r20,16(sp)
   10604:	dcc00317 	ldw	r19,12(sp)
   10608:	dc800217 	ldw	r18,8(sp)
   1060c:	dc400117 	ldw	r17,4(sp)
   10610:	dc000017 	ldw	r16,0(sp)
   10614:	dec00604 	addi	sp,sp,24
   10618:	f800283a 	ret

0001061c <led_write>:
alt_8 pwm = 0;
alt_u8 led;
int level;

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   1061c:	008000b4 	movhi	r2,2
   10620:	21003fcc 	andi	r4,r4,255
   10624:	10843004 	addi	r2,r2,4288
   10628:	11000035 	stwio	r4,0(r2)
   1062c:	f800283a 	ret

00010630 <led_response>:
}

void led_response(char check){
    if(check == 'y'){
   10630:	21003fcc 	andi	r4,r4,255
   10634:	2100201c 	xori	r4,r4,128
   10638:	008000b4 	movhi	r2,2
   1063c:	213fe004 	addi	r4,r4,-128
   10640:	00c01e44 	movi	r3,121
   10644:	10843004 	addi	r2,r2,4288
   10648:	20c0021e 	bne	r4,r3,10654 <led_response+0x24>
        IOWR(LED_BASE, 0, 256);
   1064c:	00c04004 	movi	r3,256
   10650:	00000106 	br	10658 <led_response+0x28>
    }else{
        IOWR(LED_BASE, 0, 16);
   10654:	00c00404 	movi	r3,16
   10658:	10c00035 	stwio	r3,0(r2)
   1065c:	f800283a 	ret

00010660 <convert_read>:
}



void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
   10660:	213ff804 	addi	r4,r4,-32
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   10664:	2005d1ba 	srai	r2,r4,6
    * level = (acc_read >> 1) & 0x1f;
   10668:	2009d07a 	srai	r4,r4,1


void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   1066c:	10c001cc 	andi	r3,r2,7
   10670:	00800204 	movi	r2,8
   10674:	10cfc83a 	sub	r7,r2,r3
   10678:	11ce983a 	sll	r7,r2,r7
   1067c:	10c5d83a 	sra	r2,r2,r3
    * level = (acc_read >> 1) & 0x1f;
   10680:	210007cc 	andi	r4,r4,31


void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   10684:	3884b03a 	or	r2,r7,r2
   10688:	30800005 	stb	r2,0(r6)
    * level = (acc_read >> 1) & 0x1f;
   1068c:	29000015 	stw	r4,0(r5)
   10690:	f800283a 	ret

00010694 <is_flat>:
///////////Accelerometer reading DIRECTIONS/////////

const int FLATLOW = {-60};
const int FLATHIGH = {60};

int is_flat(alt_32 reading){
   10694:	21000f04 	addi	r4,r4,60
   10698:	20801e70 	cmpltui	r2,r4,121
    if((reading < -60) || (reading > 60)){
        return 0;
    }else{
        return 1;
    }
}
   1069c:	f800283a 	ret

000106a0 <timer_init>:
        pwm++;
    }

}

void timer_init(void * isr) {
   106a0:	defffe04 	addi	sp,sp,-8
   106a4:	dc000015 	stw	r16,0(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   106a8:	040000b4 	movhi	r16,2
        pwm++;
    }

}

void timer_init(void * isr) {
   106ac:	dfc00115 	stw	ra,4(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   106b0:	84040904 	addi	r16,r16,4132
   106b4:	008000c4 	movi	r2,3
   106b8:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   106bc:	00c000b4 	movhi	r3,2
   106c0:	0005883a 	mov	r2,zero
   106c4:	18c40804 	addi	r3,r3,4128
   106c8:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
   106cc:	00c000b4 	movhi	r3,2
   106d0:	18c40a04 	addi	r3,r3,4136
   106d4:	01424004 	movi	r5,2304
   106d8:	19400035 	stwio	r5,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
   106dc:	00c000b4 	movhi	r3,2
   106e0:	18c40b04 	addi	r3,r3,4140
   106e4:	18800035 	stwio	r2,0(r3)
    alt_irq_register(TIMER_IRQ, 0, isr);
   106e8:	200d883a 	mov	r6,r4
   106ec:	000b883a 	mov	r5,zero
   106f0:	01000044 	movi	r4,1
   106f4:	00117c40 	call	117c4 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   106f8:	008001c4 	movi	r2,7
   106fc:	80800035 	stwio	r2,0(r16)

}
   10700:	dfc00117 	ldw	ra,4(sp)
   10704:	dc000017 	ldw	r16,0(sp)
   10708:	dec00204 	addi	sp,sp,8
   1070c:	f800283a 	ret

00010710 <start_game>:

		///%Accelerometer initialisations%///
	    alt_32 x_read;
	    alt_32 y_read;
	    alt_up_accelerometer_spi_dev * acc_dev;
	    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10710:	01000074 	movhi	r4,1


////////////////GAME FUNCTION//////////////


int start_game(){
   10714:	defff904 	addi	sp,sp,-28

		///%Accelerometer initialisations%///
	    alt_32 x_read;
	    alt_32 y_read;
	    alt_up_accelerometer_spi_dev * acc_dev;
	    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10718:	2107bf04 	addi	r4,r4,7932


////////////////GAME FUNCTION//////////////


int start_game(){
   1071c:	dfc00615 	stw	ra,24(sp)
   10720:	dcc00515 	stw	r19,20(sp)
   10724:	dc800415 	stw	r18,16(sp)
   10728:	dc400315 	stw	r17,12(sp)
   1072c:	dc000215 	stw	r16,8(sp)

		///%Accelerometer initialisations%///
	    alt_32 x_read;
	    alt_32 y_read;
	    alt_up_accelerometer_spi_dev * acc_dev;
	    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10730:	0011a8c0 	call	11a8c <alt_up_accelerometer_spi_open_dev>
	    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   10734:	1000021e 	bne	r2,zero,10740 <start_game+0x30>
	        return 1;
   10738:	00800044 	movi	r2,1
   1073c:	0000ac06 	br	109f0 <start_game+0x2e0>
	    }

	    ///%switches and buttons initialisation%///
	    timer_init(sys_timer_isr);
   10740:	01000074 	movhi	r4,1
   10744:	21006f04 	addi	r4,r4,444
   10748:	1023883a 	mov	r17,r2
   1074c:	00106a00 	call	106a0 <timer_init>
	    int button_datain;
	    int switch_datain;
	    int flicked_switch;

	    ///Switches code///
		switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   10750:	00c000b4 	movhi	r3,2
   10754:	18c42804 	addi	r3,r3,4256
   10758:	18800037 	ldwio	r2,0(r3)
		switch_datain &= (0b1111111111);
   1075c:	1080ffcc 	andi	r2,r2,1023

		if(switch_datain != 0){
   10760:	10001926 	beq	r2,zero,107c8 <start_game+0xb8>
			flicked_switch = switch_datain;
			while(switch_datain != 0){
				//printf("here \n");
				switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   10764:	19000037 	ldwio	r4,0(r3)
		switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
		switch_datain &= (0b1111111111);

		if(switch_datain != 0){
			flicked_switch = switch_datain;
			while(switch_datain != 0){
   10768:	2100ffcc 	andi	r4,r4,1023
   1076c:	203ffd1e 	bne	r4,zero,10764 <__alt_data_end+0xffff0764>
				//printf("here \n");
				switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
				switch_datain &= (0b1111111111);
			}

			if(flicked_switch == 1){
   10770:	00c00044 	movi	r3,1
   10774:	10c0031e 	bne	r2,r3,10784 <start_game+0x74>
				strcat(game_response,"1");
   10778:	01400074 	movhi	r5,1
   1077c:	2947c504 	addi	r5,r5,7956
   10780:	00000906 	br	107a8 <start_game+0x98>
				printf("\nResponse: %s\n", game_response);
			}
			else if(flicked_switch == 2){
   10784:	00c00084 	movi	r3,2
   10788:	10c0031e 	bne	r2,r3,10798 <start_game+0x88>
				strcat(game_response,"2");
   1078c:	01400074 	movhi	r5,1
   10790:	2947ca04 	addi	r5,r5,7976
   10794:	00000406 	br	107a8 <start_game+0x98>
				printf("\nResponse: %s\n", game_response);
			}
			else if(flicked_switch == 4){
   10798:	00c00104 	movi	r3,4
   1079c:	10c00a1e 	bne	r2,r3,107c8 <start_game+0xb8>
				strcat(game_response,"3");
   107a0:	01400074 	movhi	r5,1
   107a4:	2947cb04 	addi	r5,r5,7980
   107a8:	01000074 	movhi	r4,1
   107ac:	21095204 	addi	r4,r4,9544
   107b0:	00110800 	call	11080 <strcat>
				printf("\nResponse: %s\n", game_response);
   107b4:	01400074 	movhi	r5,1
   107b8:	01000074 	movhi	r4,1
   107bc:	29495204 	addi	r5,r5,9544
   107c0:	2107c604 	addi	r4,r4,7960
   107c4:	0010fa00 	call	10fa0 <printf>

		////////////////////////////
		////Accelerometer code//////

		clock_t exec_t1, exec_t2;
		exec_t1 = times(NULL);
   107c8:	0009883a 	mov	r4,zero
   107cc:	00119640 	call	11964 <times>

		alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   107d0:	d9400104 	addi	r5,sp,4
   107d4:	8809883a 	mov	r4,r17
   107d8:	0011ae40 	call	11ae4 <alt_up_accelerometer_spi_read_x_axis>
		alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
   107dc:	d80b883a 	mov	r5,sp
   107e0:	8809883a 	mov	r4,r17
   107e4:	0011b3c0 	call	11b3c <alt_up_accelerometer_spi_read_y_axis>
		// alt_up_accelerometer_spi_read_z_axis(acc_dev, & z_read);
		alt_32 FIR_out[2];
		FIR_out[0] = x_read;
   107e8:	d8800117 	ldw	r2,4(sp)
		//printf("FIR out x = %d \n", FIR_out[0]);
		//printf("FIR out y = %d \n", FIR_out[1]);
		//////////////////

		//Left & Right//
		if(FIR_out[0] < RIGHTLIM){
   107ec:	00ffdd04 	movi	r3,-140
		alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
		alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
		// alt_up_accelerometer_spi_read_z_axis(acc_dev, & z_read);
		alt_32 FIR_out[2];
		FIR_out[0] = x_read;
		FIR_out[1] = y_read;
   107f0:	dc000017 	ldw	r16,0(sp)
		//printf("FIR out x = %d \n", FIR_out[0]);
		//printf("FIR out y = %d \n", FIR_out[1]);
		//////////////////

		//Left & Right//
		if(FIR_out[0] < RIGHTLIM){
   107f4:	10c0080e 	bge	r2,r3,10818 <start_game+0x108>

const int FLATLOW = {-60};
const int FLATHIGH = {60};

int is_flat(alt_32 reading){
    if((reading < -60) || (reading > 60)){
   107f8:	04801e04 	movi	r18,120
   107fc:	10800f04 	addi	r2,r2,60
   10800:	90800f2e 	bgeu	r18,r2,10840 <start_game+0x130>
		//////////////////

		//Left & Right//
		if(FIR_out[0] < RIGHTLIM){
			while(is_flat(FIR_out[0]) == 0){
				alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   10804:	d9400104 	addi	r5,sp,4
   10808:	8809883a 	mov	r4,r17
   1080c:	0011ae40 	call	11ae4 <alt_up_accelerometer_spi_read_x_axis>
				FIR_out[0] = x_read;
   10810:	d8800117 	ldw	r2,4(sp)
   10814:	003ff906 	br	107fc <__alt_data_end+0xffff07fc>
			}
			strcat(game_response, "R");
			printf("\nResponse: %s\n", game_response);

		}else if(FIR_out[0] > LEFTLIM){
   10818:	00c02304 	movi	r3,140
   1081c:	1880120e 	bge	r3,r2,10868 <start_game+0x158>

const int FLATLOW = {-60};
const int FLATHIGH = {60};

int is_flat(alt_32 reading){
    if((reading < -60) || (reading > 60)){
   10820:	04801e04 	movi	r18,120
   10824:	10800f04 	addi	r2,r2,60
   10828:	90806b2e 	bgeu	r18,r2,109d8 <start_game+0x2c8>
			strcat(game_response, "R");
			printf("\nResponse: %s\n", game_response);

		}else if(FIR_out[0] > LEFTLIM){
			while(is_flat(FIR_out[0]) == 0){
				alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   1082c:	d9400104 	addi	r5,sp,4
   10830:	8809883a 	mov	r4,r17
   10834:	0011ae40 	call	11ae4 <alt_up_accelerometer_spi_read_x_axis>
				FIR_out[0] = x_read;
   10838:	d8800117 	ldw	r2,4(sp)
   1083c:	003ff906 	br	10824 <__alt_data_end+0xffff0824>
		if(FIR_out[0] < RIGHTLIM){
			while(is_flat(FIR_out[0]) == 0){
				alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
				FIR_out[0] = x_read;
			}
			strcat(game_response, "R");
   10840:	01400074 	movhi	r5,1
   10844:	2947d404 	addi	r5,r5,8016
		}else if(FIR_out[0] > LEFTLIM){
			while(is_flat(FIR_out[0]) == 0){
				alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
				FIR_out[0] = x_read;
			}
			strcat(game_response, "L");
   10848:	01000074 	movhi	r4,1
   1084c:	21095204 	addi	r4,r4,9544
   10850:	00110800 	call	11080 <strcat>
			printf("\nResponse: %s\n", game_response);
   10854:	01400074 	movhi	r5,1
   10858:	01000074 	movhi	r4,1
   1085c:	29495204 	addi	r5,r5,9544
   10860:	2107c604 	addi	r4,r4,7960
   10864:	0010fa00 	call	10fa0 <printf>
		}

		//Forward & Backward//
		if(FIR_out[1] < FORWARDLIM){
   10868:	00bfdf84 	movi	r2,-130
   1086c:	8080080e 	bge	r16,r2,10890 <start_game+0x180>

const int FLATLOW = {-60};
const int FLATHIGH = {60};

int is_flat(alt_32 reading){
    if((reading < -60) || (reading > 60)){
   10870:	04801e04 	movi	r18,120
   10874:	84000f04 	addi	r16,r16,60
   10878:	94000f2e 	bgeu	r18,r16,108b8 <start_game+0x1a8>
		}

		//Forward & Backward//
		if(FIR_out[1] < FORWARDLIM){
			while(is_flat(FIR_out[1]) == 0){
				alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
   1087c:	d80b883a 	mov	r5,sp
   10880:	8809883a 	mov	r4,r17
   10884:	0011b3c0 	call	11b3c <alt_up_accelerometer_spi_read_y_axis>
				FIR_out[1] = y_read;
   10888:	dc000017 	ldw	r16,0(sp)
   1088c:	003ff906 	br	10874 <__alt_data_end+0xffff0874>
			}
			strcat(game_response, "F");
			printf("\nResponse: %s\n", game_response);

		}else if(FIR_out[1] > BACKWARDLIM){
   10890:	00802084 	movi	r2,130
   10894:	1400120e 	bge	r2,r16,108e0 <start_game+0x1d0>

const int FLATLOW = {-60};
const int FLATHIGH = {60};

int is_flat(alt_32 reading){
    if((reading < -60) || (reading > 60)){
   10898:	04801e04 	movi	r18,120
   1089c:	84000f04 	addi	r16,r16,60
   108a0:	9400502e 	bgeu	r18,r16,109e4 <start_game+0x2d4>
			strcat(game_response, "F");
			printf("\nResponse: %s\n", game_response);

		}else if(FIR_out[1] > BACKWARDLIM){
			while(is_flat(FIR_out[1]) == 0){
				alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
   108a4:	d80b883a 	mov	r5,sp
   108a8:	8809883a 	mov	r4,r17
   108ac:	0011b3c0 	call	11b3c <alt_up_accelerometer_spi_read_y_axis>
				FIR_out[1] = y_read;
   108b0:	dc000017 	ldw	r16,0(sp)
   108b4:	003ff906 	br	1089c <__alt_data_end+0xffff089c>
		if(FIR_out[1] < FORWARDLIM){
			while(is_flat(FIR_out[1]) == 0){
				alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
				FIR_out[1] = y_read;
			}
			strcat(game_response, "F");
   108b8:	01400074 	movhi	r5,1
   108bc:	2947d604 	addi	r5,r5,8024
		}else if(FIR_out[1] > BACKWARDLIM){
			while(is_flat(FIR_out[1]) == 0){
				alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
				FIR_out[1] = y_read;
			}
			strcat(game_response, "B");
   108c0:	01000074 	movhi	r4,1
   108c4:	21095204 	addi	r4,r4,9544
   108c8:	00110800 	call	11080 <strcat>
			printf("\nResponse: %s\n", game_response);
   108cc:	01400074 	movhi	r5,1
   108d0:	01000074 	movhi	r4,1
   108d4:	29495204 	addi	r5,r5,9544
   108d8:	2107c604 	addi	r4,r4,7960
   108dc:	0010fa00 	call	10fa0 <printf>
		}

		////////////////////////
		//////send button///////
		int pressed=0;
		button_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   108e0:	00c000b4 	movhi	r3,2
   108e4:	18c42c04 	addi	r3,r3,4272
   108e8:	18800037 	ldwio	r2,0(r3)
   108ec:	0084303a 	nor	r2,zero,r2
		if((button_datain &= 0b0000000001) && (pressed == 0)){
   108f0:	1080004c 	andi	r2,r2,1
   108f4:	1821883a 	mov	r16,r3
   108f8:	10001e26 	beq	r2,zero,10974 <start_game+0x264>
			pressed = 1;
			strcat(game_response, "\n");
   108fc:	01400074 	movhi	r5,1
   10900:	01000074 	movhi	r4,1
   10904:	2947df04 	addi	r5,r5,8060
   10908:	21095204 	addi	r4,r4,9544
			int i = 0;
			while (game_response[i] != '\0'){
   1090c:	04800074 	movhi	r18,1
				IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, game_response[i]);
   10910:	04c000b4 	movhi	r19,2
		//////send button///////
		int pressed=0;
		button_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
		if((button_datain &= 0b0000000001) && (pressed == 0)){
			pressed = 1;
			strcat(game_response, "\n");
   10914:	00110800 	call	11080 <strcat>
			int i = 0;
   10918:	0023883a 	mov	r17,zero
			while (game_response[i] != '\0'){
   1091c:	94895204 	addi	r18,r18,9544
				IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, game_response[i]);
   10920:	9cc40104 	addi	r19,r19,4100
		button_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
		if((button_datain &= 0b0000000001) && (pressed == 0)){
			pressed = 1;
			strcat(game_response, "\n");
			int i = 0;
			while (game_response[i] != '\0'){
   10924:	8c85883a 	add	r2,r17,r18
   10928:	10800007 	ldb	r2,0(r2)
   1092c:	10000526 	beq	r2,zero,10944 <start_game+0x234>
				IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, game_response[i]);
   10930:	98800035 	stwio	r2,0(r19)
				i++;
				usleep(10000) ;
   10934:	0109c404 	movi	r4,10000
			pressed = 1;
			strcat(game_response, "\n");
			int i = 0;
			while (game_response[i] != '\0'){
				IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, game_response[i]);
				i++;
   10938:	8c400044 	addi	r17,r17,1
				usleep(10000) ;
   1093c:	00119c40 	call	119c4 <usleep>
   10940:	003ff806 	br	10924 <__alt_data_end+0xffff0924>
			}
			printf("\nSending: %s\n", game_response);
   10944:	01400074 	movhi	r5,1
   10948:	01000074 	movhi	r4,1
   1094c:	29495204 	addi	r5,r5,9544
   10950:	2107cc04 	addi	r4,r4,7984
   10954:	0010fa00 	call	10fa0 <printf>
			memset(game_response,0,100);
   10958:	01000074 	movhi	r4,1
   1095c:	01801904 	movi	r6,100
   10960:	000b883a 	mov	r5,zero
   10964:	21095204 	addi	r4,r4,9544
   10968:	0010f440 	call	10f44 <memset>
		////////////////////////
		//////send button///////
		int pressed=0;
		button_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
		if((button_datain &= 0b0000000001) && (pressed == 0)){
			pressed = 1;
   1096c:	00c00044 	movi	r3,1
   10970:	00000106 	br	10978 <start_game+0x268>
			printf("\nResponse: %s\n", game_response);
		}

		////////////////////////
		//////send button///////
		int pressed=0;
   10974:	0007883a 	mov	r3,zero
			}
			printf("\nSending: %s\n", game_response);
			memset(game_response,0,100);
		}
		//reset button
		button_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   10978:	80800037 	ldwio	r2,0(r16)
   1097c:	0084303a 	nor	r2,zero,r2
		if((button_datain &= 0b0000000010) && (pressed==0)){
   10980:	1080008c 	andi	r2,r2,2
   10984:	10000d26 	beq	r2,zero,109bc <start_game+0x2ac>
   10988:	18000c1e 	bne	r3,zero,109bc <start_game+0x2ac>
			pressed = 1;
			//reset response
			memset(game_response,0,strlen(game_response));
   1098c:	01000074 	movhi	r4,1
   10990:	21095204 	addi	r4,r4,9544
   10994:	00110bc0 	call	110bc <strlen>
   10998:	01000074 	movhi	r4,1
   1099c:	100d883a 	mov	r6,r2
   109a0:	000b883a 	mov	r5,zero
   109a4:	21095204 	addi	r4,r4,9544
   109a8:	0010f440 	call	10f44 <memset>
			printf("Resetting...\n");
   109ac:	01000074 	movhi	r4,1
   109b0:	2107d004 	addi	r4,r4,8000
   109b4:	001106c0 	call	1106c <puts>
   109b8:	00000206 	br	109c4 <start_game+0x2b4>
		}
		else {
			usleep(50000);
   109bc:	0130d414 	movui	r4,50000
   109c0:	00119c40 	call	119c4 <usleep>
		}

		//printf("<-> %c <->", response[100]);
		convert_read(x_read, & level, & led);
   109c4:	d9000117 	ldw	r4,4(sp)
   109c8:	d1a07e04 	addi	r6,gp,-32264
   109cc:	d1607f04 	addi	r5,gp,-32260
   109d0:	00106600 	call	10660 <convert_read>

}
   109d4:	00000606 	br	109f0 <start_game+0x2e0>
		}else if(FIR_out[0] > LEFTLIM){
			while(is_flat(FIR_out[0]) == 0){
				alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
				FIR_out[0] = x_read;
			}
			strcat(game_response, "L");
   109d8:	01400074 	movhi	r5,1
   109dc:	2947d504 	addi	r5,r5,8020
   109e0:	003f9906 	br	10848 <__alt_data_end+0xffff0848>
		}else if(FIR_out[1] > BACKWARDLIM){
			while(is_flat(FIR_out[1]) == 0){
				alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
				FIR_out[1] = y_read;
			}
			strcat(game_response, "B");
   109e4:	01400074 	movhi	r5,1
   109e8:	2947d704 	addi	r5,r5,8028
   109ec:	003fb406 	br	108c0 <__alt_data_end+0xffff08c0>
		}

		//printf("<-> %c <->", response[100]);
		convert_read(x_read, & level, & led);

}
   109f0:	dfc00617 	ldw	ra,24(sp)
   109f4:	dcc00517 	ldw	r19,20(sp)
   109f8:	dc800417 	ldw	r18,16(sp)
   109fc:	dc400317 	ldw	r17,12(sp)
   10a00:	dc000217 	ldw	r16,8(sp)
   10a04:	dec00704 	addi	sp,sp,28
   10a08:	f800283a 	ret

00010a0c <admin_actions>:
int admin_actions(){
	///%Accelerometer initialisations%///
	alt_32 x_read;
	alt_32 y_read;
	alt_up_accelerometer_spi_dev * acc_dev;
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10a0c:	01000074 	movhi	r4,1
		//printf("<-> %c <->", response[100]);
		convert_read(x_read, & level, & led);

}

int admin_actions(){
   10a10:	defff904 	addi	sp,sp,-28
	///%Accelerometer initialisations%///
	alt_32 x_read;
	alt_32 y_read;
	alt_up_accelerometer_spi_dev * acc_dev;
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10a14:	2107bf04 	addi	r4,r4,7932
		//printf("<-> %c <->", response[100]);
		convert_read(x_read, & level, & led);

}

int admin_actions(){
   10a18:	dfc00615 	stw	ra,24(sp)
   10a1c:	dcc00515 	stw	r19,20(sp)
   10a20:	dc800415 	stw	r18,16(sp)
   10a24:	dc400315 	stw	r17,12(sp)
   10a28:	dc000215 	stw	r16,8(sp)
	///%Accelerometer initialisations%///
	alt_32 x_read;
	alt_32 y_read;
	alt_up_accelerometer_spi_dev * acc_dev;
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10a2c:	0011a8c0 	call	11a8c <alt_up_accelerometer_spi_open_dev>
	if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   10a30:	1000021e 	bne	r2,zero,10a3c <admin_actions+0x30>
		return 1;
   10a34:	00800044 	movi	r2,1
   10a38:	00007506 	br	10c10 <admin_actions+0x204>
	}

	///%switches and buttons initialisation%///
	timer_init(sys_timer_isr);
   10a3c:	01000074 	movhi	r4,1
   10a40:	21006f04 	addi	r4,r4,444
   10a44:	1021883a 	mov	r16,r2
   10a48:	00106a00 	call	106a0 <timer_init>
	int button_datain;


	//Setting up accelerometer;
	clock_t exec_t1, exec_t2;
	exec_t1 = times(NULL);
   10a4c:	0009883a 	mov	r4,zero
   10a50:	00119640 	call	11964 <times>

	alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   10a54:	d9400104 	addi	r5,sp,4
   10a58:	8009883a 	mov	r4,r16
   10a5c:	0011ae40 	call	11ae4 <alt_up_accelerometer_spi_read_x_axis>
	alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
   10a60:	d80b883a 	mov	r5,sp
   10a64:	8009883a 	mov	r4,r16
   10a68:	0011b3c0 	call	11b3c <alt_up_accelerometer_spi_read_y_axis>
	// alt_up_accelerometer_spi_read_z_axis(acc_dev, & z_read);
	alt_32 FIR_out[2];
	FIR_out[0] = x_read;
   10a6c:	d8800117 	ldw	r2,4(sp)
	FIR_out[1] = y_read;

	//Left & Right//
	button_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   10a70:	00c000b4 	movhi	r3,2
   10a74:	18c42c04 	addi	r3,r3,4272
   10a78:	19000037 	ldwio	r4,0(r3)
   10a7c:	1823883a 	mov	r17,r3
	if(FIR_out[0] < RIGHTLIM){
   10a80:	00ffdd04 	movi	r3,-140
   10a84:	10c0130e 	bge	r2,r3,10ad4 <admin_actions+0xc8>

const int FLATLOW = {-60};
const int FLATHIGH = {60};

int is_flat(alt_32 reading){
    if((reading < -60) || (reading > 60)){
   10a88:	04801e04 	movi	r18,120
   10a8c:	10800f04 	addi	r2,r2,60
   10a90:	90804a36 	bltu	r18,r2,10bbc <admin_actions+0x1b0>
	if(FIR_out[0] < RIGHTLIM){
		while(is_flat(FIR_out[0]) == 0){
			alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
			FIR_out[0] = x_read;
		}
		strcat(admin_response, "R\n");
   10a94:	01400074 	movhi	r5,1
   10a98:	2947d904 	addi	r5,r5,8036
   10a9c:	d1208004 	addi	r4,gp,-32256
		int i = 0;
		while (admin_response[i] != '\0'){
			IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, admin_response[i]);
   10aa0:	048000b4 	movhi	r18,2
	if(FIR_out[0] < RIGHTLIM){
		while(is_flat(FIR_out[0]) == 0){
			alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
			FIR_out[0] = x_read;
		}
		strcat(admin_response, "R\n");
   10aa4:	00110800 	call	11080 <strcat>
		int i = 0;
   10aa8:	0021883a 	mov	r16,zero
		while (admin_response[i] != '\0'){
   10aac:	d4e08004 	addi	r19,gp,-32256
			IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, admin_response[i]);
   10ab0:	94840104 	addi	r18,r18,4100
			alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
			FIR_out[0] = x_read;
		}
		strcat(admin_response, "R\n");
		int i = 0;
		while (admin_response[i] != '\0'){
   10ab4:	84c5883a 	add	r2,r16,r19
   10ab8:	10800007 	ldb	r2,0(r2)
   10abc:	10000f26 	beq	r2,zero,10afc <admin_actions+0xf0>
			IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, admin_response[i]);
   10ac0:	90800035 	stwio	r2,0(r18)
			usleep(10000) ;
   10ac4:	0109c404 	movi	r4,10000
   10ac8:	00119c40 	call	119c4 <usleep>
			i++;
   10acc:	84000044 	addi	r16,r16,1
   10ad0:	003ff806 	br	10ab4 <__alt_data_end+0xffff0ab4>
		}
		printf("\nResponse: %s\n", admin_response);
		memset(admin_response,0,strlen(admin_response));
	}
	else if(FIR_out[0] > LEFTLIM){
   10ad4:	00c02304 	movi	r3,140
   10ad8:	1880120e 	bge	r3,r2,10b24 <admin_actions+0x118>

const int FLATLOW = {-60};
const int FLATHIGH = {60};

int is_flat(alt_32 reading){
    if((reading < -60) || (reading > 60)){
   10adc:	04801e04 	movi	r18,120
   10ae0:	10800f04 	addi	r2,r2,60
   10ae4:	90803a2e 	bgeu	r18,r2,10bd0 <admin_actions+0x1c4>
		printf("\nResponse: %s\n", admin_response);
		memset(admin_response,0,strlen(admin_response));
	}
	else if(FIR_out[0] > LEFTLIM){
		while(is_flat(FIR_out[0]) == 0){
			alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   10ae8:	d9400104 	addi	r5,sp,4
   10aec:	8009883a 	mov	r4,r16
   10af0:	0011ae40 	call	11ae4 <alt_up_accelerometer_spi_read_x_axis>
			FIR_out[0] = x_read;
   10af4:	d8800117 	ldw	r2,4(sp)
   10af8:	003ff906 	br	10ae0 <__alt_data_end+0xffff0ae0>
		while (admin_response[i] != '\0'){
			IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, admin_response[i]);
			usleep(10000) ;
			i++;
		}
		printf("\nResponse: %s\n", admin_response);
   10afc:	01000074 	movhi	r4,1
   10b00:	d1608004 	addi	r5,gp,-32256
   10b04:	2107c604 	addi	r4,r4,7960
   10b08:	0010fa00 	call	10fa0 <printf>
		memset(admin_response,0,strlen(admin_response));
   10b0c:	d1208004 	addi	r4,gp,-32256
   10b10:	00110bc0 	call	110bc <strlen>
   10b14:	100d883a 	mov	r6,r2
   10b18:	000b883a 	mov	r5,zero
   10b1c:	d1208004 	addi	r4,gp,-32256
   10b20:	0010f440 	call	10f44 <memset>
	}

	////////////////////////
	//////send button///////
	button_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   10b24:	88800037 	ldwio	r2,0(r17)
   10b28:	0084303a 	nor	r2,zero,r2
	if((button_datain &= 0b0000000001)){
   10b2c:	1080004c 	andi	r2,r2,1
   10b30:	10001b26 	beq	r2,zero,10ba0 <admin_actions+0x194>
		strcat(admin_response, "S\n"); //1 means click to go into the game/leaderboard...
   10b34:	01400074 	movhi	r5,1
   10b38:	2947d804 	addi	r5,r5,8032
   10b3c:	d1208004 	addi	r4,gp,-32256
		int i = 0;
		while (admin_response[i] != '\0'){
			IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, admin_response[i]);
   10b40:	048000b4 	movhi	r18,2

	////////////////////////
	//////send button///////
	button_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
	if((button_datain &= 0b0000000001)){
		strcat(admin_response, "S\n"); //1 means click to go into the game/leaderboard...
   10b44:	00110800 	call	11080 <strcat>
		int i = 0;
   10b48:	0021883a 	mov	r16,zero
		while (admin_response[i] != '\0'){
   10b4c:	d4608004 	addi	r17,gp,-32256
			IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, admin_response[i]);
   10b50:	94840104 	addi	r18,r18,4100
	//////send button///////
	button_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
	if((button_datain &= 0b0000000001)){
		strcat(admin_response, "S\n"); //1 means click to go into the game/leaderboard...
		int i = 0;
		while (admin_response[i] != '\0'){
   10b54:	8445883a 	add	r2,r16,r17
   10b58:	10800007 	ldb	r2,0(r2)
   10b5c:	10000526 	beq	r2,zero,10b74 <admin_actions+0x168>
			IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, admin_response[i]);
   10b60:	90800035 	stwio	r2,0(r18)
			i++;
			usleep(10000) ;
   10b64:	0109c404 	movi	r4,10000
	if((button_datain &= 0b0000000001)){
		strcat(admin_response, "S\n"); //1 means click to go into the game/leaderboard...
		int i = 0;
		while (admin_response[i] != '\0'){
			IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, admin_response[i]);
			i++;
   10b68:	84000044 	addi	r16,r16,1
			usleep(10000) ;
   10b6c:	00119c40 	call	119c4 <usleep>
   10b70:	003ff806 	br	10b54 <__alt_data_end+0xffff0b54>
		}
		printf("\nSending: %s\n", admin_response);
   10b74:	01000074 	movhi	r4,1
   10b78:	d1608004 	addi	r5,gp,-32256
   10b7c:	2107cc04 	addi	r4,r4,7984
   10b80:	0010fa00 	call	10fa0 <printf>
		memset(admin_response,0,strlen(admin_response));
   10b84:	d1208004 	addi	r4,gp,-32256
   10b88:	00110bc0 	call	110bc <strlen>
   10b8c:	100d883a 	mov	r6,r2
   10b90:	000b883a 	mov	r5,zero
   10b94:	d1208004 	addi	r4,gp,-32256
   10b98:	0010f440 	call	10f44 <memset>
   10b9c:	00000206 	br	10ba8 <admin_actions+0x19c>
//		printf("\nSending: %s\n", admin_response);
//		usleep(10000);
//		memset(admin_response,0,strlen(admin_response));
//	}
	else {
		usleep(50000);
   10ba0:	0130d414 	movui	r4,50000
   10ba4:	00119c40 	call	119c4 <usleep>
	}

	//printf("<-> %c <->", response[100]);
	convert_read(x_read, & level, & led);
   10ba8:	d9000117 	ldw	r4,4(sp)
   10bac:	d1a07e04 	addi	r6,gp,-32264
   10bb0:	d1607f04 	addi	r5,gp,-32260
   10bb4:	00106600 	call	10660 <convert_read>


}
   10bb8:	00001506 	br	10c10 <admin_actions+0x204>

	//Left & Right//
	button_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
	if(FIR_out[0] < RIGHTLIM){
		while(is_flat(FIR_out[0]) == 0){
			alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   10bbc:	d9400104 	addi	r5,sp,4
   10bc0:	8009883a 	mov	r4,r16
   10bc4:	0011ae40 	call	11ae4 <alt_up_accelerometer_spi_read_x_axis>
			FIR_out[0] = x_read;
   10bc8:	d8800117 	ldw	r2,4(sp)
   10bcc:	003faf06 	br	10a8c <__alt_data_end+0xffff0a8c>
	else if(FIR_out[0] > LEFTLIM){
		while(is_flat(FIR_out[0]) == 0){
			alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
			FIR_out[0] = x_read;
		}
		strcat(admin_response, "L\n");
   10bd0:	01400074 	movhi	r5,1
   10bd4:	2947da04 	addi	r5,r5,8040
   10bd8:	d1208004 	addi	r4,gp,-32256
		int i = 0;
		while (admin_response[i] != '\0'){
			IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, admin_response[i]);
   10bdc:	048000b4 	movhi	r18,2
	else if(FIR_out[0] > LEFTLIM){
		while(is_flat(FIR_out[0]) == 0){
			alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
			FIR_out[0] = x_read;
		}
		strcat(admin_response, "L\n");
   10be0:	00110800 	call	11080 <strcat>
		int i = 0;
   10be4:	0021883a 	mov	r16,zero
		while (admin_response[i] != '\0'){
   10be8:	d4e08004 	addi	r19,gp,-32256
			IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, admin_response[i]);
   10bec:	94840104 	addi	r18,r18,4100
			alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
			FIR_out[0] = x_read;
		}
		strcat(admin_response, "L\n");
		int i = 0;
		while (admin_response[i] != '\0'){
   10bf0:	84c5883a 	add	r2,r16,r19
   10bf4:	10800007 	ldb	r2,0(r2)
   10bf8:	103fc026 	beq	r2,zero,10afc <__alt_data_end+0xffff0afc>
			IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, admin_response[i]);
   10bfc:	90800035 	stwio	r2,0(r18)
			usleep(10000) ;
   10c00:	0109c404 	movi	r4,10000
   10c04:	00119c40 	call	119c4 <usleep>
			i++;
   10c08:	84000044 	addi	r16,r16,1
   10c0c:	003ff806 	br	10bf0 <__alt_data_end+0xffff0bf0>

	//printf("<-> %c <->", response[100]);
	convert_read(x_read, & level, & led);


}
   10c10:	dfc00617 	ldw	ra,24(sp)
   10c14:	dcc00517 	ldw	r19,20(sp)
   10c18:	dc800417 	ldw	r18,16(sp)
   10c1c:	dc400317 	ldw	r17,12(sp)
   10c20:	dc000217 	ldw	r16,8(sp)
   10c24:	dec00704 	addi	sp,sp,28
   10c28:	f800283a 	ret

00010c2c <main>:

///////////////////////////////
////////////MAIN///////////////
///////////////////////////////

int main() {
   10c2c:	defff404 	addi	sp,sp,-48
   10c30:	dcc00515 	stw	r19,20(sp)
   10c34:	dc000215 	stw	r16,8(sp)
    ///Code///
    while (1) {

    	/////////////////////
    	///receiving shit////
    	serverdata = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE); //watch out this is IORD not IOWR...
   10c38:	04c000b4 	movhi	r19,2
   10c3c:	04000074 	movhi	r16,1

///////////////////////////////
////////////MAIN///////////////
///////////////////////////////

int main() {
   10c40:	dd000615 	stw	r20,24(sp)
   10c44:	dfc00b15 	stw	ra,44(sp)
   10c48:	df000a15 	stw	fp,40(sp)
   10c4c:	ddc00915 	stw	r23,36(sp)
   10c50:	dd800815 	stw	r22,32(sp)
   10c54:	dd400715 	stw	r21,28(sp)
   10c58:	dc800415 	stw	r18,16(sp)
   10c5c:	dc400315 	stw	r17,12(sp)
    ///Code///
    while (1) {

    	/////////////////////
    	///receiving shit////
    	serverdata = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE); //watch out this is IORD not IOWR...
   10c60:	9cc40004 	addi	r19,r19,4096
///////////////////////////////

int main() {

	//Display initialisation//
	initializeDisplay();
   10c64:	001023c0 	call	1023c <initializeDisplay>
   10c68:	8408d204 	addi	r16,r16,9032
		  //alt_putstr(&text[0]);
		  //the characters out to the screen in the correct order, shifted by the amount.  We modulo with the length of the text so the display keeps wrapping around
		  print_letters(text[(location % length)], text[(location + 1) % length], text[(location + 2) % length], text[(location + 3) % length], text[(location + 4) % length], text[(location + 5) % length]);
	    }

		if(admin_flag == 1){
   10c6c:	05000044 	movi	r20,1
    ///Code///
    while (1) {

    	/////////////////////
    	///receiving shit////
    	serverdata = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE); //watch out this is IORD not IOWR...
   10c70:	99400037 	ldwio	r5,0(r19)
//    		if (stat & ALTERA_AVALON_UART_STATUS_RRDY_MSK) { //Check if UART is ready to offer access to the RXDATA register
//    			serverdata = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
//    			IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0); //clear the status bits again
//    		}
//    		IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0); //reset interrupt
    	printf("Server data: %d \n", serverdata);
   10c74:	01000074 	movhi	r4,1
   10c78:	2107db04 	addi	r4,r4,8044
    ///Code///
    while (1) {

    	/////////////////////
    	///receiving shit////
    	serverdata = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE); //watch out this is IORD not IOWR...
   10c7c:	d1607d15 	stw	r5,-32268(gp)
//    		if (stat & ALTERA_AVALON_UART_STATUS_RRDY_MSK) { //Check if UART is ready to offer access to the RXDATA register
//    			serverdata = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
//    			IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0); //clear the status bits again
//    		}
//    		IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0); //reset interrupt
    	printf("Server data: %d \n", serverdata);
   10c80:	0010fa00 	call	10fa0 <printf>


		usleep(10000);
   10c84:	0109c404 	movi	r4,10000
   10c88:	00119c40 	call	119c4 <usleep>
//		if(serverdata == 1 || serverdata == 2)
		//calling the display functions and updating the current and previous serverdata chars;
		if((prevserverdata != serverdata)){ //if the old response and current one are not the same then we want to update the display
   10c8c:	d1207d17 	ldw	r4,-32268(gp)
   10c90:	d0a08217 	ldw	r2,-32248(gp)
   10c94:	11000326 	beq	r2,r4,10ca4 <main+0x78>
			  updateText(serverdata);
   10c98:	00103340 	call	10334 <updateText>
			  prevserverdata = serverdata;
   10c9c:	d0a07d17 	ldw	r2,-32268(gp)
   10ca0:	d0a08215 	stw	r2,-32248(gp)
		}
		if(static_flag){
   10ca4:	d0a07c17 	ldw	r2,-32272(gp)
   10ca8:	10000926 	beq	r2,zero,10cd0 <main+0xa4>
		  //alt_putstr("static_flag is 1\n");
		  //alt_putstr(&text[0]);
		  print_letters(text[0], text[1], text[2], text[3], text[4], text[5]);
   10cac:	80800147 	ldb	r2,5(r16)
   10cb0:	81c000c7 	ldb	r7,3(r16)
   10cb4:	81800087 	ldb	r6,2(r16)
   10cb8:	d8800115 	stw	r2,4(sp)
   10cbc:	80800107 	ldb	r2,4(r16)
   10cc0:	81400047 	ldb	r5,1(r16)
   10cc4:	81000007 	ldb	r4,0(r16)
   10cc8:	d8800015 	stw	r2,0(sp)
   10ccc:	00002606 	br	10d68 <main+0x13c>
		}
	    else{
		  //alt_putstr("static_flag is 0\n");
		  //alt_putstr(&text[0]);
		  //the characters out to the screen in the correct order, shifted by the amount.  We modulo with the length of the text so the display keeps wrapping around
		  print_letters(text[(location % length)], text[(location + 1) % length], text[(location + 2) % length], text[(location + 3) % length], text[(location + 4) % length], text[(location + 5) % length]);
   10cd0:	d4607a17 	ldw	r17,-32280(gp)
   10cd4:	d4a07b17 	ldw	r18,-32276(gp)
   10cd8:	890000c4 	addi	r4,r17,3
   10cdc:	900b883a 	mov	r5,r18
   10ce0:	0010e140 	call	10e14 <__modsi3>
   10ce4:	8085883a 	add	r2,r16,r2
   10ce8:	900b883a 	mov	r5,r18
   10cec:	89000084 	addi	r4,r17,2
   10cf0:	17000007 	ldb	fp,0(r2)
   10cf4:	0010e140 	call	10e14 <__modsi3>
   10cf8:	8085883a 	add	r2,r16,r2
   10cfc:	900b883a 	mov	r5,r18
   10d00:	89000044 	addi	r4,r17,1
   10d04:	15c00007 	ldb	r23,0(r2)
   10d08:	0010e140 	call	10e14 <__modsi3>
   10d0c:	8085883a 	add	r2,r16,r2
   10d10:	900b883a 	mov	r5,r18
   10d14:	8809883a 	mov	r4,r17
   10d18:	15800007 	ldb	r22,0(r2)
   10d1c:	0010e140 	call	10e14 <__modsi3>
   10d20:	8085883a 	add	r2,r16,r2
   10d24:	900b883a 	mov	r5,r18
   10d28:	89000144 	addi	r4,r17,5
   10d2c:	15400007 	ldb	r21,0(r2)
   10d30:	0010e140 	call	10e14 <__modsi3>
   10d34:	8085883a 	add	r2,r16,r2
   10d38:	10800007 	ldb	r2,0(r2)
   10d3c:	900b883a 	mov	r5,r18
   10d40:	89000104 	addi	r4,r17,4
   10d44:	d8800115 	stw	r2,4(sp)
   10d48:	0010e140 	call	10e14 <__modsi3>
   10d4c:	8085883a 	add	r2,r16,r2
   10d50:	10800007 	ldb	r2,0(r2)
   10d54:	e00f883a 	mov	r7,fp
   10d58:	b80d883a 	mov	r6,r23
   10d5c:	d8800015 	stw	r2,0(sp)
   10d60:	b00b883a 	mov	r5,r22
   10d64:	a809883a 	mov	r4,r21
   10d68:	00105240 	call	10524 <print_letters>
	    }

		if(admin_flag == 1){
   10d6c:	d0a08117 	ldw	r2,-32252(gp)
   10d70:	1500021e 	bne	r2,r20,10d7c <main+0x150>
			//printf("In the admin area:");
			admin_actions();
   10d74:	0010a0c0 	call	10a0c <admin_actions>
   10d78:	003fbd06 	br	10c70 <__alt_data_end+0xffff0c70>
		}
		else if(serverdata == 2){
   10d7c:	d0e07d17 	ldw	r3,-32268(gp)
   10d80:	00800084 	movi	r2,2
   10d84:	18bfba1e 	bne	r3,r2,10c70 <__alt_data_end+0xffff0c70>
			//printf("In game :");
			start_game();
   10d88:	00107100 	call	10710 <start_game>
   10d8c:	003fb806 	br	10c70 <__alt_data_end+0xffff0c70>

00010d90 <__divsi3>:
   10d90:	20001b16 	blt	r4,zero,10e00 <__divsi3+0x70>
   10d94:	000f883a 	mov	r7,zero
   10d98:	28001616 	blt	r5,zero,10df4 <__divsi3+0x64>
   10d9c:	200d883a 	mov	r6,r4
   10da0:	29001a2e 	bgeu	r5,r4,10e0c <__divsi3+0x7c>
   10da4:	00800804 	movi	r2,32
   10da8:	00c00044 	movi	r3,1
   10dac:	00000106 	br	10db4 <__divsi3+0x24>
   10db0:	10000d26 	beq	r2,zero,10de8 <__divsi3+0x58>
   10db4:	294b883a 	add	r5,r5,r5
   10db8:	10bfffc4 	addi	r2,r2,-1
   10dbc:	18c7883a 	add	r3,r3,r3
   10dc0:	293ffb36 	bltu	r5,r4,10db0 <__alt_data_end+0xffff0db0>
   10dc4:	0005883a 	mov	r2,zero
   10dc8:	18000726 	beq	r3,zero,10de8 <__divsi3+0x58>
   10dcc:	0005883a 	mov	r2,zero
   10dd0:	31400236 	bltu	r6,r5,10ddc <__divsi3+0x4c>
   10dd4:	314dc83a 	sub	r6,r6,r5
   10dd8:	10c4b03a 	or	r2,r2,r3
   10ddc:	1806d07a 	srli	r3,r3,1
   10de0:	280ad07a 	srli	r5,r5,1
   10de4:	183ffa1e 	bne	r3,zero,10dd0 <__alt_data_end+0xffff0dd0>
   10de8:	38000126 	beq	r7,zero,10df0 <__divsi3+0x60>
   10dec:	0085c83a 	sub	r2,zero,r2
   10df0:	f800283a 	ret
   10df4:	014bc83a 	sub	r5,zero,r5
   10df8:	39c0005c 	xori	r7,r7,1
   10dfc:	003fe706 	br	10d9c <__alt_data_end+0xffff0d9c>
   10e00:	0109c83a 	sub	r4,zero,r4
   10e04:	01c00044 	movi	r7,1
   10e08:	003fe306 	br	10d98 <__alt_data_end+0xffff0d98>
   10e0c:	00c00044 	movi	r3,1
   10e10:	003fee06 	br	10dcc <__alt_data_end+0xffff0dcc>

00010e14 <__modsi3>:
   10e14:	20001716 	blt	r4,zero,10e74 <__modsi3+0x60>
   10e18:	000f883a 	mov	r7,zero
   10e1c:	2005883a 	mov	r2,r4
   10e20:	28001216 	blt	r5,zero,10e6c <__modsi3+0x58>
   10e24:	2900162e 	bgeu	r5,r4,10e80 <__modsi3+0x6c>
   10e28:	01800804 	movi	r6,32
   10e2c:	00c00044 	movi	r3,1
   10e30:	00000106 	br	10e38 <__modsi3+0x24>
   10e34:	30000a26 	beq	r6,zero,10e60 <__modsi3+0x4c>
   10e38:	294b883a 	add	r5,r5,r5
   10e3c:	31bfffc4 	addi	r6,r6,-1
   10e40:	18c7883a 	add	r3,r3,r3
   10e44:	293ffb36 	bltu	r5,r4,10e34 <__alt_data_end+0xffff0e34>
   10e48:	18000526 	beq	r3,zero,10e60 <__modsi3+0x4c>
   10e4c:	1806d07a 	srli	r3,r3,1
   10e50:	11400136 	bltu	r2,r5,10e58 <__modsi3+0x44>
   10e54:	1145c83a 	sub	r2,r2,r5
   10e58:	280ad07a 	srli	r5,r5,1
   10e5c:	183ffb1e 	bne	r3,zero,10e4c <__alt_data_end+0xffff0e4c>
   10e60:	38000126 	beq	r7,zero,10e68 <__modsi3+0x54>
   10e64:	0085c83a 	sub	r2,zero,r2
   10e68:	f800283a 	ret
   10e6c:	014bc83a 	sub	r5,zero,r5
   10e70:	003fec06 	br	10e24 <__alt_data_end+0xffff0e24>
   10e74:	0109c83a 	sub	r4,zero,r4
   10e78:	01c00044 	movi	r7,1
   10e7c:	003fe706 	br	10e1c <__alt_data_end+0xffff0e1c>
   10e80:	00c00044 	movi	r3,1
   10e84:	003ff106 	br	10e4c <__alt_data_end+0xffff0e4c>

00010e88 <__udivsi3>:
   10e88:	200d883a 	mov	r6,r4
   10e8c:	2900152e 	bgeu	r5,r4,10ee4 <__udivsi3+0x5c>
   10e90:	28001416 	blt	r5,zero,10ee4 <__udivsi3+0x5c>
   10e94:	00800804 	movi	r2,32
   10e98:	00c00044 	movi	r3,1
   10e9c:	00000206 	br	10ea8 <__udivsi3+0x20>
   10ea0:	10000e26 	beq	r2,zero,10edc <__udivsi3+0x54>
   10ea4:	28000516 	blt	r5,zero,10ebc <__udivsi3+0x34>
   10ea8:	294b883a 	add	r5,r5,r5
   10eac:	10bfffc4 	addi	r2,r2,-1
   10eb0:	18c7883a 	add	r3,r3,r3
   10eb4:	293ffa36 	bltu	r5,r4,10ea0 <__alt_data_end+0xffff0ea0>
   10eb8:	18000826 	beq	r3,zero,10edc <__udivsi3+0x54>
   10ebc:	0005883a 	mov	r2,zero
   10ec0:	31400236 	bltu	r6,r5,10ecc <__udivsi3+0x44>
   10ec4:	314dc83a 	sub	r6,r6,r5
   10ec8:	10c4b03a 	or	r2,r2,r3
   10ecc:	1806d07a 	srli	r3,r3,1
   10ed0:	280ad07a 	srli	r5,r5,1
   10ed4:	183ffa1e 	bne	r3,zero,10ec0 <__alt_data_end+0xffff0ec0>
   10ed8:	f800283a 	ret
   10edc:	0005883a 	mov	r2,zero
   10ee0:	f800283a 	ret
   10ee4:	00c00044 	movi	r3,1
   10ee8:	003ff406 	br	10ebc <__alt_data_end+0xffff0ebc>

00010eec <__umodsi3>:
   10eec:	2005883a 	mov	r2,r4
   10ef0:	2900122e 	bgeu	r5,r4,10f3c <__umodsi3+0x50>
   10ef4:	28001116 	blt	r5,zero,10f3c <__umodsi3+0x50>
   10ef8:	01800804 	movi	r6,32
   10efc:	00c00044 	movi	r3,1
   10f00:	00000206 	br	10f0c <__umodsi3+0x20>
   10f04:	30000c26 	beq	r6,zero,10f38 <__umodsi3+0x4c>
   10f08:	28000516 	blt	r5,zero,10f20 <__umodsi3+0x34>
   10f0c:	294b883a 	add	r5,r5,r5
   10f10:	31bfffc4 	addi	r6,r6,-1
   10f14:	18c7883a 	add	r3,r3,r3
   10f18:	293ffa36 	bltu	r5,r4,10f04 <__alt_data_end+0xffff0f04>
   10f1c:	18000626 	beq	r3,zero,10f38 <__umodsi3+0x4c>
   10f20:	1806d07a 	srli	r3,r3,1
   10f24:	11400136 	bltu	r2,r5,10f2c <__umodsi3+0x40>
   10f28:	1145c83a 	sub	r2,r2,r5
   10f2c:	280ad07a 	srli	r5,r5,1
   10f30:	183ffb1e 	bne	r3,zero,10f20 <__alt_data_end+0xffff0f20>
   10f34:	f800283a 	ret
   10f38:	f800283a 	ret
   10f3c:	00c00044 	movi	r3,1
   10f40:	003ff706 	br	10f20 <__alt_data_end+0xffff0f20>

00010f44 <memset>:
   10f44:	2005883a 	mov	r2,r4
   10f48:	2007883a 	mov	r3,r4
   10f4c:	218d883a 	add	r6,r4,r6
   10f50:	19800326 	beq	r3,r6,10f60 <memset+0x1c>
   10f54:	19400005 	stb	r5,0(r3)
   10f58:	18c00044 	addi	r3,r3,1
   10f5c:	003ffc06 	br	10f50 <__alt_data_end+0xffff0f50>
   10f60:	f800283a 	ret

00010f64 <_printf_r>:
   10f64:	defffd04 	addi	sp,sp,-12
   10f68:	dfc00015 	stw	ra,0(sp)
   10f6c:	d9800115 	stw	r6,4(sp)
   10f70:	d9c00215 	stw	r7,8(sp)
   10f74:	20c00217 	ldw	r3,8(r4)
   10f78:	01800074 	movhi	r6,1
   10f7c:	3185a304 	addi	r6,r6,5772
   10f80:	19800115 	stw	r6,4(r3)
   10f84:	280d883a 	mov	r6,r5
   10f88:	21400217 	ldw	r5,8(r4)
   10f8c:	d9c00104 	addi	r7,sp,4
   10f90:	00111440 	call	11144 <___vfprintf_internal_r>
   10f94:	dfc00017 	ldw	ra,0(sp)
   10f98:	dec00304 	addi	sp,sp,12
   10f9c:	f800283a 	ret

00010fa0 <printf>:
   10fa0:	defffc04 	addi	sp,sp,-16
   10fa4:	dfc00015 	stw	ra,0(sp)
   10fa8:	d9400115 	stw	r5,4(sp)
   10fac:	d9800215 	stw	r6,8(sp)
   10fb0:	d9c00315 	stw	r7,12(sp)
   10fb4:	00800074 	movhi	r2,1
   10fb8:	10884b04 	addi	r2,r2,8492
   10fbc:	10800017 	ldw	r2,0(r2)
   10fc0:	01400074 	movhi	r5,1
   10fc4:	2945a304 	addi	r5,r5,5772
   10fc8:	10c00217 	ldw	r3,8(r2)
   10fcc:	d9800104 	addi	r6,sp,4
   10fd0:	19400115 	stw	r5,4(r3)
   10fd4:	200b883a 	mov	r5,r4
   10fd8:	11000217 	ldw	r4,8(r2)
   10fdc:	00116700 	call	11670 <__vfprintf_internal>
   10fe0:	dfc00017 	ldw	ra,0(sp)
   10fe4:	dec00404 	addi	sp,sp,16
   10fe8:	f800283a 	ret

00010fec <_puts_r>:
   10fec:	defffd04 	addi	sp,sp,-12
   10ff0:	dc000015 	stw	r16,0(sp)
   10ff4:	2021883a 	mov	r16,r4
   10ff8:	2809883a 	mov	r4,r5
   10ffc:	dfc00215 	stw	ra,8(sp)
   11000:	dc400115 	stw	r17,4(sp)
   11004:	2823883a 	mov	r17,r5
   11008:	00110bc0 	call	110bc <strlen>
   1100c:	81400217 	ldw	r5,8(r16)
   11010:	01000074 	movhi	r4,1
   11014:	2105a304 	addi	r4,r4,5772
   11018:	29000115 	stw	r4,4(r5)
   1101c:	100f883a 	mov	r7,r2
   11020:	880d883a 	mov	r6,r17
   11024:	8009883a 	mov	r4,r16
   11028:	001168c0 	call	1168c <__sfvwrite_small_dev>
   1102c:	00ffffc4 	movi	r3,-1
   11030:	10c00926 	beq	r2,r3,11058 <_puts_r+0x6c>
   11034:	81400217 	ldw	r5,8(r16)
   11038:	01800074 	movhi	r6,1
   1103c:	01c00044 	movi	r7,1
   11040:	28800117 	ldw	r2,4(r5)
   11044:	3187df04 	addi	r6,r6,8060
   11048:	8009883a 	mov	r4,r16
   1104c:	103ee83a 	callr	r2
   11050:	10bfffe0 	cmpeqi	r2,r2,-1
   11054:	0085c83a 	sub	r2,zero,r2
   11058:	dfc00217 	ldw	ra,8(sp)
   1105c:	dc400117 	ldw	r17,4(sp)
   11060:	dc000017 	ldw	r16,0(sp)
   11064:	dec00304 	addi	sp,sp,12
   11068:	f800283a 	ret

0001106c <puts>:
   1106c:	00800074 	movhi	r2,1
   11070:	10884b04 	addi	r2,r2,8492
   11074:	200b883a 	mov	r5,r4
   11078:	11000017 	ldw	r4,0(r2)
   1107c:	0010fec1 	jmpi	10fec <_puts_r>

00011080 <strcat>:
   11080:	2005883a 	mov	r2,r4
   11084:	2007883a 	mov	r3,r4
   11088:	19000007 	ldb	r4,0(r3)
   1108c:	20000226 	beq	r4,zero,11098 <strcat+0x18>
   11090:	18c00044 	addi	r3,r3,1
   11094:	003ffc06 	br	11088 <__alt_data_end+0xffff1088>
   11098:	29800003 	ldbu	r6,0(r5)
   1109c:	18c00044 	addi	r3,r3,1
   110a0:	29400044 	addi	r5,r5,1
   110a4:	19bfffc5 	stb	r6,-1(r3)
   110a8:	31803fcc 	andi	r6,r6,255
   110ac:	3180201c 	xori	r6,r6,128
   110b0:	31bfe004 	addi	r6,r6,-128
   110b4:	303ff81e 	bne	r6,zero,11098 <__alt_data_end+0xffff1098>
   110b8:	f800283a 	ret

000110bc <strlen>:
   110bc:	2005883a 	mov	r2,r4
   110c0:	10c00007 	ldb	r3,0(r2)
   110c4:	18000226 	beq	r3,zero,110d0 <strlen+0x14>
   110c8:	10800044 	addi	r2,r2,1
   110cc:	003ffc06 	br	110c0 <__alt_data_end+0xffff10c0>
   110d0:	1105c83a 	sub	r2,r2,r4
   110d4:	f800283a 	ret

000110d8 <print_repeat>:
   110d8:	defffb04 	addi	sp,sp,-20
   110dc:	dc800315 	stw	r18,12(sp)
   110e0:	dc400215 	stw	r17,8(sp)
   110e4:	dc000115 	stw	r16,4(sp)
   110e8:	dfc00415 	stw	ra,16(sp)
   110ec:	2025883a 	mov	r18,r4
   110f0:	2823883a 	mov	r17,r5
   110f4:	d9800005 	stb	r6,0(sp)
   110f8:	3821883a 	mov	r16,r7
   110fc:	04000a0e 	bge	zero,r16,11128 <print_repeat+0x50>
   11100:	88800117 	ldw	r2,4(r17)
   11104:	01c00044 	movi	r7,1
   11108:	d80d883a 	mov	r6,sp
   1110c:	880b883a 	mov	r5,r17
   11110:	9009883a 	mov	r4,r18
   11114:	103ee83a 	callr	r2
   11118:	843fffc4 	addi	r16,r16,-1
   1111c:	103ff726 	beq	r2,zero,110fc <__alt_data_end+0xffff10fc>
   11120:	00bfffc4 	movi	r2,-1
   11124:	00000106 	br	1112c <print_repeat+0x54>
   11128:	0005883a 	mov	r2,zero
   1112c:	dfc00417 	ldw	ra,16(sp)
   11130:	dc800317 	ldw	r18,12(sp)
   11134:	dc400217 	ldw	r17,8(sp)
   11138:	dc000117 	ldw	r16,4(sp)
   1113c:	dec00504 	addi	sp,sp,20
   11140:	f800283a 	ret

00011144 <___vfprintf_internal_r>:
   11144:	deffe504 	addi	sp,sp,-108
   11148:	d8c00804 	addi	r3,sp,32
   1114c:	ddc01815 	stw	r23,96(sp)
   11150:	dd801715 	stw	r22,92(sp)
   11154:	dd401615 	stw	r21,88(sp)
   11158:	dd001515 	stw	r20,84(sp)
   1115c:	dcc01415 	stw	r19,80(sp)
   11160:	dc801315 	stw	r18,76(sp)
   11164:	dc401215 	stw	r17,72(sp)
   11168:	dc001115 	stw	r16,68(sp)
   1116c:	dfc01a15 	stw	ra,104(sp)
   11170:	df001915 	stw	fp,100(sp)
   11174:	2029883a 	mov	r20,r4
   11178:	2823883a 	mov	r17,r5
   1117c:	382d883a 	mov	r22,r7
   11180:	d9800f15 	stw	r6,60(sp)
   11184:	0021883a 	mov	r16,zero
   11188:	d8000e15 	stw	zero,56(sp)
   1118c:	d8000a15 	stw	zero,40(sp)
   11190:	002b883a 	mov	r21,zero
   11194:	0027883a 	mov	r19,zero
   11198:	0025883a 	mov	r18,zero
   1119c:	d8000c15 	stw	zero,48(sp)
   111a0:	d8000b15 	stw	zero,44(sp)
   111a4:	002f883a 	mov	r23,zero
   111a8:	d8c00915 	stw	r3,36(sp)
   111ac:	d8c00f17 	ldw	r3,60(sp)
   111b0:	19000003 	ldbu	r4,0(r3)
   111b4:	20803fcc 	andi	r2,r4,255
   111b8:	1080201c 	xori	r2,r2,128
   111bc:	10bfe004 	addi	r2,r2,-128
   111c0:	10011e26 	beq	r2,zero,1163c <___vfprintf_internal_r+0x4f8>
   111c4:	00c00044 	movi	r3,1
   111c8:	b8c01426 	beq	r23,r3,1121c <___vfprintf_internal_r+0xd8>
   111cc:	1dc00216 	blt	r3,r23,111d8 <___vfprintf_internal_r+0x94>
   111d0:	b8000626 	beq	r23,zero,111ec <___vfprintf_internal_r+0xa8>
   111d4:	00011506 	br	1162c <___vfprintf_internal_r+0x4e8>
   111d8:	01400084 	movi	r5,2
   111dc:	b9401d26 	beq	r23,r5,11254 <___vfprintf_internal_r+0x110>
   111e0:	014000c4 	movi	r5,3
   111e4:	b9402b26 	beq	r23,r5,11294 <___vfprintf_internal_r+0x150>
   111e8:	00011006 	br	1162c <___vfprintf_internal_r+0x4e8>
   111ec:	01400944 	movi	r5,37
   111f0:	1140fc26 	beq	r2,r5,115e4 <___vfprintf_internal_r+0x4a0>
   111f4:	88800117 	ldw	r2,4(r17)
   111f8:	d9000005 	stb	r4,0(sp)
   111fc:	01c00044 	movi	r7,1
   11200:	d80d883a 	mov	r6,sp
   11204:	880b883a 	mov	r5,r17
   11208:	a009883a 	mov	r4,r20
   1120c:	103ee83a 	callr	r2
   11210:	1000d81e 	bne	r2,zero,11574 <___vfprintf_internal_r+0x430>
   11214:	84000044 	addi	r16,r16,1
   11218:	00010406 	br	1162c <___vfprintf_internal_r+0x4e8>
   1121c:	01400c04 	movi	r5,48
   11220:	1140fa26 	beq	r2,r5,1160c <___vfprintf_internal_r+0x4c8>
   11224:	01400944 	movi	r5,37
   11228:	11400a1e 	bne	r2,r5,11254 <___vfprintf_internal_r+0x110>
   1122c:	d8800005 	stb	r2,0(sp)
   11230:	88800117 	ldw	r2,4(r17)
   11234:	b80f883a 	mov	r7,r23
   11238:	d80d883a 	mov	r6,sp
   1123c:	880b883a 	mov	r5,r17
   11240:	a009883a 	mov	r4,r20
   11244:	103ee83a 	callr	r2
   11248:	1000ca1e 	bne	r2,zero,11574 <___vfprintf_internal_r+0x430>
   1124c:	84000044 	addi	r16,r16,1
   11250:	0000f506 	br	11628 <___vfprintf_internal_r+0x4e4>
   11254:	25fff404 	addi	r23,r4,-48
   11258:	bdc03fcc 	andi	r23,r23,255
   1125c:	00c00244 	movi	r3,9
   11260:	1dc00936 	bltu	r3,r23,11288 <___vfprintf_internal_r+0x144>
   11264:	00bfffc4 	movi	r2,-1
   11268:	90800426 	beq	r18,r2,1127c <___vfprintf_internal_r+0x138>
   1126c:	01400284 	movi	r5,10
   11270:	9009883a 	mov	r4,r18
   11274:	001179c0 	call	1179c <__mulsi3>
   11278:	00000106 	br	11280 <___vfprintf_internal_r+0x13c>
   1127c:	0005883a 	mov	r2,zero
   11280:	b8a5883a 	add	r18,r23,r2
   11284:	0000e206 	br	11610 <___vfprintf_internal_r+0x4cc>
   11288:	01400b84 	movi	r5,46
   1128c:	1140e426 	beq	r2,r5,11620 <___vfprintf_internal_r+0x4dc>
   11290:	05c00084 	movi	r23,2
   11294:	213ff404 	addi	r4,r4,-48
   11298:	27003fcc 	andi	fp,r4,255
   1129c:	00c00244 	movi	r3,9
   112a0:	1f000936 	bltu	r3,fp,112c8 <___vfprintf_internal_r+0x184>
   112a4:	00bfffc4 	movi	r2,-1
   112a8:	98800426 	beq	r19,r2,112bc <___vfprintf_internal_r+0x178>
   112ac:	01400284 	movi	r5,10
   112b0:	9809883a 	mov	r4,r19
   112b4:	001179c0 	call	1179c <__mulsi3>
   112b8:	00000106 	br	112c0 <___vfprintf_internal_r+0x17c>
   112bc:	0005883a 	mov	r2,zero
   112c0:	e0a7883a 	add	r19,fp,r2
   112c4:	0000d906 	br	1162c <___vfprintf_internal_r+0x4e8>
   112c8:	00c01b04 	movi	r3,108
   112cc:	10c0d226 	beq	r2,r3,11618 <___vfprintf_internal_r+0x4d4>
   112d0:	013fffc4 	movi	r4,-1
   112d4:	99000226 	beq	r19,r4,112e0 <___vfprintf_internal_r+0x19c>
   112d8:	d8000b15 	stw	zero,44(sp)
   112dc:	00000106 	br	112e4 <___vfprintf_internal_r+0x1a0>
   112e0:	04c00044 	movi	r19,1
   112e4:	01001a44 	movi	r4,105
   112e8:	11001626 	beq	r2,r4,11344 <___vfprintf_internal_r+0x200>
   112ec:	20800916 	blt	r4,r2,11314 <___vfprintf_internal_r+0x1d0>
   112f0:	010018c4 	movi	r4,99
   112f4:	11008826 	beq	r2,r4,11518 <___vfprintf_internal_r+0x3d4>
   112f8:	01001904 	movi	r4,100
   112fc:	11001126 	beq	r2,r4,11344 <___vfprintf_internal_r+0x200>
   11300:	01001604 	movi	r4,88
   11304:	1100c81e 	bne	r2,r4,11628 <___vfprintf_internal_r+0x4e4>
   11308:	00c00044 	movi	r3,1
   1130c:	d8c00e15 	stw	r3,56(sp)
   11310:	00001506 	br	11368 <___vfprintf_internal_r+0x224>
   11314:	01001cc4 	movi	r4,115
   11318:	11009826 	beq	r2,r4,1157c <___vfprintf_internal_r+0x438>
   1131c:	20800416 	blt	r4,r2,11330 <___vfprintf_internal_r+0x1ec>
   11320:	01001bc4 	movi	r4,111
   11324:	1100c01e 	bne	r2,r4,11628 <___vfprintf_internal_r+0x4e4>
   11328:	05400204 	movi	r21,8
   1132c:	00000f06 	br	1136c <___vfprintf_internal_r+0x228>
   11330:	01001d44 	movi	r4,117
   11334:	11000d26 	beq	r2,r4,1136c <___vfprintf_internal_r+0x228>
   11338:	01001e04 	movi	r4,120
   1133c:	11000a26 	beq	r2,r4,11368 <___vfprintf_internal_r+0x224>
   11340:	0000b906 	br	11628 <___vfprintf_internal_r+0x4e4>
   11344:	d8c00a17 	ldw	r3,40(sp)
   11348:	b7000104 	addi	fp,r22,4
   1134c:	18000726 	beq	r3,zero,1136c <___vfprintf_internal_r+0x228>
   11350:	df000d15 	stw	fp,52(sp)
   11354:	b5c00017 	ldw	r23,0(r22)
   11358:	b800080e 	bge	r23,zero,1137c <___vfprintf_internal_r+0x238>
   1135c:	05efc83a 	sub	r23,zero,r23
   11360:	02400044 	movi	r9,1
   11364:	00000606 	br	11380 <___vfprintf_internal_r+0x23c>
   11368:	05400404 	movi	r21,16
   1136c:	b0c00104 	addi	r3,r22,4
   11370:	d8c00d15 	stw	r3,52(sp)
   11374:	b5c00017 	ldw	r23,0(r22)
   11378:	d8000a15 	stw	zero,40(sp)
   1137c:	0013883a 	mov	r9,zero
   11380:	d839883a 	mov	fp,sp
   11384:	b8001726 	beq	r23,zero,113e4 <___vfprintf_internal_r+0x2a0>
   11388:	a80b883a 	mov	r5,r21
   1138c:	b809883a 	mov	r4,r23
   11390:	da401015 	stw	r9,64(sp)
   11394:	0010e880 	call	10e88 <__udivsi3>
   11398:	a80b883a 	mov	r5,r21
   1139c:	1009883a 	mov	r4,r2
   113a0:	102d883a 	mov	r22,r2
   113a4:	001179c0 	call	1179c <__mulsi3>
   113a8:	b885c83a 	sub	r2,r23,r2
   113ac:	00c00244 	movi	r3,9
   113b0:	da401017 	ldw	r9,64(sp)
   113b4:	18800216 	blt	r3,r2,113c0 <___vfprintf_internal_r+0x27c>
   113b8:	10800c04 	addi	r2,r2,48
   113bc:	00000506 	br	113d4 <___vfprintf_internal_r+0x290>
   113c0:	d8c00e17 	ldw	r3,56(sp)
   113c4:	18000226 	beq	r3,zero,113d0 <___vfprintf_internal_r+0x28c>
   113c8:	10800dc4 	addi	r2,r2,55
   113cc:	00000106 	br	113d4 <___vfprintf_internal_r+0x290>
   113d0:	108015c4 	addi	r2,r2,87
   113d4:	e0800005 	stb	r2,0(fp)
   113d8:	b02f883a 	mov	r23,r22
   113dc:	e7000044 	addi	fp,fp,1
   113e0:	003fe806 	br	11384 <__alt_data_end+0xffff1384>
   113e4:	e6efc83a 	sub	r23,fp,sp
   113e8:	9dc5c83a 	sub	r2,r19,r23
   113ec:	0080090e 	bge	zero,r2,11414 <___vfprintf_internal_r+0x2d0>
   113f0:	e085883a 	add	r2,fp,r2
   113f4:	01400c04 	movi	r5,48
   113f8:	d8c00917 	ldw	r3,36(sp)
   113fc:	e009883a 	mov	r4,fp
   11400:	e0c0032e 	bgeu	fp,r3,11410 <___vfprintf_internal_r+0x2cc>
   11404:	e7000044 	addi	fp,fp,1
   11408:	21400005 	stb	r5,0(r4)
   1140c:	e0bffa1e 	bne	fp,r2,113f8 <__alt_data_end+0xffff13f8>
   11410:	e6efc83a 	sub	r23,fp,sp
   11414:	d8c00b17 	ldw	r3,44(sp)
   11418:	4dd1883a 	add	r8,r9,r23
   1141c:	922dc83a 	sub	r22,r18,r8
   11420:	18001626 	beq	r3,zero,1147c <___vfprintf_internal_r+0x338>
   11424:	48000a26 	beq	r9,zero,11450 <___vfprintf_internal_r+0x30c>
   11428:	00800b44 	movi	r2,45
   1142c:	d8800805 	stb	r2,32(sp)
   11430:	88800117 	ldw	r2,4(r17)
   11434:	01c00044 	movi	r7,1
   11438:	d9800804 	addi	r6,sp,32
   1143c:	880b883a 	mov	r5,r17
   11440:	a009883a 	mov	r4,r20
   11444:	103ee83a 	callr	r2
   11448:	10004a1e 	bne	r2,zero,11574 <___vfprintf_internal_r+0x430>
   1144c:	84000044 	addi	r16,r16,1
   11450:	0580070e 	bge	zero,r22,11470 <___vfprintf_internal_r+0x32c>
   11454:	b00f883a 	mov	r7,r22
   11458:	01800c04 	movi	r6,48
   1145c:	880b883a 	mov	r5,r17
   11460:	a009883a 	mov	r4,r20
   11464:	00110d80 	call	110d8 <print_repeat>
   11468:	1000421e 	bne	r2,zero,11574 <___vfprintf_internal_r+0x430>
   1146c:	85a1883a 	add	r16,r16,r22
   11470:	e02d883a 	mov	r22,fp
   11474:	bf2fc83a 	sub	r23,r23,fp
   11478:	00002006 	br	114fc <___vfprintf_internal_r+0x3b8>
   1147c:	0580090e 	bge	zero,r22,114a4 <___vfprintf_internal_r+0x360>
   11480:	b00f883a 	mov	r7,r22
   11484:	01800804 	movi	r6,32
   11488:	880b883a 	mov	r5,r17
   1148c:	a009883a 	mov	r4,r20
   11490:	da401015 	stw	r9,64(sp)
   11494:	00110d80 	call	110d8 <print_repeat>
   11498:	da401017 	ldw	r9,64(sp)
   1149c:	1000351e 	bne	r2,zero,11574 <___vfprintf_internal_r+0x430>
   114a0:	85a1883a 	add	r16,r16,r22
   114a4:	483ff226 	beq	r9,zero,11470 <__alt_data_end+0xffff1470>
   114a8:	00800b44 	movi	r2,45
   114ac:	d8800805 	stb	r2,32(sp)
   114b0:	88800117 	ldw	r2,4(r17)
   114b4:	01c00044 	movi	r7,1
   114b8:	d9800804 	addi	r6,sp,32
   114bc:	880b883a 	mov	r5,r17
   114c0:	a009883a 	mov	r4,r20
   114c4:	103ee83a 	callr	r2
   114c8:	10002a1e 	bne	r2,zero,11574 <___vfprintf_internal_r+0x430>
   114cc:	84000044 	addi	r16,r16,1
   114d0:	003fe706 	br	11470 <__alt_data_end+0xffff1470>
   114d4:	b5bfffc4 	addi	r22,r22,-1
   114d8:	b0800003 	ldbu	r2,0(r22)
   114dc:	01c00044 	movi	r7,1
   114e0:	d9800804 	addi	r6,sp,32
   114e4:	d8800805 	stb	r2,32(sp)
   114e8:	88800117 	ldw	r2,4(r17)
   114ec:	880b883a 	mov	r5,r17
   114f0:	a009883a 	mov	r4,r20
   114f4:	103ee83a 	callr	r2
   114f8:	10001e1e 	bne	r2,zero,11574 <___vfprintf_internal_r+0x430>
   114fc:	8585c83a 	sub	r2,r16,r22
   11500:	b5c9883a 	add	r4,r22,r23
   11504:	e085883a 	add	r2,fp,r2
   11508:	013ff216 	blt	zero,r4,114d4 <__alt_data_end+0xffff14d4>
   1150c:	1021883a 	mov	r16,r2
   11510:	dd800d17 	ldw	r22,52(sp)
   11514:	00004406 	br	11628 <___vfprintf_internal_r+0x4e4>
   11518:	00800044 	movi	r2,1
   1151c:	1480080e 	bge	r2,r18,11540 <___vfprintf_internal_r+0x3fc>
   11520:	95ffffc4 	addi	r23,r18,-1
   11524:	b80f883a 	mov	r7,r23
   11528:	01800804 	movi	r6,32
   1152c:	880b883a 	mov	r5,r17
   11530:	a009883a 	mov	r4,r20
   11534:	00110d80 	call	110d8 <print_repeat>
   11538:	10000e1e 	bne	r2,zero,11574 <___vfprintf_internal_r+0x430>
   1153c:	85e1883a 	add	r16,r16,r23
   11540:	b0800017 	ldw	r2,0(r22)
   11544:	01c00044 	movi	r7,1
   11548:	d80d883a 	mov	r6,sp
   1154c:	d8800005 	stb	r2,0(sp)
   11550:	88800117 	ldw	r2,4(r17)
   11554:	880b883a 	mov	r5,r17
   11558:	a009883a 	mov	r4,r20
   1155c:	b5c00104 	addi	r23,r22,4
   11560:	103ee83a 	callr	r2
   11564:	1000031e 	bne	r2,zero,11574 <___vfprintf_internal_r+0x430>
   11568:	84000044 	addi	r16,r16,1
   1156c:	b82d883a 	mov	r22,r23
   11570:	00002d06 	br	11628 <___vfprintf_internal_r+0x4e4>
   11574:	00bfffc4 	movi	r2,-1
   11578:	00003106 	br	11640 <___vfprintf_internal_r+0x4fc>
   1157c:	b5c00017 	ldw	r23,0(r22)
   11580:	b7000104 	addi	fp,r22,4
   11584:	b809883a 	mov	r4,r23
   11588:	00110bc0 	call	110bc <strlen>
   1158c:	9091c83a 	sub	r8,r18,r2
   11590:	102d883a 	mov	r22,r2
   11594:	0200090e 	bge	zero,r8,115bc <___vfprintf_internal_r+0x478>
   11598:	400f883a 	mov	r7,r8
   1159c:	01800804 	movi	r6,32
   115a0:	880b883a 	mov	r5,r17
   115a4:	a009883a 	mov	r4,r20
   115a8:	da001015 	stw	r8,64(sp)
   115ac:	00110d80 	call	110d8 <print_repeat>
   115b0:	da001017 	ldw	r8,64(sp)
   115b4:	103fef1e 	bne	r2,zero,11574 <__alt_data_end+0xffff1574>
   115b8:	8221883a 	add	r16,r16,r8
   115bc:	88800117 	ldw	r2,4(r17)
   115c0:	b00f883a 	mov	r7,r22
   115c4:	b80d883a 	mov	r6,r23
   115c8:	880b883a 	mov	r5,r17
   115cc:	a009883a 	mov	r4,r20
   115d0:	103ee83a 	callr	r2
   115d4:	103fe71e 	bne	r2,zero,11574 <__alt_data_end+0xffff1574>
   115d8:	85a1883a 	add	r16,r16,r22
   115dc:	e02d883a 	mov	r22,fp
   115e0:	00001106 	br	11628 <___vfprintf_internal_r+0x4e4>
   115e4:	00c00044 	movi	r3,1
   115e8:	04ffffc4 	movi	r19,-1
   115ec:	d8000e15 	stw	zero,56(sp)
   115f0:	d8c00a15 	stw	r3,40(sp)
   115f4:	05400284 	movi	r21,10
   115f8:	9825883a 	mov	r18,r19
   115fc:	d8000c15 	stw	zero,48(sp)
   11600:	d8000b15 	stw	zero,44(sp)
   11604:	182f883a 	mov	r23,r3
   11608:	00000806 	br	1162c <___vfprintf_internal_r+0x4e8>
   1160c:	ddc00b15 	stw	r23,44(sp)
   11610:	05c00084 	movi	r23,2
   11614:	00000506 	br	1162c <___vfprintf_internal_r+0x4e8>
   11618:	00c00044 	movi	r3,1
   1161c:	d8c00c15 	stw	r3,48(sp)
   11620:	05c000c4 	movi	r23,3
   11624:	00000106 	br	1162c <___vfprintf_internal_r+0x4e8>
   11628:	002f883a 	mov	r23,zero
   1162c:	d8c00f17 	ldw	r3,60(sp)
   11630:	18c00044 	addi	r3,r3,1
   11634:	d8c00f15 	stw	r3,60(sp)
   11638:	003edc06 	br	111ac <__alt_data_end+0xffff11ac>
   1163c:	8005883a 	mov	r2,r16
   11640:	dfc01a17 	ldw	ra,104(sp)
   11644:	df001917 	ldw	fp,100(sp)
   11648:	ddc01817 	ldw	r23,96(sp)
   1164c:	dd801717 	ldw	r22,92(sp)
   11650:	dd401617 	ldw	r21,88(sp)
   11654:	dd001517 	ldw	r20,84(sp)
   11658:	dcc01417 	ldw	r19,80(sp)
   1165c:	dc801317 	ldw	r18,76(sp)
   11660:	dc401217 	ldw	r17,72(sp)
   11664:	dc001117 	ldw	r16,68(sp)
   11668:	dec01b04 	addi	sp,sp,108
   1166c:	f800283a 	ret

00011670 <__vfprintf_internal>:
   11670:	00800074 	movhi	r2,1
   11674:	10884b04 	addi	r2,r2,8492
   11678:	300f883a 	mov	r7,r6
   1167c:	280d883a 	mov	r6,r5
   11680:	200b883a 	mov	r5,r4
   11684:	11000017 	ldw	r4,0(r2)
   11688:	00111441 	jmpi	11144 <___vfprintf_internal_r>

0001168c <__sfvwrite_small_dev>:
   1168c:	2880000b 	ldhu	r2,0(r5)
   11690:	1080020c 	andi	r2,r2,8
   11694:	10002126 	beq	r2,zero,1171c <__sfvwrite_small_dev+0x90>
   11698:	2880008f 	ldh	r2,2(r5)
   1169c:	defffa04 	addi	sp,sp,-24
   116a0:	dc000015 	stw	r16,0(sp)
   116a4:	dfc00515 	stw	ra,20(sp)
   116a8:	dd000415 	stw	r20,16(sp)
   116ac:	dcc00315 	stw	r19,12(sp)
   116b0:	dc800215 	stw	r18,8(sp)
   116b4:	dc400115 	stw	r17,4(sp)
   116b8:	2821883a 	mov	r16,r5
   116bc:	10001216 	blt	r2,zero,11708 <__sfvwrite_small_dev+0x7c>
   116c0:	2027883a 	mov	r19,r4
   116c4:	3025883a 	mov	r18,r6
   116c8:	3823883a 	mov	r17,r7
   116cc:	05010004 	movi	r20,1024
   116d0:	04400b0e 	bge	zero,r17,11700 <__sfvwrite_small_dev+0x74>
   116d4:	880f883a 	mov	r7,r17
   116d8:	a440010e 	bge	r20,r17,116e0 <__sfvwrite_small_dev+0x54>
   116dc:	01c10004 	movi	r7,1024
   116e0:	8140008f 	ldh	r5,2(r16)
   116e4:	900d883a 	mov	r6,r18
   116e8:	9809883a 	mov	r4,r19
   116ec:	00117440 	call	11744 <_write_r>
   116f0:	0080050e 	bge	zero,r2,11708 <__sfvwrite_small_dev+0x7c>
   116f4:	88a3c83a 	sub	r17,r17,r2
   116f8:	90a5883a 	add	r18,r18,r2
   116fc:	003ff406 	br	116d0 <__alt_data_end+0xffff16d0>
   11700:	0005883a 	mov	r2,zero
   11704:	00000706 	br	11724 <__sfvwrite_small_dev+0x98>
   11708:	8080000b 	ldhu	r2,0(r16)
   1170c:	10801014 	ori	r2,r2,64
   11710:	8080000d 	sth	r2,0(r16)
   11714:	00bfffc4 	movi	r2,-1
   11718:	00000206 	br	11724 <__sfvwrite_small_dev+0x98>
   1171c:	00bfffc4 	movi	r2,-1
   11720:	f800283a 	ret
   11724:	dfc00517 	ldw	ra,20(sp)
   11728:	dd000417 	ldw	r20,16(sp)
   1172c:	dcc00317 	ldw	r19,12(sp)
   11730:	dc800217 	ldw	r18,8(sp)
   11734:	dc400117 	ldw	r17,4(sp)
   11738:	dc000017 	ldw	r16,0(sp)
   1173c:	dec00604 	addi	sp,sp,24
   11740:	f800283a 	ret

00011744 <_write_r>:
   11744:	defffd04 	addi	sp,sp,-12
   11748:	dc000015 	stw	r16,0(sp)
   1174c:	04000074 	movhi	r16,1
   11750:	dc400115 	stw	r17,4(sp)
   11754:	8408ca04 	addi	r16,r16,9000
   11758:	2023883a 	mov	r17,r4
   1175c:	2809883a 	mov	r4,r5
   11760:	300b883a 	mov	r5,r6
   11764:	380d883a 	mov	r6,r7
   11768:	dfc00215 	stw	ra,8(sp)
   1176c:	80000015 	stw	zero,0(r16)
   11770:	00119c80 	call	119c8 <write>
   11774:	00ffffc4 	movi	r3,-1
   11778:	10c0031e 	bne	r2,r3,11788 <_write_r+0x44>
   1177c:	80c00017 	ldw	r3,0(r16)
   11780:	18000126 	beq	r3,zero,11788 <_write_r+0x44>
   11784:	88c00015 	stw	r3,0(r17)
   11788:	dfc00217 	ldw	ra,8(sp)
   1178c:	dc400117 	ldw	r17,4(sp)
   11790:	dc000017 	ldw	r16,0(sp)
   11794:	dec00304 	addi	sp,sp,12
   11798:	f800283a 	ret

0001179c <__mulsi3>:
   1179c:	0005883a 	mov	r2,zero
   117a0:	20000726 	beq	r4,zero,117c0 <__mulsi3+0x24>
   117a4:	20c0004c 	andi	r3,r4,1
   117a8:	2008d07a 	srli	r4,r4,1
   117ac:	18000126 	beq	r3,zero,117b4 <__mulsi3+0x18>
   117b0:	1145883a 	add	r2,r2,r5
   117b4:	294b883a 	add	r5,r5,r5
   117b8:	203ffa1e 	bne	r4,zero,117a4 <__alt_data_end+0xffff17a4>
   117bc:	f800283a 	ret
   117c0:	f800283a 	ret

000117c4 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   117c4:	008007c4 	movi	r2,31
   117c8:	11002136 	bltu	r2,r4,11850 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   117cc:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   117d0:	00ffff84 	movi	r3,-2
   117d4:	38c4703a 	and	r2,r7,r3
   117d8:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   117dc:	200490fa 	slli	r2,r4,3
   117e0:	02000074 	movhi	r8,1
   117e4:	4209ab04 	addi	r8,r8,9900
   117e8:	4085883a 	add	r2,r8,r2
   117ec:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
   117f0:	11400115 	stw	r5,4(r2)
   117f4:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   117f8:	30000726 	beq	r6,zero,11818 <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   117fc:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11800:	28c6703a 	and	r3,r5,r3
   11804:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   11808:	d0e08417 	ldw	r3,-32240(gp)
   1180c:	1104983a 	sll	r2,r2,r4
   11810:	10c4b03a 	or	r2,r2,r3
   11814:	00000706 	br	11834 <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11818:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1181c:	28c6703a 	and	r3,r5,r3
   11820:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   11824:	1104983a 	sll	r2,r2,r4
   11828:	d0e08417 	ldw	r3,-32240(gp)
   1182c:	0084303a 	nor	r2,zero,r2
   11830:	10c4703a 	and	r2,r2,r3
   11834:	d0a08415 	stw	r2,-32240(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11838:	d0a08417 	ldw	r2,-32240(gp)
   1183c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11840:	2801703a 	wrctl	status,r5
   11844:	3801703a 	wrctl	status,r7
   11848:	0005883a 	mov	r2,zero
   1184c:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
   11850:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
   11854:	f800283a 	ret

00011858 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   11858:	deffff04 	addi	sp,sp,-4
   1185c:	01000074 	movhi	r4,1
   11860:	01400074 	movhi	r5,1
   11864:	dfc00015 	stw	ra,0(sp)
   11868:	2107ee04 	addi	r4,r4,8120
   1186c:	29485704 	addi	r5,r5,8540

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   11870:	2140061e 	bne	r4,r5,1188c <alt_load+0x34>
   11874:	01000074 	movhi	r4,1
   11878:	01400074 	movhi	r5,1
   1187c:	21000804 	addi	r4,r4,32
   11880:	29400804 	addi	r5,r5,32
   11884:	2140121e 	bne	r4,r5,118d0 <alt_load+0x78>
   11888:	00000b06 	br	118b8 <alt_load+0x60>
   1188c:	00c00074 	movhi	r3,1
   11890:	18c85704 	addi	r3,r3,8540
   11894:	1907c83a 	sub	r3,r3,r4
   11898:	0005883a 	mov	r2,zero
  {
    while( to != end )
   1189c:	10fff526 	beq	r2,r3,11874 <__alt_data_end+0xffff1874>
    {
      *to++ = *from++;
   118a0:	114f883a 	add	r7,r2,r5
   118a4:	39c00017 	ldw	r7,0(r7)
   118a8:	110d883a 	add	r6,r2,r4
   118ac:	10800104 	addi	r2,r2,4
   118b0:	31c00015 	stw	r7,0(r6)
   118b4:	003ff906 	br	1189c <__alt_data_end+0xffff189c>
   118b8:	01000074 	movhi	r4,1
   118bc:	01400074 	movhi	r5,1
   118c0:	2107bf04 	addi	r4,r4,7932
   118c4:	2947bf04 	addi	r5,r5,7932

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   118c8:	2140101e 	bne	r4,r5,1190c <alt_load+0xb4>
   118cc:	00000b06 	br	118fc <alt_load+0xa4>
   118d0:	00c00074 	movhi	r3,1
   118d4:	18c06004 	addi	r3,r3,384
   118d8:	1907c83a 	sub	r3,r3,r4
   118dc:	0005883a 	mov	r2,zero
  {
    while( to != end )
   118e0:	10fff526 	beq	r2,r3,118b8 <__alt_data_end+0xffff18b8>
    {
      *to++ = *from++;
   118e4:	114f883a 	add	r7,r2,r5
   118e8:	39c00017 	ldw	r7,0(r7)
   118ec:	110d883a 	add	r6,r2,r4
   118f0:	10800104 	addi	r2,r2,4
   118f4:	31c00015 	stw	r7,0(r6)
   118f8:	003ff906 	br	118e0 <__alt_data_end+0xffff18e0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   118fc:	0011c740 	call	11c74 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   11900:	dfc00017 	ldw	ra,0(sp)
   11904:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   11908:	0011d601 	jmpi	11d60 <alt_icache_flush_all>
   1190c:	00c00074 	movhi	r3,1
   11910:	18c7ee04 	addi	r3,r3,8120
   11914:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   11918:	0005883a 	mov	r2,zero
  {
    while( to != end )
   1191c:	18bff726 	beq	r3,r2,118fc <__alt_data_end+0xffff18fc>
    {
      *to++ = *from++;
   11920:	114f883a 	add	r7,r2,r5
   11924:	39c00017 	ldw	r7,0(r7)
   11928:	110d883a 	add	r6,r2,r4
   1192c:	10800104 	addi	r2,r2,4
   11930:	31c00015 	stw	r7,0(r6)
   11934:	003ff906 	br	1191c <__alt_data_end+0xffff191c>

00011938 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   11938:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1193c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   11940:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   11944:	0011a280 	call	11a28 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   11948:	0011a480 	call	11a48 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   1194c:	d1a08517 	ldw	r6,-32236(gp)
   11950:	d1608617 	ldw	r5,-32232(gp)
   11954:	d1208717 	ldw	r4,-32228(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   11958:	dfc00017 	ldw	ra,0(sp)
   1195c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   11960:	0010c2c1 	jmpi	10c2c <main>

00011964 <times>:
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   11964:	d0e08917 	ldw	r3,-32220(gp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   11968:	d0a08817 	ldw	r2,-32224(gp)
{
  clock_t ticks = alt_nticks(); 

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   1196c:	1800101e 	bne	r3,zero,119b0 <times+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   11970:	d0a00d17 	ldw	r2,-32716(gp)
   11974:	10000926 	beq	r2,zero,1199c <times+0x38>
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   11978:	deffff04 	addi	sp,sp,-4
   1197c:	dfc00015 	stw	ra,0(sp)
   11980:	103ee83a 	callr	r2

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  {
    ALT_ERRNO = ENOSYS;
   11984:	00c01604 	movi	r3,88
   11988:	10c00015 	stw	r3,0(r2)
    return 0;
   1198c:	0005883a 	mov	r2,zero
  buf->tms_stime  = ticks;
  buf->tms_cutime = 0;
  buf->tms_cstime = 0;

  return ticks;
}
   11990:	dfc00017 	ldw	ra,0(sp)
   11994:	dec00104 	addi	sp,sp,4
   11998:	f800283a 	ret
   1199c:	d0a08304 	addi	r2,gp,-32244

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  {
    ALT_ERRNO = ENOSYS;
   119a0:	00c01604 	movi	r3,88
   119a4:	10c00015 	stw	r3,0(r2)
    return 0;
   119a8:	0005883a 	mov	r2,zero
  buf->tms_stime  = ticks;
  buf->tms_cutime = 0;
  buf->tms_cstime = 0;

  return ticks;
}
   119ac:	f800283a 	ret
    return 0;
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   119b0:	20000015 	stw	zero,0(r4)
  buf->tms_stime  = ticks;
   119b4:	20800115 	stw	r2,4(r4)
  buf->tms_cutime = 0;
   119b8:	20000215 	stw	zero,8(r4)
  buf->tms_cstime = 0;
   119bc:	20000315 	stw	zero,12(r4)

  return ticks;
   119c0:	f800283a 	ret

000119c4 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
   119c4:	0011bec1 	jmpi	11bec <alt_busy_sleep>

000119c8 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   119c8:	00800044 	movi	r2,1
   119cc:	20800226 	beq	r4,r2,119d8 <write+0x10>
   119d0:	00800084 	movi	r2,2
   119d4:	2080041e 	bne	r4,r2,119e8 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   119d8:	01000074 	movhi	r4,1
   119dc:	000f883a 	mov	r7,zero
   119e0:	21084e04 	addi	r4,r4,8504
   119e4:	0011a581 	jmpi	11a58 <altera_avalon_jtag_uart_write>
   119e8:	d0a00d17 	ldw	r2,-32716(gp)
   119ec:	10000926 	beq	r2,zero,11a14 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   119f0:	deffff04 	addi	sp,sp,-4
   119f4:	dfc00015 	stw	ra,0(sp)
   119f8:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   119fc:	00c01444 	movi	r3,81
   11a00:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   11a04:	00bfffc4 	movi	r2,-1
   11a08:	dfc00017 	ldw	ra,0(sp)
   11a0c:	dec00104 	addi	sp,sp,4
   11a10:	f800283a 	ret
   11a14:	d0a08304 	addi	r2,gp,-32244
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   11a18:	00c01444 	movi	r3,81
   11a1c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   11a20:	00bfffc4 	movi	r2,-1
   11a24:	f800283a 	ret

00011a28 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   11a28:	deffff04 	addi	sp,sp,-4
   11a2c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   11a30:	0011e500 	call	11e50 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   11a34:	00800044 	movi	r2,1
   11a38:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   11a3c:	dfc00017 	ldw	ra,0(sp)
   11a40:	dec00104 	addi	sp,sp,4
   11a44:	f800283a 	ret

00011a48 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   11a48:	01000074 	movhi	r4,1
   11a4c:	d1600904 	addi	r5,gp,-32732
   11a50:	21082604 	addi	r4,r4,8344
   11a54:	0011c801 	jmpi	11c80 <alt_dev_llist_insert>

00011a58 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   11a58:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   11a5c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   11a60:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   11a64:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   11a68:	2980072e 	bgeu	r5,r6,11a88 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   11a6c:	38c00037 	ldwio	r3,0(r7)
   11a70:	18ffffec 	andhi	r3,r3,65535
   11a74:	183ffc26 	beq	r3,zero,11a68 <__alt_data_end+0xffff1a68>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   11a78:	28c00007 	ldb	r3,0(r5)
   11a7c:	20c00035 	stwio	r3,0(r4)
   11a80:	29400044 	addi	r5,r5,1
   11a84:	003ff806 	br	11a68 <__alt_data_end+0xffff1a68>

  return count;
}
   11a88:	f800283a 	ret

00011a8c <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   11a8c:	d1600904 	addi	r5,gp,-32732
   11a90:	0011cec1 	jmpi	11cec <alt_find_dev>

00011a94 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   11a94:	20800a17 	ldw	r2,40(r4)
   11a98:	10800023 	ldbuio	r2,0(r2)
   11a9c:	28800005 	stb	r2,0(r5)

	return 0;
}
   11aa0:	0005883a 	mov	r2,zero
   11aa4:	f800283a 	ret

00011aa8 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11aa8:	20800a17 	ldw	r2,40(r4)
   11aac:	29400fcc 	andi	r5,r5,63
   11ab0:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11ab4:	20800a17 	ldw	r2,40(r4)
   11ab8:	10800063 	ldbuio	r2,1(r2)
   11abc:	30800005 	stb	r2,0(r6)

	return 0;
}
   11ac0:	0005883a 	mov	r2,zero
   11ac4:	f800283a 	ret

00011ac8 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11ac8:	20800a17 	ldw	r2,40(r4)
   11acc:	29400fcc 	andi	r5,r5,63
   11ad0:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   11ad4:	20800a17 	ldw	r2,40(r4)
   11ad8:	11800065 	stbio	r6,1(r2)

	return 0;
}
   11adc:	0005883a 	mov	r2,zero
   11ae0:	f800283a 	ret

00011ae4 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11ae4:	20800a17 	ldw	r2,40(r4)
   11ae8:	00c00c84 	movi	r3,50
   11aec:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11af0:	20800a17 	ldw	r2,40(r4)
   11af4:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11af8:	00c00cc4 	movi	r3,51
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11afc:	10803fcc 	andi	r2,r2,255
   11b00:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11b04:	20800a17 	ldw	r2,40(r4)
   11b08:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11b0c:	20800a17 	ldw	r2,40(r4)
   11b10:	10800063 	ldbuio	r2,1(r2)
   11b14:	10803fcc 	andi	r2,r2,255
   11b18:	1006923a 	slli	r3,r2,8
   11b1c:	28800017 	ldw	r2,0(r5)
   11b20:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
   11b24:	10e0000c 	andi	r3,r2,32768
   11b28:	18000126 	beq	r3,zero,11b30 <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
   11b2c:	10bffff4 	orhi	r2,r2,65535
   11b30:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   11b34:	0005883a 	mov	r2,zero
   11b38:	f800283a 	ret

00011b3c <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11b3c:	20800a17 	ldw	r2,40(r4)
   11b40:	00c00d04 	movi	r3,52
   11b44:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11b48:	20800a17 	ldw	r2,40(r4)
   11b4c:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11b50:	00c00d44 	movi	r3,53
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11b54:	10803fcc 	andi	r2,r2,255
   11b58:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11b5c:	20800a17 	ldw	r2,40(r4)
   11b60:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11b64:	20800a17 	ldw	r2,40(r4)
   11b68:	10800063 	ldbuio	r2,1(r2)
   11b6c:	10803fcc 	andi	r2,r2,255
   11b70:	1006923a 	slli	r3,r2,8
   11b74:	28800017 	ldw	r2,0(r5)
   11b78:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
   11b7c:	10e0000c 	andi	r3,r2,32768
   11b80:	18000126 	beq	r3,zero,11b88 <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
   11b84:	10bffff4 	orhi	r2,r2,65535
   11b88:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   11b8c:	0005883a 	mov	r2,zero
   11b90:	f800283a 	ret

00011b94 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11b94:	20800a17 	ldw	r2,40(r4)
   11b98:	00c00d84 	movi	r3,54
   11b9c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11ba0:	20800a17 	ldw	r2,40(r4)
   11ba4:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11ba8:	00c00dc4 	movi	r3,55
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11bac:	10803fcc 	andi	r2,r2,255
   11bb0:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11bb4:	20800a17 	ldw	r2,40(r4)
   11bb8:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11bbc:	20800a17 	ldw	r2,40(r4)
   11bc0:	10800063 	ldbuio	r2,1(r2)
   11bc4:	10803fcc 	andi	r2,r2,255
   11bc8:	1006923a 	slli	r3,r2,8
   11bcc:	28800017 	ldw	r2,0(r5)
   11bd0:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
   11bd4:	10e0000c 	andi	r3,r2,32768
   11bd8:	18000126 	beq	r3,zero,11be0 <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
   11bdc:	10bffff4 	orhi	r2,r2,65535
   11be0:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   11be4:	0005883a 	mov	r2,zero
   11be8:	f800283a 	ret

00011bec <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   11bec:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   11bf0:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   11bf4:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   11bf8:	dc000015 	stw	r16,0(sp)
   11bfc:	dfc00115 	stw	ra,4(sp)
   11c00:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   11c04:	0010e880 	call	10e88 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   11c08:	10001026 	beq	r2,zero,11c4c <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   11c0c:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   11c10:	013999b4 	movhi	r4,58982
   11c14:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   11c18:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   11c1c:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   11c20:	297fffc4 	addi	r5,r5,-1
   11c24:	283ffe1e 	bne	r5,zero,11c20 <__alt_data_end+0xffff1c20>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   11c28:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   11c2c:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   11c30:	18bffb16 	blt	r3,r2,11c20 <__alt_data_end+0xffff1c20>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11c34:	01400144 	movi	r5,5
   11c38:	8009883a 	mov	r4,r16
   11c3c:	001179c0 	call	1179c <__mulsi3>
   11c40:	10bfffc4 	addi	r2,r2,-1
   11c44:	103ffe1e 	bne	r2,zero,11c40 <__alt_data_end+0xffff1c40>
   11c48:	00000506 	br	11c60 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   11c4c:	01400144 	movi	r5,5
   11c50:	8009883a 	mov	r4,r16
   11c54:	001179c0 	call	1179c <__mulsi3>
   11c58:	10bfffc4 	addi	r2,r2,-1
   11c5c:	00bffe16 	blt	zero,r2,11c58 <__alt_data_end+0xffff1c58>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   11c60:	0005883a 	mov	r2,zero
   11c64:	dfc00117 	ldw	ra,4(sp)
   11c68:	dc000017 	ldw	r16,0(sp)
   11c6c:	dec00204 	addi	sp,sp,8
   11c70:	f800283a 	ret

00011c74 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11c74:	f800283a 	ret

00011c78 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   11c78:	3005883a 	mov	r2,r6
   11c7c:	f800283a 	ret

00011c80 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11c80:	20000226 	beq	r4,zero,11c8c <alt_dev_llist_insert+0xc>
   11c84:	20800217 	ldw	r2,8(r4)
   11c88:	1000101e 	bne	r2,zero,11ccc <alt_dev_llist_insert+0x4c>
   11c8c:	d0a00d17 	ldw	r2,-32716(gp)
   11c90:	10000926 	beq	r2,zero,11cb8 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   11c94:	deffff04 	addi	sp,sp,-4
   11c98:	dfc00015 	stw	ra,0(sp)
   11c9c:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   11ca0:	00c00584 	movi	r3,22
   11ca4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   11ca8:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   11cac:	dfc00017 	ldw	ra,0(sp)
   11cb0:	dec00104 	addi	sp,sp,4
   11cb4:	f800283a 	ret
   11cb8:	d0a08304 	addi	r2,gp,-32244
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   11cbc:	00c00584 	movi	r3,22
   11cc0:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   11cc4:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   11cc8:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   11ccc:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11cd0:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   11cd4:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   11cd8:	28800017 	ldw	r2,0(r5)
   11cdc:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   11ce0:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   11ce4:	0005883a 	mov	r2,zero
   11ce8:	f800283a 	ret

00011cec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11cec:	defffb04 	addi	sp,sp,-20
   11cf0:	dcc00315 	stw	r19,12(sp)
   11cf4:	dc800215 	stw	r18,8(sp)
   11cf8:	dc400115 	stw	r17,4(sp)
   11cfc:	dc000015 	stw	r16,0(sp)
   11d00:	dfc00415 	stw	ra,16(sp)
   11d04:	2027883a 	mov	r19,r4
   11d08:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   11d0c:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   11d10:	00110bc0 	call	110bc <strlen>
   11d14:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11d18:	84400726 	beq	r16,r17,11d38 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11d1c:	81000217 	ldw	r4,8(r16)
   11d20:	900d883a 	mov	r6,r18
   11d24:	980b883a 	mov	r5,r19
   11d28:	0011ecc0 	call	11ecc <memcmp>
   11d2c:	10000426 	beq	r2,zero,11d40 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   11d30:	84000017 	ldw	r16,0(r16)
   11d34:	003ff806 	br	11d18 <__alt_data_end+0xffff1d18>
  }
  
  /* No match found */
  
  return NULL;
   11d38:	0005883a 	mov	r2,zero
   11d3c:	00000106 	br	11d44 <alt_find_dev+0x58>
   11d40:	8005883a 	mov	r2,r16
}
   11d44:	dfc00417 	ldw	ra,16(sp)
   11d48:	dcc00317 	ldw	r19,12(sp)
   11d4c:	dc800217 	ldw	r18,8(sp)
   11d50:	dc400117 	ldw	r17,4(sp)
   11d54:	dc000017 	ldw	r16,0(sp)
   11d58:	dec00504 	addi	sp,sp,20
   11d5c:	f800283a 	ret

00011d60 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11d60:	f800283a 	ret

00011d64 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11d64:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11d68:	00bfff84 	movi	r2,-2
   11d6c:	1884703a 	and	r2,r3,r2
   11d70:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   11d74:	21400117 	ldw	r5,4(r4)
   11d78:	20800017 	ldw	r2,0(r4)
   11d7c:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
   11d80:	21400117 	ldw	r5,4(r4)
   11d84:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   11d88:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
   11d8c:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11d90:	1801703a 	wrctl	status,r3
   11d94:	f800283a 	ret

00011d98 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11d98:	d0a08817 	ldw	r2,-32224(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11d9c:	defffb04 	addi	sp,sp,-20
   11da0:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   11da4:	d4200e17 	ldw	r16,-32712(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11da8:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11dac:	dc800215 	stw	r18,8(sp)
   11db0:	dc400115 	stw	r17,4(sp)
   11db4:	dfc00415 	stw	ra,16(sp)
   11db8:	dcc00315 	stw	r19,12(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11dbc:	d0a08815 	stw	r2,-32224(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11dc0:	d4600e04 	addi	r17,gp,-32712
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
   11dc4:	04800044 	movi	r18,1

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11dc8:	84401a26 	beq	r16,r17,11e34 <alt_tick+0x9c>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11dcc:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
   11dd0:	84c00017 	ldw	r19,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11dd4:	10000326 	beq	r2,zero,11de4 <alt_tick+0x4c>
   11dd8:	d0a08817 	ldw	r2,-32224(gp)
   11ddc:	1000011e 	bne	r2,zero,11de4 <alt_tick+0x4c>
    {
      alarm->rollover = 0;
   11de0:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   11de4:	d0e08817 	ldw	r3,-32224(gp)
   11de8:	80800217 	ldw	r2,8(r16)
   11dec:	18800f36 	bltu	r3,r2,11e2c <alt_tick+0x94>
   11df0:	80800403 	ldbu	r2,16(r16)
   11df4:	10000d1e 	bne	r2,zero,11e2c <alt_tick+0x94>
    {
      next_callback = alarm->callback (alarm->context);
   11df8:	80800317 	ldw	r2,12(r16)
   11dfc:	81000517 	ldw	r4,20(r16)
   11e00:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   11e04:	1000031e 	bne	r2,zero,11e14 <alt_tick+0x7c>
      {
        alt_alarm_stop (alarm);
   11e08:	8009883a 	mov	r4,r16
   11e0c:	0011d640 	call	11d64 <alt_alarm_stop>
   11e10:	00000606 	br	11e2c <alt_tick+0x94>
      }
      else
      {
        alarm->time += next_callback;
   11e14:	80c00217 	ldw	r3,8(r16)
   11e18:	10c5883a 	add	r2,r2,r3
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11e1c:	d0e08817 	ldw	r3,-32224(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
   11e20:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11e24:	10c0012e 	bgeu	r2,r3,11e2c <alt_tick+0x94>
        {
          alarm->rollover = 1;
   11e28:	84800405 	stb	r18,16(r16)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11e2c:	9821883a 	mov	r16,r19
   11e30:	003fe506 	br	11dc8 <__alt_data_end+0xffff1dc8>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   11e34:	dfc00417 	ldw	ra,16(sp)
   11e38:	dcc00317 	ldw	r19,12(sp)
   11e3c:	dc800217 	ldw	r18,8(sp)
   11e40:	dc400117 	ldw	r17,4(sp)
   11e44:	dc000017 	ldw	r16,0(sp)
   11e48:	dec00504 	addi	sp,sp,20
   11e4c:	f800283a 	ret

00011e50 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   11e50:	000170fa 	wrctl	ienable,zero
   11e54:	f800283a 	ret

00011e58 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   11e58:	213ffe84 	addi	r4,r4,-6
   11e5c:	008003c4 	movi	r2,15
   11e60:	11001636 	bltu	r2,r4,11ebc <alt_exception_cause_generated_bad_addr+0x64>
   11e64:	200890ba 	slli	r4,r4,2
   11e68:	00800074 	movhi	r2,1
   11e6c:	10879f04 	addi	r2,r2,7804
   11e70:	2089883a 	add	r4,r4,r2
   11e74:	20800017 	ldw	r2,0(r4)
   11e78:	1000683a 	jmp	r2
   11e7c:	00011ec4 	movi	zero,1147
   11e80:	00011ec4 	movi	zero,1147
   11e84:	00011ebc 	xorhi	zero,zero,1146
   11e88:	00011ebc 	xorhi	zero,zero,1146
   11e8c:	00011ebc 	xorhi	zero,zero,1146
   11e90:	00011ec4 	movi	zero,1147
   11e94:	00011ebc 	xorhi	zero,zero,1146
   11e98:	00011ebc 	xorhi	zero,zero,1146
   11e9c:	00011ec4 	movi	zero,1147
   11ea0:	00011ec4 	movi	zero,1147
   11ea4:	00011ebc 	xorhi	zero,zero,1146
   11ea8:	00011ec4 	movi	zero,1147
   11eac:	00011ebc 	xorhi	zero,zero,1146
   11eb0:	00011ebc 	xorhi	zero,zero,1146
   11eb4:	00011ebc 	xorhi	zero,zero,1146
   11eb8:	00011ec4 	movi	zero,1147
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11ebc:	0005883a 	mov	r2,zero
   11ec0:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11ec4:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   11ec8:	f800283a 	ret

00011ecc <memcmp>:
   11ecc:	218d883a 	add	r6,r4,r6
   11ed0:	21800826 	beq	r4,r6,11ef4 <memcmp+0x28>
   11ed4:	20800003 	ldbu	r2,0(r4)
   11ed8:	28c00003 	ldbu	r3,0(r5)
   11edc:	10c00226 	beq	r2,r3,11ee8 <memcmp+0x1c>
   11ee0:	10c5c83a 	sub	r2,r2,r3
   11ee4:	f800283a 	ret
   11ee8:	21000044 	addi	r4,r4,1
   11eec:	29400044 	addi	r5,r5,1
   11ef0:	003ff706 	br	11ed0 <__alt_data_end+0xffff1ed0>
   11ef4:	0005883a 	mov	r2,zero
   11ef8:	f800283a 	ret
